"use strict";

/* jshint ignore:start */



/* jshint ignore:end */

define('ghost-admin/adapters/application', ['exports', 'ghost-admin/adapters/embedded-relation-adapter'], function (exports, _ghostAdminAdaptersEmbeddedRelationAdapter) {
    exports['default'] = _ghostAdminAdaptersEmbeddedRelationAdapter['default'].extend({

        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        }

    });
});
define('ghost-admin/adapters/base', ['exports', 'ember-service/inject', 'ember-data/adapters/rest', 'ghost-admin/utils/ghost-paths', 'ember-simple-auth/mixins/data-adapter-mixin', 'ember-ajax/mixins/ajax-support'], function (exports, _emberServiceInject, _emberDataAdaptersRest, _ghostAdminUtilsGhostPaths, _emberSimpleAuthMixinsDataAdapterMixin, _emberAjaxMixinsAjaxSupport) {
    exports['default'] = _emberDataAdaptersRest['default'].extend(_emberSimpleAuthMixinsDataAdapterMixin['default'], _emberAjaxMixinsAjaxSupport['default'], {
        authorizer: 'authorizer:oauth2',

        host: window.location.origin,
        namespace: (0, _ghostAdminUtilsGhostPaths['default'])().apiRoot.slice(1),

        session: (0, _emberServiceInject['default'])(),

        shouldBackgroundReloadRecord: function shouldBackgroundReloadRecord() {
            return false;
        },

        query: function query(store, type, _query) {
            var id = undefined;

            if (_query.id) {
                id = _query.id;
                delete _query.id;
            }

            return this.ajax(this.buildURL(type.modelName, id), 'GET', { data: _query });
        },

        buildURL: function buildURL() {
            // Ensure trailing slashes
            var url = this._super.apply(this, arguments);

            if (url.slice(-1) !== '/') {
                url += '/';
            }

            return url;
        }
    });
});
define('ghost-admin/adapters/embedded-relation-adapter', ['exports', 'ember-metal/get', 'ember-utils', 'ghost-admin/adapters/base'], function (exports, _emberMetalGet, _emberUtils, _ghostAdminAdaptersBase) {

    // EmbeddedRelationAdapter will augment the query object in calls made to
    // DS.Store#findRecord, findAll, query, and queryRecord with the correct "includes"
    // (?include=relatedType) by introspecting on the provided subclass of the DS.Model.
    // In cases where there is no query object (DS.Model#save, or simple finds) the URL
    // that is built will be augmented with ?include=... where appropriate.
    //
    // Example:
    // If a model has an embedded hasMany relation, the related type will be included:
    // roles: DS.hasMany('role', { embedded: 'always' }) => ?include=roles

    exports['default'] = _ghostAdminAdaptersBase['default'].extend({
        find: function find(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'find'), 'GET');
        },

        findRecord: function findRecord(store, type, id, snapshot) {
            return this.ajax(this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord'), 'GET');
        },

        findAll: function findAll(store, type, sinceToken) {
            var query = undefined,
                url = undefined;

            if (sinceToken) {
                query = { since: sinceToken };
            }

            url = this.buildIncludeURL(store, type.modelName, null, null, 'findAll');

            return this.ajax(url, 'GET', { data: query });
        },

        query: function query(store, type, _query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, _query));
        },

        queryRecord: function queryRecord(store, type, query) {
            return this._super(store, type, this.buildQuery(store, type.modelName, query));
        },

        createRecord: function createRecord(store, type, snapshot) {
            return this.saveRecord(store, type, snapshot, { method: 'POST' }, 'createRecord');
        },

        updateRecord: function updateRecord(store, type, snapshot) {
            var options = {
                method: 'PUT',
                id: (0, _emberMetalGet['default'])(snapshot, 'id')
            };

            return this.saveRecord(store, type, snapshot, options, 'updateRecord');
        },

        saveRecord: function saveRecord(store, type, snapshot, options, requestType) {
            var _options = options || {};
            var url = this.buildIncludeURL(store, type.modelName, _options.id, snapshot, requestType);
            var payload = this.preparePayload(store, type, snapshot);

            return this.ajax(url, _options.method, payload);
        },

        preparePayload: function preparePayload(store, type, snapshot) {
            var serializer = store.serializerFor(type.modelName);
            var payload = {};

            serializer.serializeIntoHash(payload, type, snapshot);

            return { data: payload };
        },

        buildIncludeURL: function buildIncludeURL(store, modelName, id, snapshot, requestType, query) {
            var includes = this.getEmbeddedRelations(store, modelName);
            var url = this.buildURL(modelName, id, snapshot, requestType, query);

            if (includes.length) {
                url += '?include=' + includes.join(',');
            }

            return url;
        },

        buildQuery: function buildQuery(store, modelName, options) {
            var deDupe = {};
            var toInclude = this.getEmbeddedRelations(store, modelName);
            var query = options || {};

            if (toInclude.length) {
                // If this is a find by id, build a query object and attach the includes
                if (typeof options === 'string' || typeof options === 'number') {
                    query = {};
                    query.id = options;
                    query.include = toInclude.join(',');
                } else if (typeof options === 'object' || (0, _emberUtils.isNone)(options)) {
                    // If this is a find all (no existing query object) build one and attach
                    // the includes.
                    // If this is a find with an existing query object then merge the includes
                    // into the existing object. Existing properties and includes are preserved.
                    query = query || {};
                    toInclude = toInclude.concat(query.include ? query.include.split(',') : []);

                    toInclude.forEach(function (include) {
                        deDupe[include] = true;
                    });

                    query.include = Object.keys(deDupe).join(',');
                }
            }

            return query;
        },

        getEmbeddedRelations: function getEmbeddedRelations(store, modelName) {
            var model = store.modelFor(modelName);
            var ret = [];

            // Iterate through the model's relationships and build a list
            // of those that need to be pulled in via "include" from the API
            model.eachRelationship(function (name, meta) {
                if (meta.kind === 'hasMany' && Object.prototype.hasOwnProperty.call(meta.options, 'embedded') && meta.options.embedded === 'always') {
                    ret.push(name);
                }
            });

            return ret;
        }
    });
});
define('ghost-admin/adapters/setting', ['exports', 'ghost-admin/adapters/application'], function (exports, _ghostAdminAdaptersApplication) {
    exports['default'] = _ghostAdminAdaptersApplication['default'].extend({
        updateRecord: function updateRecord(store, type, record) {
            var data = {};
            var serializer = store.serializerFor(type.modelName);

            // remove the fake id that we added onto the model.
            delete record.id;

            // use the SettingSerializer to transform the model back into
            // an array of settings objects like the API expects
            serializer.serializeIntoHash(data, type, record);

            // use the ApplicationAdapter's buildURL method but do not
            // pass in an id.
            return this.ajax(this.buildURL(type.modelName), 'PUT', { data: data });
        }
    });
});
define('ghost-admin/adapters/tag', ['exports', 'ghost-admin/adapters/application', 'ghost-admin/mixins/slug-url'], function (exports, _ghostAdminAdaptersApplication, _ghostAdminMixinsSlugUrl) {
  exports['default'] = _ghostAdminAdaptersApplication['default'].extend(_ghostAdminMixinsSlugUrl['default']);
});
define('ghost-admin/adapters/user', ['exports', 'ghost-admin/adapters/application', 'ghost-admin/mixins/slug-url'], function (exports, _ghostAdminAdaptersApplication, _ghostAdminMixinsSlugUrl) {
    exports['default'] = _ghostAdminAdaptersApplication['default'].extend(_ghostAdminMixinsSlugUrl['default'], {
        find: function find(store, type, id) {
            return this.findQuery(store, type, { id: id, status: 'all' });
        },

        // TODO: This is needed because the API currently expects you to know the
        // status of the record before retrieving by ID. Quick fix is to always
        // include status=all in the query
        findRecord: function findRecord(store, type, id, snapshot) {
            var url = this.buildIncludeURL(store, type.modelName, id, snapshot, 'findRecord');

            url += '&status=all';

            return this.ajax(url, 'GET');
        },

        findAll: function findAll(store, type, id) {
            return this.query(store, type, { id: id, status: 'all' });
        },

        queryRecord: function queryRecord(store, type, query) {
            if (!query || query.id !== 'me') {
                return this._super.apply(this, arguments);
            }

            var url = this.buildURL(type.modelName, 'me', null, 'findRecord');

            return this.ajax(url, 'GET', { data: { include: 'roles' } });
        }
    });
});
define('ghost-admin/app', ['exports', 'ember', 'ember-application', 'ghost-admin/resolver', 'ember-load-initializers', 'ghost-admin/utils/route', 'ghost-admin/utils/link-component', 'ghost-admin/utils/text-field', 'ghost-admin/config/environment'], function (exports, _ember, _emberApplication, _ghostAdminResolver, _emberLoadInitializers, _ghostAdminUtilsRoute, _ghostAdminUtilsLinkComponent, _ghostAdminUtilsTextField, _ghostAdminConfigEnvironment) {

    _ember['default'].MODEL_FACTORY_INJECTIONS = true;

    var App = _emberApplication['default'].extend({
        Resolver: _ghostAdminResolver['default'],
        modulePrefix: _ghostAdminConfigEnvironment['default'].modulePrefix,
        podModulePrefix: _ghostAdminConfigEnvironment['default'].podModulePrefix,

        customEvents: {
            touchstart: null,
            touchmove: null,
            touchend: null,
            touchcancel: null
        }
    });

    (0, _emberLoadInitializers['default'])(App, _ghostAdminConfigEnvironment['default'].modulePrefix);

    exports['default'] = App;
});
define('ghost-admin/authenticators/oauth2-ghost', ['exports', 'ghost-admin/authenticators/oauth2', 'rsvp', 'ember-runloop', 'ember-platform', 'ember-utils', 'ember-array/utils'], function (exports, _ghostAdminAuthenticatorsOauth2, _rsvp, _emberRunloop, _emberPlatform, _emberUtils, _emberArrayUtils) {
    exports['default'] = _ghostAdminAuthenticatorsOauth2['default'].extend({
        // TODO: all this is doing is changing the `data` structure, we should
        // probably create our own token auth, maybe look at
        // https://github.com/jpadilla/ember-simple-auth-token
        authenticate: function authenticate(identification, password) {
            var _this = this;

            var scope = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];

            return new _rsvp['default'].Promise(function (resolve, reject) {
                // const data                = { 'grant_type': 'password', username: identification, password };
                var data = identification;
                var serverTokenEndpoint = _this.get('serverTokenEndpoint');
                var scopesString = (0, _emberArrayUtils.wrap)(scope).join(' ');

                // eslint-disable-next-line camelcase
                data.grant_type = 'authorization_code';

                if (!(0, _emberUtils.isEmpty)(scopesString)) {
                    data.scope = scopesString;
                }

                _this.makeRequest(serverTokenEndpoint, data).then(function (response) {
                    (0, _emberRunloop['default'])(function () {
                        var expiresAt = _this._absolutizeExpirationTime(response.expires_in);
                        _this._scheduleAccessTokenRefresh(response.expires_in, expiresAt, response.refresh_token);
                        if (!(0, _emberUtils.isEmpty)(expiresAt)) {
                            response = (0, _emberPlatform.assign)(response, { 'expires_at': expiresAt });
                        }
                        resolve(response);
                    });
                }, function (xhr) {
                    (0, _emberRunloop['default'])(null, reject, xhr.responseJSON || xhr.responseText);
                });
            });
        }
    });
});
define('ghost-admin/authenticators/oauth2', ['exports', 'ember-computed', 'ember-service/inject', 'ember-simple-auth/authenticators/oauth2-password-grant', 'ember-runloop', 'rsvp', 'ember-array/utils', 'ember-utils', 'ember-platform'], function (exports, _emberComputed, _emberServiceInject, _emberSimpleAuthAuthenticatorsOauth2PasswordGrant, _emberRunloop, _rsvp, _emberArrayUtils, _emberUtils, _emberPlatform) {
    exports['default'] = _emberSimpleAuthAuthenticatorsOauth2PasswordGrant['default'].extend({
        ajax: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);

            var handler = _emberRunloop['default'].bind(this, function () {
                _this.onOnline();
            });
            window.addEventListener('online', handler);
        },

        serverTokenEndpoint: (0, _emberComputed['default'])('ghostPaths.apiRoot', function () {
            return this.get('ghostPaths.apiRoot') + '/authentication/token';
        }),

        serverTokenRevocationEndpoint: (0, _emberComputed['default'])('ghostPaths.apiRoot', function () {
            return this.get('ghostPaths.apiRoot') + '/authentication/revoke';
        }),

        makeRequest: function makeRequest(url, data) {
            /* eslint-disable camelcase */
            data.client_id = this.get('config.clientId');
            data.client_secret = this.get('config.clientSecret');
            /* eslint-enable camelcase */

            var options = {
                data: data,
                dataType: 'json',
                contentType: 'application/x-www-form-urlencoded'
            };

            return this.get('ajax').post(url, options);
        },

        /**
         * Invoked when "navigator.online" event is trigerred.
         * This is a helper function to handle intermittent internet connectivity. Token is refreshed
         * when browser status becomes "online".
         */
        onOnline: function onOnline() {
            if (this.get('session.isAuthenticated')) {
                var autoRefresh = this.get('refreshAccessTokens');
                if (autoRefresh) {
                    var expiresIn = this.get('session.data.authenticated.expires_in');
                    var token = this.get('session.data.authenticated.refresh_token');
                    return this._refreshAccessToken(expiresIn, token);
                }
            }
        },

        authenticate: function authenticate(identification, password) {
            var _this2 = this;

            var scope = arguments.length <= 2 || arguments[2] === undefined ? [] : arguments[2];
            var headers = arguments.length <= 3 || arguments[3] === undefined ? {} : arguments[3];

            return new _rsvp['default'].Promise(function (resolve, reject) {
                var data = { 'grant_type': 'password', username: identification, password: password };
                var serverTokenEndpoint = _this2.get('serverTokenEndpoint');
                var scopesString = (0, _emberArrayUtils.wrap)(scope).join(' ');
                if (!(0, _emberUtils.isEmpty)(scopesString)) {
                    data.scope = scopesString;
                }
                _this2.makeRequest(serverTokenEndpoint, data, headers).then(function (response) {
                    (0, _emberRunloop['default'])(function () {
                        /* eslint-disable camelcase */
                        var expiresAt = _this2._absolutizeExpirationTime(response.expires_in);
                        _this2._scheduleAccessTokenRefresh(response.expires_in, expiresAt, response.refresh_token);
                        /* eslint-enable camelcase */

                        if (!(0, _emberUtils.isEmpty)(expiresAt)) {
                            response = (0, _emberPlatform.assign)(response, { 'expires_at': expiresAt });
                        }

                        resolve(response);
                    });
                }, function (error) {
                    reject(error);
                });
            });
        }
    });
});
define('ghost-admin/authorizers/oauth2', ['exports', 'ember-simple-auth/authorizers/oauth2-bearer'], function (exports, _emberSimpleAuthAuthorizersOauth2Bearer) {
  exports['default'] = _emberSimpleAuthAuthorizersOauth2Bearer['default'];
});
define("ghost-admin/components/-lf-get-outlet-state", ["exports", "liquid-fire/components/-lf-get-outlet-state"], function (exports, _liquidFireComponentsLfGetOutletState) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLfGetOutletState["default"];
    }
  });
});
define('ghost-admin/components/active-link', ['exports', 'ember-cli-active-link-wrapper/components/active-link'], function (exports, _emberCliActiveLinkWrapperComponentsActiveLink) {
  exports['default'] = _emberCliActiveLinkWrapperComponentsActiveLink['default'];
});
define('ghost-admin/components/as-scrollable', ['exports', 'ember-scrollable/components/ember-scrollable'], function (exports, _emberScrollableComponentsEmberScrollable) {
  exports['default'] = _emberScrollableComponentsEmberScrollable['default'].extend({
    classNames: 'as-scrollable'
  });
});
define('ghost-admin/components/basic-dropdown', ['exports', 'ember-basic-dropdown/components/basic-dropdown'], function (exports, _emberBasicDropdownComponentsBasicDropdown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdown['default'];
    }
  });
});
define('ghost-admin/components/basic-dropdown/content', ['exports', 'ember-basic-dropdown/components/basic-dropdown/content'], function (exports, _emberBasicDropdownComponentsBasicDropdownContent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdownContent['default'];
    }
  });
});
define('ghost-admin/components/basic-dropdown/trigger', ['exports', 'ember-basic-dropdown/components/basic-dropdown/trigger'], function (exports, _emberBasicDropdownComponentsBasicDropdownTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberBasicDropdownComponentsBasicDropdownTrigger['default'];
    }
  });
});
define('ghost-admin/components/ember-load-remover', ['exports', 'ember-load/components/ember-load-remover'], function (exports, _emberLoadComponentsEmberLoadRemover) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLoadComponentsEmberLoadRemover['default'];
    }
  });
});
define('ghost-admin/components/ember-scrollable', ['exports', 'ember-scrollable/components/ember-scrollable'], function (exports, _emberScrollableComponentsEmberScrollable) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberScrollableComponentsEmberScrollable['default'];
    }
  });
});
define('ghost-admin/components/ember-scrollbar', ['exports', 'ember-scrollable/components/ember-scrollbar'], function (exports, _emberScrollableComponentsEmberScrollbar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberScrollableComponentsEmberScrollbar['default'];
    }
  });
});
define('ghost-admin/components/ember-selectize', ['exports', 'ember-cli-selectize/components/ember-selectize'], function (exports, _emberCliSelectizeComponentsEmberSelectize) {
  exports['default'] = _emberCliSelectizeComponentsEmberSelectize['default'];
});
define('ghost-admin/components/ember-wormhole', ['exports', 'ember-wormhole/components/ember-wormhole'], function (exports, _emberWormholeComponentsEmberWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberWormholeComponentsEmberWormhole['default'];
    }
  });
});
define('ghost-admin/components/gh-activating-list-item', ['exports', 'ember-component', 'ember-runloop'], function (exports, _emberComponent, _emberRunloop) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'li',
        classNameBindings: ['active'],
        active: false,
        linkClasses: null,

        click: function click() {
            this.$('a').blur();
        },

        actions: {
            setActive: function setActive(value) {
                (0, _emberRunloop.schedule)('afterRender', this, function () {
                    this.set('active', value);
                });
            }
        }
    });
});
define('ghost-admin/components/gh-alert', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _emberServiceInject) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'article',
        classNames: ['gh-alert'],
        classNameBindings: ['typeClass'],

        notifications: (0, _emberServiceInject['default'])(),

        typeClass: (0, _emberComputed['default'])('message.type', function () {
            var type = this.get('message.type');
            var classes = '';
            var typeMapping = undefined;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'yellow',
                info: 'blue'
            };

            if (typeMapping[type] !== undefined) {
                classes += 'gh-alert-' + typeMapping[type];
            }

            return classes;
        }),

        actions: {
            closeNotification: function closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost-admin/components/gh-alerts', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-metal/observer'], function (exports, _emberComponent, _emberComputed, _emberServiceInject, _emberMetalObserver) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'aside',
        classNames: 'gh-alerts',

        notifications: (0, _emberServiceInject['default'])(),

        messages: (0, _emberComputed.alias)('notifications.alerts'),

        messageCountObserver: (0, _emberMetalObserver['default'])('messages.[]', function () {
            this.sendAction('notify', this.get('messages').length);
        })
    });
});
define('ghost-admin/components/gh-app', ['exports', 'jquery', 'ember-component', 'ember-metal/observer'], function (exports, _jquery, _emberComponent, _emberMetalObserver) {
    exports['default'] = _emberComponent['default'].extend({
        classNames: ['gh-app'],

        showSettingsMenu: false,

        toggleSettingsMenuBodyClass: (0, _emberMetalObserver['default'])('showSettingsMenu', function () {
            var showSettingsMenu = this.get('showSettingsMenu');

            (0, _jquery['default'])('body').toggleClass('settings-menu-expanded', showSettingsMenu);
        })
    });
});
define('ghost-admin/components/gh-blog-url', ['exports', 'ember-component', 'ember-service/inject'], function (exports, _emberComponent, _emberServiceInject) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: '',

        config: (0, _emberServiceInject['default'])()
    });
});
define('ghost-admin/components/gh-cm-editor', ['exports', 'ember-component', 'ember-runloop', 'ember-service/inject', 'ghost-admin/utils/bound-one-way', 'ember-invoke-action'], function (exports, _emberComponent, _emberRunloop, _emberServiceInject, _ghostAdminUtilsBoundOneWay, _emberInvokeAction) {

    var CmEditorComponent = _emberComponent['default'].extend(_emberInvokeAction.InvokeActionMixin, {
        classNameBindings: ['isFocused:focused'],

        _value: (0, _ghostAdminUtilsBoundOneWay['default'])('value'), // make sure a value exists
        isFocused: false,

        // options for the editor
        lineNumbers: true,
        indentUnit: 4,
        mode: 'htmlmixed',
        theme: 'xq-light',

        _editor: null, // reference to CodeMirror editor

        lazyLoader: (0, _emberServiceInject['default'])(),

        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            this.get('lazyLoader').loadStyle('codemirror', 'assets/codemirror/codemirror.css');

            this.get('lazyLoader').loadScript('codemirror', 'assets/codemirror/codemirror.js').then(function () {
                (0, _emberRunloop.scheduleOnce)('afterRender', _this, function () {
                    this._initCodeMirror();
                });
            });
        },

        _initCodeMirror: function _initCodeMirror() {
            var _this2 = this;

            var options = this.getProperties('lineNumbers', 'indentUnit', 'mode', 'theme');
            var editor = new CodeMirror(this.element, options);

            editor.getDoc().setValue(this.get('_value'));

            // events
            editor.on('focus', (0, _emberRunloop.bind)(this, 'set', 'isFocused', true));
            editor.on('blur', (0, _emberRunloop.bind)(this, 'set', 'isFocused', false));
            editor.on('change', function () {
                (0, _emberRunloop['default'])(_this2, function () {
                    this.invokeAction('update', editor.getDoc().getValue());
                });
            });

            this._editor = editor;
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            // Ensure the editor exists before trying to destroy it. This fixes
            // an error that occurs if codemirror hasn't finished loading before
            // the component is destroyed.
            if (this._editor) {
                var editor = this._editor.getWrapperElement();
                editor.parentNode.removeChild(editor);
                this._editor = null;
            }
        }
    });

    CmEditorComponent.reopenClass({
        positionalParams: ['value']
    });

    exports['default'] = CmEditorComponent;
});
/* global CodeMirror */
define('ghost-admin/components/gh-content-cover', ['exports', 'ember-component'], function (exports, _emberComponent) {
    exports['default'] = _emberComponent['default'].extend({
        classNames: ['content-cover'],

        onClick: null,
        onMouseEnter: null,

        click: function click() {
            this.sendAction('onClick');
        },

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        }
    });
});
/*

Implements a div for covering the page content
when in a menu context that, for example,
should be closed when the user clicks elsewhere.

Example:
```
{{gh-content-cover onClick="closeMenus" onMouseEnter="closeAutoNav"}}
```
**/
define('ghost-admin/components/gh-datetime-input', ['exports', 'ember-component', 'rsvp', 'ember-service/inject', 'ghost-admin/utils/bound-one-way', 'ghost-admin/utils/date-formatting', 'ember-invoke-action'], function (exports, _emberComponent, _rsvp, _emberServiceInject, _ghostAdminUtilsBoundOneWay, _ghostAdminUtilsDateFormatting, _emberInvokeAction) {
    exports['default'] = _emberComponent['default'].extend(_emberInvokeAction.InvokeActionMixin, {
        tagName: 'span',
        classNames: 'input-icon icon-calendar',

        datetime: (0, _ghostAdminUtilsBoundOneWay['default'])('value'),
        inputClass: null,
        inputId: null,
        inputName: null,
        timeZone: (0, _emberServiceInject['default'])(),

        didReceiveAttrs: function didReceiveAttrs() {
            var _this = this;

            var promises = {
                datetime: _rsvp['default'].resolve(this.get('datetime') || moment.utc()),
                blogTimezone: _rsvp['default'].resolve(this.get('timeZone.blogTimezone'))
            };

            if (!this.get('update')) {
                throw new Error('You must provide an `update` action to `{{' + this.templateName + '}}`.');
            }

            _rsvp['default'].hash(promises).then(function (hash) {
                _this.set('datetime', (0, _ghostAdminUtilsDateFormatting.formatDate)(hash.datetime || moment.utc(), hash.blogTimezone));
            });
        },

        focusOut: function focusOut() {
            var datetime = this.get('datetime');

            this.invokeAction('update', datetime);
        }
    });
});
define('ghost-admin/components/gh-dropdown-button', ['exports', 'ember-component', 'ember-service/inject', 'ghost-admin/mixins/dropdown-mixin'], function (exports, _emberComponent, _emberServiceInject, _ghostAdminMixinsDropdownMixin) {
    exports['default'] = _emberComponent['default'].extend(_ghostAdminMixinsDropdownMixin['default'], {
        tagName: 'button',
        attributeBindings: 'role',
        role: 'button',

        // matches with the dropdown this button toggles
        dropdownName: null,

        dropdown: (0, _emberServiceInject['default'])(),

        // Notify dropdown service this dropdown should be toggled
        click: function click(event) {
            this._super(event);
            this.get('dropdown').toggleDropdown(this.get('dropdownName'), this);
        }
    });
});
define('ghost-admin/components/gh-dropdown', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-runloop', 'ghost-admin/mixins/dropdown-mixin'], function (exports, _emberComponent, _emberComputed, _emberServiceInject, _emberRunloop, _ghostAdminMixinsDropdownMixin) {
    exports['default'] = _emberComponent['default'].extend(_ghostAdminMixinsDropdownMixin['default'], {
        classNames: 'dropdown',
        classNameBindings: ['fadeIn:fade-in-scale:fade-out', 'isOpen:open:closed'],

        name: null,
        closeOnClick: false,

        // Helps track the user re-opening the menu while it's fading out.
        closing: false,

        // Helps track whether the dropdown is open or closes, or in a transition to either
        isOpen: false,

        // Managed the toggle between the fade-in and fade-out classes
        fadeIn: (0, _emberComputed['default'])('isOpen', 'closing', function () {
            return this.get('isOpen') && !this.get('closing');
        }),

        dropdown: (0, _emberServiceInject['default'])(),

        open: function open() {
            this.set('isOpen', true);
            this.set('closing', false);
            this.set('button.isOpen', true);
        },

        close: function close() {
            var _this = this;

            this.set('closing', true);

            if (this.get('button')) {
                this.set('button.isOpen', false);
            }

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    (0, _emberRunloop['default'])(_this, function () {
                        if (this.get('closing')) {
                            this.set('isOpen', false);
                            this.set('closing', false);
                        }
                    });
                }
            });
        },

        // Called by the dropdown service when any dropdown button is clicked.
        toggle: function toggle(options) {
            var isClosing = this.get('closing');
            var isOpen = this.get('isOpen');
            var name = this.get('name');
            var targetDropdownName = options.target;
            var button = this.get('button');

            if (name === targetDropdownName && (!isOpen || isClosing)) {
                if (!button) {
                    button = options.button;
                    this.set('button', button);
                }
                this.open();
            } else if (isOpen) {
                this.close();
            }
        },

        click: function click(event) {
            this._super(event);

            if (this.get('closeOnClick')) {
                return this.close();
            }
        },

        didInsertElement: function didInsertElement() {
            var dropdownService = this.get('dropdown');

            this._super.apply(this, arguments);

            dropdownService.on('close', this, this.close);
            dropdownService.on('toggle', this, this.toggle);
        },

        willDestroyElement: function willDestroyElement() {
            var dropdownService = this.get('dropdown');

            this._super.apply(this, arguments);

            dropdownService.off('close', this, this.close);
            dropdownService.off('toggle', this, this.toggle);
        }
    });
});
define('ghost-admin/components/gh-editor-save-button', ['exports', 'ember-component', 'ember-computed'], function (exports, _emberComponent, _emberComputed) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'section',
        classNames: ['splitbtn', 'js-publish-splitbutton'],
        classNameBindings: ['isNew:unsaved'],

        isNew: null,
        isPublished: null,
        willPublish: null,
        willSchedule: null,
        timeScheduled: null,
        postOrPage: null,
        submitting: false,
        statusFreeze: null,
        scheduledWillPublish: false,

        // Tracks whether we're going to change the state of the post on save
        isDangerous: (0, _emberComputed['default'])('isPublished', 'willPublish', 'willSchedule', 'isScheduled', 'scheduledWillPublish', 'statusFreeze', function () {
            if (this.get('scheduledWillPublish')) {
                if (this.get('willPublish') !== this.get('willSchedule')) {
                    return false;
                } else {
                    return true;
                }
            } else {
                if (this.get('isPublished') !== this.get('willPublish')) {
                    return true;
                } else if (this.get('isScheduled') !== this.get('willSchedule')) {
                    return true;
                } else if (this.get('statusFreeze')) {
                    // always show the save button in red, when we're 2 minutes before the scheduled date
                    return true;
                } else {
                    return false;
                }
            }
        }),

        // Text for non-scheduled Posts
        publishText: (0, _emberComputed['default'])('isPublished', 'postOrPage', 'scheduledWillPublish', function () {
            if (this.get('scheduledWillPublish')) {
                return this.get('willPublish') || this.get('willSchedule') ? 'Update ' + this.get('postOrPage') : 'Publish Now';
            } else {
                return this.get('isPublished') ? 'Update ' + this.get('postOrPage') : 'Publish Now';
            }
        }),

        draftText: (0, _emberComputed['default'])('isPublished', 'scheduledWillPublish', function () {
            if (this.get('scheduledWillPublish')) {
                return !this.get('willPublish') || !this.get('willSchedule') ? 'Unpublish' : 'Save Draft';
            } else {
                return this.get('isPublished') ? 'Unpublish' : 'Save Draft';
            }
        }),

        savePostText: (0, _emberComputed['default'])('willPublish', 'publishText', 'postOrPage', 'draftText', 'scheduledWillPublish', 'willSchedule', function () {
            // we have to show the menu for a published post when a scheduled post gets published while the user is in the
            // editor and didn't refresh yet. To do so, we use the 'scheduledWillPublish' CP helper
            if (this.get('scheduledWillPublish')) {
                if (this.get('willSchedule') || this.get('willPublish')) {
                    return 'Update ' + this.get('postOrPage');
                } else {
                    return 'Unpublish';
                }
            } else {
                return this.get('willPublish') ? this.get('publishText') : this.get('draftText');
            }
        }),

        // Text for scheduled Posts
        scheduleText: (0, _emberComputed['default'])('isScheduled', 'postOrPage', function () {
            return this.get('isScheduled') ? 'Update ' + this.get('postOrPage') : 'Schedule Post';
        }),

        unscheduleText: (0, _emberComputed['default'])('isScheduled', function () {
            return this.get('isScheduled') ? 'Unschedule' : 'Save Draft';
        }),

        saveScheduleText: (0, _emberComputed['default'])('willSchedule', 'scheduleText', 'unscheduleText', function () {
            return this.get('willSchedule') ? this.get('scheduleText') : this.get('unscheduleText');
        }),

        deleteText: (0, _emberComputed['default'])('postOrPage', function () {
            return 'Delete ' + this.get('postOrPage');
        }),

        activeClass: (0, _emberComputed['default'])('willPublish', 'willSchedule', function () {
            return this.get('willPublish') || this.get('willSchedule') ? true : false;
        }),

        actions: {
            save: function save() {
                this.sendAction('save');
            },

            setSaveType: function setSaveType(saveType) {
                this.sendAction('setSaveType', saveType);
            },

            'delete': function _delete() {
                this.sendAction('delete');
            }
        }
    });
});
define('ghost-admin/components/gh-error-message', ['exports', 'ember-component', 'ember-computed', 'ember-utils'], function (exports, _emberComponent, _emberComputed, _emberUtils) {

    /**
     * Renders one random error message when passed a DS.Errors object
     * and a property name. The message will be one of the ones associated with
     * that specific property. If there are no errors associated with the property,
     * nothing will be rendered.
     * @param  {DS.Errors} errors   The DS.Errors object
     * @param  {string} property    The property name
     */
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'p',
        classNames: ['response'],

        errors: null,
        property: '',

        isVisible: (0, _emberComputed.notEmpty)('errors'),

        message: (0, _emberComputed['default'])('errors.[]', 'property', function () {
            var property = this.get('property');
            var errors = this.get('errors');
            var messages = [];
            var index = undefined;

            if (!(0, _emberUtils.isEmpty)(errors) && errors.get(property)) {
                errors.get(property).forEach(function (error) {
                    messages.push(error);
                });
                index = Math.floor(Math.random() * messages.length);
                return messages[index].message;
            }
        })
    });
});
define('ghost-admin/components/gh-feature-flag', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _emberServiceInject) {

    var FeatureFlagComponent = _emberComponent['default'].extend({
        tagName: 'label',
        classNames: 'checkbox',
        attributeBindings: ['for'],
        _flagValue: null,

        feature: (0, _emberServiceInject['default'])(),

        init: function init() {
            this._super.apply(this, arguments);

            this.set('_flagValue', this.get('feature.' + this.get('flag')));
        },

        value: (0, _emberComputed['default'])('_flagValue', {
            get: function get() {
                return this.get('_flagValue');
            },
            set: function set(key, value) {
                return this.set('feature.' + this.get('flag'), value);
            }
        }),

        'for': (0, _emberComputed['default'])('flag', function () {
            return 'labs-' + this.get('flag');
        }),

        name: (0, _emberComputed['default'])('flag', function () {
            return 'labs[' + this.get('flag') + ']';
        })
    });

    FeatureFlagComponent.reopenClass({
        positionalParams: ['flag']
    });

    exports['default'] = FeatureFlagComponent;
});
define('ghost-admin/components/gh-file-input', ['exports', 'ember', 'emberx-file-input/components/x-file-input'], function (exports, _ember, _emberxFileInputComponentsXFileInput) {

    // ember-cli-shims doesn't export Ember.testing
    var testing = _ember['default'].testing;
    exports['default'] = _emberxFileInputComponentsXFileInput['default'].extend({
        change: function change(e) {
            var files = testing ? (e.originalEvent || e).testingFiles : e.target.files;
            this.sendAction('action', files);
        }
    });
});
define('ghost-admin/components/gh-file-upload', ['exports', 'ember-component'], function (exports, _emberComponent) {
    exports['default'] = _emberComponent['default'].extend({
        _file: null,

        acceptEncoding: null,
        uploadButtonText: 'Text',
        uploadButtonDisabled: true,

        onUpload: null,
        onAdd: null,

        shouldResetForm: true,

        change: function change(event) {
            this.set('uploadButtonDisabled', false);
            this.sendAction('onAdd');
            this._file = event.target.files[0];
        },

        actions: {
            upload: function upload() {
                if (!this.get('uploadButtonDisabled') && this._file) {
                    this.sendAction('onUpload', this._file);
                }

                // Prevent double post by disabling the button.
                this.set('uploadButtonDisabled', true);

                // Reset form
                if (this.get('shouldResetForm')) {
                    this.$().closest('form')[0].reset();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-file-uploader', ['exports', 'ember-component', 'ember-string', 'ember-service/inject', 'ember-computed', 'ember-utils', 'ember-runloop', 'ember-array/utils', 'ember-invoke-action', 'ghost-admin/services/ajax'], function (exports, _emberComponent, _emberString, _emberServiceInject, _emberComputed, _emberUtils, _emberRunloop, _emberArrayUtils, _emberInvokeAction, _ghostAdminServicesAjax) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberComponent['default'].extend({
        tagName: 'section',
        classNames: ['gh-image-uploader'],
        classNameBindings: ['dragClass'],

        labelText: 'Select or drag-and-drop a file',
        url: null,
        paramName: 'file',
        accept: ['text/csv'],
        extensions: ['csv'],
        validate: null,

        file: null,
        response: null,

        dragClass: null,
        failureMessage: null,
        uploadPercentage: 0,

        ajax: (0, _emberServiceInject['default'])(),
        eventBus: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        formData: (0, _emberComputed['default'])('file', function () {
            var paramName = this.get('paramName');
            var file = this.get('file');
            var formData = new FormData();

            formData.append(paramName, file);

            return formData;
        }),

        progressStyle: (0, _emberComputed['default'])('uploadPercentage', function () {
            var percentage = this.get('uploadPercentage');
            var width = '';

            if (percentage > 0) {
                width = percentage + '%';
            } else {
                width = '0';
            }

            return (0, _emberString.htmlSafe)('width: ' + width);
        }),

        // we can optionally listen to a named event bus channel so that the upload
        // process can be triggered externally
        init: function init() {
            this._super.apply(this, arguments);
            var listenTo = this.get('listenTo');

            if (listenTo) {
                this.get('eventBus').subscribe(listenTo + ':upload', this, function (file) {
                    if (file) {
                        this.set('file', file);
                    }
                    this.send('upload');
                });
            }
        },

        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);
            var accept = this.get('accept');
            var extensions = this.get('extensions');

            this._accept = !(0, _emberUtils.isBlank)(accept) && !(0, _emberArrayUtils.isEmberArray)(accept) ? accept.split(',') : accept;
            this._extensions = !(0, _emberUtils.isBlank)(extensions) && !(0, _emberArrayUtils.isEmberArray)(extensions) ? extensions.split(',') : extensions;
        },

        willDestroyElement: function willDestroyElement() {
            var listenTo = this.get('listenTo');

            this._super.apply(this, arguments);

            if (listenTo) {
                this.get('eventBus').unsubscribe(listenTo + ':upload');
            }
        },

        dragOver: function dragOver(event) {
            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            var eA = event.dataTransfer.effectAllowed;
            event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';

            event.stopPropagation();
            event.preventDefault();

            this.set('dragClass', '-drag-over');
        },

        dragLeave: function dragLeave(event) {
            event.preventDefault();
            this.set('dragClass', null);
        },

        drop: function drop(event) {
            event.preventDefault();
            this.set('dragClass', null);
            if (event.dataTransfer.files) {
                (0, _emberInvokeAction.invoke)(this, 'fileSelected', event.dataTransfer.files);
            }
        },

        generateRequest: function generateRequest() {
            var _this = this;

            var ajax = this.get('ajax');
            var formData = this.get('formData');
            var url = this.get('url');

            (0, _emberInvokeAction.invokeAction)(this, 'uploadStarted');

            ajax.post(url, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text',
                xhr: function xhr() {
                    var xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener('progress', function (event) {
                        _this._uploadProgress(event);
                    }, false);

                    return xhr;
                }
            }).then(function (response) {
                _this._uploadSuccess(JSON.parse(response));
            })['catch'](function (error) {
                _this._uploadFailed(error);
            })['finally'](function () {
                (0, _emberInvokeAction.invokeAction)(_this, 'uploadFinished');
            });
        },

        _uploadProgress: function _uploadProgress(event) {
            var _this2 = this;

            if (event.lengthComputable) {
                (0, _emberRunloop['default'])(function () {
                    var percentage = Math.round(event.loaded / event.total * 100);
                    _this2.set('uploadPercentage', percentage);
                });
            }
        },

        _uploadSuccess: function _uploadSuccess(response) {
            (0, _emberInvokeAction.invokeAction)(this, 'uploadSuccess', response);
            (0, _emberInvokeAction.invoke)(this, 'reset');
        },

        _uploadFailed: function _uploadFailed(error) {
            var message = undefined;

            if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)) {
                this.get('notifications').showAPIError(error);
            }

            if ((0, _ghostAdminServicesAjax.isUnsupportedMediaTypeError)(error)) {
                message = 'The file type you uploaded is not supported.';
            } else if ((0, _ghostAdminServicesAjax.isRequestEntityTooLargeError)(error)) {
                message = 'The file you uploaded was larger than the maximum file size your server allows.';
            } else if (error.errors && !(0, _emberUtils.isBlank)(error.errors[0].message)) {
                message = (0, _emberString.htmlSafe)(error.errors[0].message);
            } else {
                message = 'Something went wrong :(';
            }

            this.set('failureMessage', message);
            (0, _emberInvokeAction.invokeAction)(this, 'uploadFailed', error);
        },

        _validate: function _validate(file) {
            if (this.get('validate')) {
                return (0, _emberInvokeAction.invokeAction)(this, 'validate', file);
            } else {
                return this._defaultValidator(file);
            }
        },

        _defaultValidator: function _defaultValidator(file) {
            var _$$exec = /(?:\.([^.]+))?$/.exec(file.name);

            var _$$exec2 = _slicedToArray(_$$exec, 2);

            var extension = _$$exec2[1];

            var extensions = this._extensions;

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                return new _ghostAdminServicesAjax.UnsupportedMediaTypeError();
            }

            return true;
        },

        actions: {
            fileSelected: function fileSelected(fileList) {
                // can't use array destructuring here as FileList is not a strict
                // array and fails in Safari
                // eslint-disable-next-line ember-suave/prefer-destructuring
                var file = fileList[0];
                var validationResult = this._validate(file);

                this.set('file', file);
                (0, _emberInvokeAction.invokeAction)(this, 'fileSelected', file);

                if (validationResult === true) {
                    _emberRunloop['default'].schedule('actions', this, function () {
                        this.generateRequest();
                    });
                } else {
                    this._uploadFailed(validationResult);
                }
            },

            upload: function upload() {
                if (this.get('file')) {
                    this.generateRequest();
                }
            },

            reset: function reset() {
                this.set('file', null);
                this.set('uploadPercentage', 0);
                this.set('failureMessage', null);
            }
        }
    });
});
define('ghost-admin/components/gh-form-group', ['exports', 'ghost-admin/components/gh-validation-status-container'], function (exports, _ghostAdminComponentsGhValidationStatusContainer) {
    exports['default'] = _ghostAdminComponentsGhValidationStatusContainer['default'].extend({
        classNames: 'form-group'
    });
});
define('ghost-admin/components/gh-fullscreen-modal', ['exports', 'rsvp', 'ember-service/inject', 'ember-array/utils', 'ember-utils', 'ember-evented/on', 'ember-runloop', 'ember-invoke-action', 'ember-computed', 'ember-component'], function (exports, _rsvp, _emberServiceInject, _emberArrayUtils, _emberUtils, _emberEventedOn, _emberRunloop, _emberInvokeAction, _emberComputed, _emberComponent) {

    var FullScreenModalComponent = _emberComponent['default'].extend({

        model: null,
        modifier: null,

        dropdown: (0, _emberServiceInject['default'])(),

        modalPath: (0, _emberComputed['default'])('modal', function () {
            return 'modals/' + (this.get('modal') || 'unknown');
        }),

        modalClasses: (0, _emberComputed['default'])('modifiers', function () {
            var modalClass = 'fullscreen-modal';
            var modifiers = (this.get('modifier') || '').split(' ');
            var modalClasses = (0, _emberArrayUtils.A)([modalClass]);

            modifiers.forEach(function (modifier) {
                if (!(0, _emberUtils.isBlank)(modifier)) {
                    var className = modalClass + '-' + modifier;
                    modalClasses.push(className);
                }
            });

            return modalClasses.join(' ');
        }),

        closeDropdowns: (0, _emberEventedOn['default'])('didInsertElement', function () {
            _emberRunloop['default'].schedule('afterRender', this, function () {
                this.get('dropdown').closeDropdowns();
            });
        }),

        actions: {
            close: function close() {
                // Because we return the promise from invokeAction, we have
                // to check if "close" exists first
                if (this.get('close')) {
                    return (0, _emberInvokeAction.invokeAction)(this, 'close');
                }

                return _rsvp['default'].resolve();
            },

            confirm: function confirm() {
                if (this.get('confirm')) {
                    return (0, _emberInvokeAction.invokeAction)(this, 'confirm');
                }

                return _rsvp['default'].resolve();
            },

            clickOverlay: function clickOverlay() {
                this.send('close');
            }
        }
    });

    FullScreenModalComponent.reopenClass({
        positionalParams: ['modal']
    });

    exports['default'] = FullScreenModalComponent;
});
define('ghost-admin/components/gh-image-uploader-with-preview', ['exports', 'ember-component', 'ember-invoke-action'], function (exports, _emberComponent, _emberInvokeAction) {
    exports['default'] = _emberComponent['default'].extend({
        actions: {
            update: function update() {
                if (typeof this.attrs.update === 'function') {
                    var _attrs;

                    (_attrs = this.attrs).update.apply(_attrs, arguments);
                }
            },

            onInput: function onInput() {
                if (typeof this.attrs.onInput === 'function') {
                    var _attrs2;

                    (_attrs2 = this.attrs).onInput.apply(_attrs2, arguments);
                }
            },

            uploadStarted: function uploadStarted() {
                if (typeof this.attrs.uploadStarted === 'function') {
                    var _attrs3;

                    (_attrs3 = this.attrs).uploadStarted.apply(_attrs3, arguments);
                }
            },

            uploadFinished: function uploadFinished() {
                if (typeof this.attrs.uploadFinished === 'function') {
                    var _attrs4;

                    (_attrs4 = this.attrs).uploadFinished.apply(_attrs4, arguments);
                }
            },

            formChanged: function formChanged() {
                if (typeof this.attrs.formChanged === 'function') {
                    var _attrs5;

                    (_attrs5 = this.attrs).formChanged.apply(_attrs5, arguments);
                }
            },

            remove: function remove() {
                (0, _emberInvokeAction.invokeAction)(this, 'remove');
            }
        }
    });
});
define('ghost-admin/components/gh-image-uploader', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-string', 'ember-utils', 'ember-array/utils', 'ember-runloop', 'ember-invoke-action', 'ghost-admin/utils/ghost-paths', 'ghost-admin/services/ajax'], function (exports, _emberComponent, _emberComputed, _emberServiceInject, _emberString, _emberUtils, _emberArrayUtils, _emberRunloop, _emberInvokeAction, _ghostAdminUtilsGhostPaths, _ghostAdminServicesAjax) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberComponent['default'].extend({
        tagName: 'section',
        classNames: ['gh-image-uploader'],
        classNameBindings: ['dragClass'],

        image: null,
        text: '',
        altText: '',
        saveButton: true,
        accept: null,
        extensions: null,
        uploadUrl: null,
        allowUrlInput: true,
        validate: null,

        dragClass: null,
        failureMessage: null,
        file: null,
        formType: 'upload',
        url: null,
        uploadPercentage: 0,

        ajax: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        _defaultAccept: 'image/gif,image/jpg,image/jpeg,image/png,image/svg+xml',
        _defaultExtensions: ['gif', 'jpg', 'jpeg', 'png', 'svg'],
        _defaultUploadUrl: '/uploads/',

        // TODO: this wouldn't be necessary if the server could accept direct
        // file uploads
        formData: (0, _emberComputed['default'])('file', function () {
            var file = this.get('file');
            var formData = new FormData();

            formData.append('uploadimage', file);

            return formData;
        }),

        description: (0, _emberComputed['default'])('text', 'altText', function () {
            var altText = this.get('altText');

            return this.get('text') || (altText ? 'Upload image of "' + altText + '"' : 'Upload an image');
        }),

        progressStyle: (0, _emberComputed['default'])('uploadPercentage', function () {
            var percentage = this.get('uploadPercentage');
            var width = '';

            if (percentage > 0) {
                width = percentage + '%';
            } else {
                width = '0';
            }

            return (0, _emberString.htmlSafe)('width: ' + width);
        }),

        canShowUploadForm: (0, _emberComputed['default'])('config.fileStorage', function () {
            return this.get('config.fileStorage') !== false;
        }),

        showUploadForm: (0, _emberComputed['default'])('formType', function () {
            var canShowUploadForm = this.get('canShowUploadForm');
            var formType = this.get('formType');

            return formType === 'upload' && canShowUploadForm;
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            var image = this.get('image');
            this.set('url', image);

            if (!this.get('accept')) {
                this.set('accept', this.get('_defaultAccept'));
            }
            if (!this.get('extensions')) {
                this.set('extensions', this.get('_defaultExtensions'));
            }
            if (!this.get('uploadUrl')) {
                this.set('uploadUrl', this.get('_defaultUploadUrl'));
            }
        },

        dragOver: function dragOver(event) {
            var showUploadForm = this.get('showUploadForm');

            if (!event.dataTransfer) {
                return;
            }

            // this is needed to work around inconsistencies with dropping files
            // from Chrome's downloads bar
            var eA = event.dataTransfer.effectAllowed;
            event.dataTransfer.dropEffect = eA === 'move' || eA === 'linkMove' ? 'move' : 'copy';

            event.stopPropagation();
            event.preventDefault();

            if (showUploadForm) {
                this.set('dragClass', '-drag-over');
            }
        },

        dragLeave: function dragLeave(event) {
            var showUploadForm = this.get('showUploadForm');

            event.preventDefault();

            if (showUploadForm) {
                this.set('dragClass', null);
            }
        },

        drop: function drop(event) {
            var showUploadForm = this.get('showUploadForm');

            event.preventDefault();

            this.set('dragClass', null);

            if (showUploadForm) {
                if (event.dataTransfer.files) {
                    this.send('fileSelected', event.dataTransfer.files);
                }
            }
        },

        _uploadStarted: function _uploadStarted() {
            (0, _emberInvokeAction.invokeAction)(this, 'uploadStarted');
        },

        _uploadProgress: function _uploadProgress(event) {
            var _this = this;

            if (event.lengthComputable) {
                (0, _emberRunloop['default'])(function () {
                    var percentage = Math.round(event.loaded / event.total * 100);
                    _this.set('uploadPercentage', percentage);
                });
            }
        },

        _uploadFinished: function _uploadFinished() {
            (0, _emberInvokeAction.invokeAction)(this, 'uploadFinished');
        },

        _uploadSuccess: function _uploadSuccess(response) {
            this.set('url', response);
            this.send('saveUrl');
            this.send('reset');
            (0, _emberInvokeAction.invokeAction)(this, 'uploadSuccess', response);
        },

        _uploadFailed: function _uploadFailed(error) {
            var message = undefined;

            if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)) {
                this.get('notifications').showAPIError(error);
            }

            if ((0, _ghostAdminServicesAjax.isUnsupportedMediaTypeError)(error)) {
                var validExtensions = this.get('extensions').join(', .').toUpperCase();
                validExtensions = '.' + validExtensions;

                message = 'The image type you uploaded is not supported. Please use ' + validExtensions;
            } else if ((0, _ghostAdminServicesAjax.isRequestEntityTooLargeError)(error)) {
                message = 'The image you uploaded was larger than the maximum file size your server allows.';
            } else if (error.errors && !(0, _emberUtils.isBlank)(error.errors[0].message)) {
                message = error.errors[0].message;
            } else {
                message = 'Something went wrong :(';
            }

            this.set('failureMessage', message);
            (0, _emberInvokeAction.invokeAction)(this, 'uploadFailed', error);
        },

        generateRequest: function generateRequest() {
            var _this2 = this;

            var ajax = this.get('ajax');
            var formData = this.get('formData');
            var uploadUrl = this.get('uploadUrl');
            // CASE: we want to upload an icon and we have to POST it to a different endpoint, expecially for icons
            var url = '' + (0, _ghostAdminUtilsGhostPaths['default'])().apiRoot + uploadUrl;

            this._uploadStarted();

            ajax.post(url, {
                data: formData,
                processData: false,
                contentType: false,
                dataType: 'text',
                xhr: function xhr() {
                    var xhr = new window.XMLHttpRequest();

                    xhr.upload.addEventListener('progress', function (event) {
                        _this2._uploadProgress(event);
                    }, false);

                    return xhr;
                }
            }).then(function (response) {
                var url = JSON.parse(response);
                _this2._uploadSuccess(url);
            })['catch'](function (error) {
                _this2._uploadFailed(error);
            })['finally'](function () {
                _this2._uploadFinished();
            });
        },

        _validate: function _validate(file) {
            if (this.get('validate')) {
                return (0, _emberInvokeAction.invokeAction)(this, 'validate', file);
            } else {
                return this._defaultValidator(file);
            }
        },

        _defaultValidator: function _defaultValidator(file) {
            var extensions = this.get('extensions');

            var _$$exec = /(?:\.([^.]+))?$/.exec(file.name);

            var _$$exec2 = _slicedToArray(_$$exec, 2);

            var extension = _$$exec2[1];

            if (!(0, _emberArrayUtils.isEmberArray)(extensions)) {
                extensions = extensions.split(',');
            }

            if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                return new _ghostAdminServicesAjax.UnsupportedMediaTypeError();
            }

            return true;
        },

        actions: {
            fileSelected: function fileSelected(fileList) {
                // can't use array destructuring here as FileList is not a strict
                // array and fails in Safari
                // eslint-disable-next-line ember-suave/prefer-destructuring
                var file = fileList[0];
                var validationResult = this._validate(file);

                this.set('file', file);
                (0, _emberInvokeAction.invokeAction)(this, 'fileSelected', file);

                if (validationResult === true) {
                    _emberRunloop['default'].schedule('actions', this, function () {
                        this.generateRequest();
                    });
                } else {
                    this._uploadFailed(validationResult);
                }
            },

            onInput: function onInput(url) {
                this.set('url', url);
                (0, _emberInvokeAction.invokeAction)(this, 'onInput', url);
            },

            reset: function reset() {
                this.set('file', null);
                this.set('uploadPercentage', 0);
            },

            switchForm: function switchForm(formType) {
                this.set('formType', formType);

                _emberRunloop['default'].scheduleOnce('afterRender', this, function () {
                    (0, _emberInvokeAction.invokeAction)(this, 'formChanged', formType);
                });
            },

            saveUrl: function saveUrl() {
                var url = this.get('url');
                (0, _emberInvokeAction.invokeAction)(this, 'update', url);
            }
        }
    });
});
define('ghost-admin/components/gh-infinite-scroll', ['exports', 'ember-component', 'ghost-admin/mixins/infinite-scroll'], function (exports, _emberComponent, _ghostAdminMixinsInfiniteScroll) {
    exports['default'] = _emberComponent['default'].extend(_ghostAdminMixinsInfiniteScroll['default'], {
        actions: {
            checkScroll: function checkScroll() {
                this._checkScroll();
            }
        }
    });
});
define('ghost-admin/components/gh-input', ['exports', 'ember-one-way-controls/components/one-way-input', 'ghost-admin/mixins/text-input'], function (exports, _emberOneWayControlsComponentsOneWayInput, _ghostAdminMixinsTextInput) {
    exports['default'] = _emberOneWayControlsComponentsOneWayInput['default'].extend(_ghostAdminMixinsTextInput['default'], {
        classNames: 'gh-input'
    });
});
define('ghost-admin/components/gh-loading-spinner', ['exports', 'ember-component', 'ember-concurrency'], function (exports, _emberComponent, _emberConcurrency) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: '',

        showSpinner: false,
        // ms until the loader is displayed,
        // prevents unnecessary flash of spinner
        slowLoadTimeout: 200,

        startSpinnerTimeout: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return (0, _emberConcurrency.timeout)(this.get('slowLoadTimeout'));

                    case 2:
                        this.set('showSpinner', true);

                    case 3:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })),

        didInsertElement: function didInsertElement() {
            this.get('startSpinnerTimeout').perform();
        }
    });
});
define('ghost-admin/components/gh-main', ['exports', 'ember-component'], function (exports, _emberComponent) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'main',
        classNames: ['gh-main'],
        ariaRole: 'main',

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        }
    });
});
define('ghost-admin/components/gh-menu-toggle', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _emberServiceInject) {

    /*
        This cute little component has two jobs.
    
        On desktop, it toggles autoNav behaviour. It tracks
        that state via the maximise property, and uses the
        state to render the appropriate icon.
    
        On mobile, it renders a closing icon, and clicking it
        closes the mobile menu
    */
    exports['default'] = _emberComponent['default'].extend({
        classNames: ['gh-menu-toggle'],

        mediaQueries: (0, _emberServiceInject['default'])(),
        isMobile: (0, _emberComputed.reads)('mediaQueries.isMobile'),
        maximise: false,

        iconClass: (0, _emberComputed['default'])('maximise', 'isMobile', function () {
            if (this.get('maximise') && !this.get('isMobile')) {
                return 'icon-maximise';
            } else {
                return 'icon-minimise';
            }
        }),

        click: function click() {
            if (this.get('isMobile')) {
                this.sendAction('mobileAction');
            } else {
                this.toggleProperty('maximise');
                this.sendAction('desktopAction');
            }
        }
    });
});
define('ghost-admin/components/gh-mobile-nav-bar', ['exports', 'ember-component'], function (exports, _emberComponent) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'nav',
        classNames: ['gh-mobile-nav-bar'],

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.sendAction('openMobileMenu');
            }
        }
    });
});
define('ghost-admin/components/gh-nav-menu', ['exports', 'ember-component', 'ember-string', 'ember-service/inject', 'ember-computed'], function (exports, _emberComponent, _emberString, _emberServiceInject, _emberComputed) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'nav',
        classNames: ['gh-nav'],
        classNameBindings: ['open'],

        open: false,

        navMenuIcon: (0, _emberComputed['default'])('config.blogUrl', function () {
            var url = this.get('config.blogUrl') + '/favicon.png';

            return (0, _emberString.htmlSafe)('background-image: url(' + url + ')');
        }),

        config: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),
        feature: (0, _emberServiceInject['default'])(),
        routing: (0, _emberServiceInject['default'])('-routing'),

        mouseEnter: function mouseEnter() {
            this.sendAction('onMouseEnter');
        },

        actions: {
            toggleAutoNav: function toggleAutoNav() {
                this.sendAction('toggleMaximise');
            },

            showMarkdownHelp: function showMarkdownHelp() {
                this.sendAction('showMarkdownHelp');
            },

            closeMobileMenu: function closeMobileMenu() {
                this.sendAction('closeMobileMenu');
            },

            openAutoNav: function openAutoNav() {
                this.sendAction('openAutoNav');
            }
        }
    });
});
define('ghost-admin/components/gh-navigation', ['exports', 'ember-component', 'ember-runloop'], function (exports, _emberComponent, _emberRunloop) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'section',
        classNames: 'gh-view',

        didInsertElement: function didInsertElement() {
            var navContainer = this.$('.js-gh-blognav');
            var navElements = '.gh-blognav-item:not(.gh-blognav-item:last-child)';
            // needed because jqueryui sortable doesn't trigger babel's autoscoping
            var _this = this;

            this._super.apply(this, arguments);

            navContainer.sortable({
                handle: '.gh-blognav-grab',
                items: navElements,

                start: function start(event, ui) {
                    (0, _emberRunloop['default'])(function () {
                        ui.item.data('start-index', ui.item.index());
                    });
                },

                update: function update(event, ui) {
                    (0, _emberRunloop['default'])(function () {
                        _this.sendAction('moveItem', ui.item.data('start-index'), ui.item.index());
                    });
                }
            });
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.$('.ui-sortable').sortable('destroy');
        }
    });
});
define('ghost-admin/components/gh-navitem-url-input', ['exports', 'ember-components/text-field', 'ember-computed', 'ember-runloop', 'ember-invoke-action'], function (exports, _emberComponentsTextField, _emberComputed, _emberRunloop, _emberInvokeAction) {

    var joinUrlParts = function joinUrlParts(url, path) {
        if (path[0] !== '/' && url.slice(-1) !== '/') {
            path = '/' + path;
        } else if (path[0] === '/' && url.slice(-1) === '/') {
            path = path.slice(1);
        }

        return url + path;
    };

    var isRelative = function isRelative(url) {
        // "protocol://", "//example.com", "scheme:", "#anchor", & invalid paths
        // should all be treated as absolute
        return !url.match(/\s/) && !validator.isURL(url) && !url.match(/^(\/\/|#|[a-zA-Z0-9\-]+:)/);
    };

    exports['default'] = _emberComponentsTextField['default'].extend(_emberInvokeAction.InvokeActionMixin, {
        classNames: 'gh-input',

        isBaseUrl: (0, _emberComputed['default'])('baseUrl', 'value', function () {
            return this.get('baseUrl') === this.get('value');
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            this._super.apply(this, arguments);

            var baseUrl = this.get('baseUrl');
            var url = this.get('url');

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
            }

            this.set('value', url);
        },

        focusIn: function focusIn(event) {
            this.set('hasFocus', true);

            if (this.get('isBaseUrl')) {
                // position the cursor at the end of the input
                _emberRunloop['default'].next(function (el) {
                    var length = el.value.length;

                    el.setSelectionRange(length, length);
                }, event.target);
            }
        },

        keyDown: function keyDown(event) {
            // delete the "placeholder" value all at once
            if (this.get('isBaseUrl') && (event.keyCode === 8 || event.keyCode === 46)) {
                this.set('value', '');

                event.preventDefault();
            }

            // CMD-S
            if (event.keyCode === 83 && event.metaKey) {
                this.notifyUrlChanged();
            }
        },

        keyPress: function keyPress(event) {
            this.invokeAction('clearErrors');

            // enter key
            if (event.keyCode === 13) {
                this.notifyUrlChanged();
            }

            return true;
        },

        focusOut: function focusOut() {
            this.set('hasFocus', false);

            this.notifyUrlChanged();
        },

        notifyUrlChanged: function notifyUrlChanged() {
            var url = this.get('value').trim();
            var urlParts = document.createElement('a');
            var baseUrl = this.get('baseUrl');
            var baseUrlParts = document.createElement('a');

            // ensure value property is trimmed
            this.set('value', url);

            // leverage the browser's native URI parsing
            urlParts.href = url;
            baseUrlParts.href = baseUrl;

            // if we have an email address, add the mailto:
            if (validator.isEmail(url)) {
                url = 'mailto:' + url;
                this.set('value', url);
            }

            // if we have a relative url, create the absolute url to be displayed in the input
            if (isRelative(url)) {
                url = joinUrlParts(baseUrl, url);
                this.set('value', url);
            }

            // get our baseUrl relativity checks in order
            var isOnSameHost = urlParts.host === baseUrlParts.host;
            var isAnchorLink = url.match(/^#/);
            var isRelativeToBasePath = urlParts.pathname.indexOf(baseUrlParts.pathname) === 0;

            // if our pathname is only missing a trailing / mark it as relative
            if (urlParts.pathname + '/' === baseUrlParts.pathname) {
                isRelativeToBasePath = true;
            }

            // if relative to baseUrl, remove the base url before sending to action
            if (!isAnchorLink && isOnSameHost && isRelativeToBasePath) {
                url = url.replace(/^[a-zA-Z0-9\-]+:/, '');
                url = url.replace(/^\/\//, '');
                url = url.replace(baseUrlParts.host, '');
                url = url.replace(baseUrlParts.pathname, '');

                // handle case where url path is same as baseUrl path but missing trailing slash
                if (urlParts.pathname.slice(-1) !== '/') {
                    url = url.replace(baseUrlParts.pathname.slice(0, -1), '');
                }

                if (url !== '' || !this.get('isNew')) {
                    if (!url.match(/^\//)) {
                        url = '/' + url;
                    }

                    if (!url.match(/\/$/) && !url.match(/[\.#\?]/)) {
                        url = url + '/';
                    }
                }
            }

            this.sendAction('change', url);
        }
    });
});
define('ghost-admin/components/gh-navitem', ['exports', 'ember-component', 'ember-computed', 'ember-runloop', 'ghost-admin/mixins/validation-state', 'ember-sortable/mixins/sortable-item'], function (exports, _emberComponent, _emberComputed, _emberRunloop, _ghostAdminMixinsValidationState, _emberSortableMixinsSortableItem) {
    exports['default'] = _emberComponent['default'].extend(_ghostAdminMixinsValidationState['default'], _emberSortableMixinsSortableItem['default'], {
        classNames: 'gh-blognav-item',
        classNameBindings: ['errorClass', 'navItem.isNew::gh-blognav-item--sortable'],

        'new': false,
        handle: '.gh-blognav-grab',

        model: (0, _emberComputed.alias)('navItem'),
        errors: (0, _emberComputed.readOnly)('navItem.errors'),

        errorClass: (0, _emberComputed['default'])('hasError', function () {
            if (this.get('hasError')) {
                return 'gh-blognav-item--error';
            }
        }),

        keyPress: function keyPress(event) {
            // enter key
            if (event.keyCode === 13 && this.get('navItem.isNew')) {
                event.preventDefault();
                _emberRunloop['default'].scheduleOnce('actions', this, function () {
                    this.send('addItem');
                });
            }
        },

        actions: {
            addItem: function addItem() {
                this.sendAction('addItem');
            },

            deleteItem: function deleteItem(item) {
                this.sendAction('deleteItem', item);
            },

            updateUrl: function updateUrl(value) {
                this.sendAction('updateUrl', value, this.get('navItem'));
            },

            clearLabelErrors: function clearLabelErrors() {
                this.get('navItem.errors').remove('label');
            },

            clearUrlErrors: function clearUrlErrors() {
                this.get('navItem.errors').remove('url');
            }
        }
    });
});
define('ghost-admin/components/gh-notification', ['exports', 'ember-component', 'ember-service/inject', 'ember-computed'], function (exports, _emberComponent, _emberServiceInject, _emberComputed) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'article',
        classNames: ['gh-notification', 'gh-notification-passive'],
        classNameBindings: ['typeClass'],

        message: null,

        notifications: (0, _emberServiceInject['default'])(),

        typeClass: (0, _emberComputed['default'])('message.type', function () {
            var type = this.get('message.type');
            var classes = '';
            var typeMapping = undefined;

            typeMapping = {
                success: 'green',
                error: 'red',
                warn: 'yellow'
            };

            if (typeMapping[type] !== undefined) {
                classes += 'gh-notification-' + typeMapping[type];
            }

            return classes;
        }),

        didInsertElement: function didInsertElement() {
            var _this = this;

            this._super.apply(this, arguments);

            this.$().on('animationend webkitAnimationEnd oanimationend MSAnimationEnd', function (event) {
                if (event.originalEvent.animationName === 'fade-out') {
                    _this.get('notifications').closeNotification(_this.get('message'));
                }
            });
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this.$().off('animationend webkitAnimationEnd oanimationend MSAnimationEnd');
        },

        actions: {
            closeNotification: function closeNotification() {
                this.get('notifications').closeNotification(this.get('message'));
            }
        }
    });
});
define('ghost-admin/components/gh-notifications', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _emberServiceInject) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'aside',
        classNames: 'gh-notifications',

        notifications: (0, _emberServiceInject['default'])(),

        messages: (0, _emberComputed.alias)('notifications.notifications')
    });
});
define('ghost-admin/components/gh-popover-button', ['exports', 'ember-service/inject', 'ghost-admin/components/gh-dropdown-button'], function (exports, _emberServiceInject, _ghostAdminComponentsGhDropdownButton) {

    function K() {
        return this;
    }

    exports['default'] = _ghostAdminComponentsGhDropdownButton['default'].extend({
        dropdown: (0, _emberServiceInject['default'])(),

        click: K,

        mouseEnter: function mouseEnter() {
            this._super.apply(this, arguments);
            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);
        },

        mouseLeave: function mouseLeave() {
            this._super.apply(this, arguments);
            this.get('dropdown').toggleDropdown(this.get('popoverName'), this);
        }
    });
});
define('ghost-admin/components/gh-popover', ['exports', 'ember-service/inject', 'ghost-admin/components/gh-dropdown'], function (exports, _emberServiceInject, _ghostAdminComponentsGhDropdown) {
    exports['default'] = _ghostAdminComponentsGhDropdown['default'].extend({
        classNames: 'ghost-popover',
        dropdown: (0, _emberServiceInject['default'])()
    });
});
define('ghost-admin/components/gh-posts-list-item', ['exports', 'ember', 'ember-component', 'ember-string', 'ember-computed', 'ember-service/inject', 'jquery', 'ember-utils'], function (exports, _ember, _emberComponent, _emberString, _emberComputed, _emberServiceInject, _jquery, _emberUtils) {

    // ember-cli-shims doesn't export these
    var Handlebars = _ember['default'].Handlebars;
    var ObjectProxy = _ember['default'].ObjectProxy;
    var PromiseProxyMixin = _ember['default'].PromiseProxyMixin;

    var ObjectPromiseProxy = ObjectProxy.extend(PromiseProxyMixin);

    exports['default'] = _emberComponent['default'].extend({
        tagName: 'li',
        classNames: ['gh-posts-list-item'],
        classNameBindings: ['active'],

        post: null,
        active: false,

        isFeatured: (0, _emberComputed.alias)('post.featured'),
        isPage: (0, _emberComputed.alias)('post.page'),
        isPublished: (0, _emberComputed.equal)('post.status', 'published'),
        isScheduled: (0, _emberComputed.equal)('post.status', 'scheduled'),

        ghostPaths: (0, _emberServiceInject['default'])(),
        timeZone: (0, _emberServiceInject['default'])(),

        authorName: (0, _emberComputed['default'])('post.author.name', 'post.author.email', function () {
            return this.get('post.author.name') || this.get('post.author.email');
        }),

        authorAvatar: (0, _emberComputed['default'])('post.author.image', function () {
            return this.get('post.author.image') || this.get('ghostPaths.assetRoot') + '/img/user-image.png';
        }),

        authorAvatarBackground: (0, _emberComputed['default'])('authorAvatar', function () {
            var authorAvatar = this.get('authorAvatar');
            var safeUrl = Handlebars.Utils.escapeExpression(authorAvatar);
            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),

        blogTimezone: (0, _emberComputed['default'])('timeZone.blogTimezone', function () {
            return ObjectPromiseProxy.create({
                promise: this.get('timeZone.blogTimezone')
            });
        }),

        // HACK: this is intentionally awful due to time constraints
        // TODO: find a better way to get an excerpt! :)
        subText: (0, _emberComputed['default'])('post.{html,metaDescription}', function () {
            var html = this.get('post.html');
            var metaDescription = this.get('post.metaDescription');
            var text = undefined;

            if (!(0, _emberUtils.isBlank)(metaDescription)) {
                text = metaDescription;
            } else {
                var $html = (0, _jquery['default'])('<div>' + html + '</div>');
                text = $html.text();
            }

            return (0, _emberString.htmlSafe)(text.slice(0, 80) + '&hellip;');
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            if (this.get('active')) {
                this.scrollIntoView();
            }
        },

        click: function click() {
            this.sendAction('onClick', this.get('post'));
        },

        doubleClick: function doubleClick() {
            this.sendAction('onDoubleClick', this.get('post'));
        },

        scrollIntoView: function scrollIntoView() {
            var element = this.$();
            var offset = element.offset().top;
            var elementHeight = element.height();
            var container = (0, _jquery['default'])('.content-list');
            var containerHeight = container.height();
            var currentScroll = container.scrollTop();
            var isBelowTop = undefined,
                isAboveBottom = undefined,
                isOnScreen = undefined;

            isAboveBottom = offset < containerHeight;
            isBelowTop = offset > elementHeight;

            isOnScreen = isBelowTop && isAboveBottom;

            if (!isOnScreen) {
                // Scroll so that element is centered in container
                // 40 is the amount of padding on the container
                container.clearQueue().animate({
                    scrollTop: currentScroll + offset - 40 - containerHeight / 2
                });
            }
        }
    });
});
define('ghost-admin/components/gh-profile-image', ['exports', 'ember-component', 'ember-computed', 'ember-string', 'ember-service/inject', 'ember-utils', 'ember-runloop', 'ember-ajax/services/ajax', 'ember-ajax/errors'], function (exports, _emberComponent, _emberComputed, _emberString, _emberServiceInject, _emberUtils, _emberRunloop, _emberAjaxServicesAjax, _emberAjaxErrors) {

    /**
     * A component to manage a user profile image. By default it just handles picture uploads,
     * but if passed a bound 'email' property it will render the user's gravatar image
     *
     * Example: {{gh-profile-image email=controllerEmailProperty setImage="controllerActionName" debounce=500}}
     *
     * @param  {int}            size              The size of the image to render
     * @param  {String}         email             Reference to a bound email object if gravatar image behavior is desired.
     * @param  {String|action}  setImage          The string name of the action on the controller to be called when an image is added.
     * @param  {int}            debounce          Period to wait after changes to email before attempting to load gravatar
     * @property  {Boolean}     hasUploadedImage  Whether or not the user has uploaded an image (whether or not to show the default image/gravatar image)
     * @property  {String}      defaultImage      String containing the background-image css property of the default user profile image
     * @property  {String}      imageBackground   String containing the background-image css property with the gravatar url
     */
    exports['default'] = _emberComponent['default'].extend({
        email: '',
        size: 180,
        debounce: 300,

        validEmail: '',
        hasUploadedImage: false,
        fileStorage: true,
        ajax: _emberAjaxServicesAjax['default'].create(),

        config: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),

        displayGravatar: (0, _emberComputed.notEmpty)('validEmail'),

        init: function init() {
            this._super.apply(this, arguments);
            // Fire this immediately in case we're initialized with a valid email
            this.trySetValidEmail();
        },

        defaultImage: (0, _emberComputed['default'])('ghostPaths', function () {
            var url = this.get('ghostPaths.assetRoot') + '/img/user-image.png';
            return (0, _emberString.htmlSafe)('background-image: url(' + url + ')');
        }),

        trySetValidEmail: function trySetValidEmail() {
            if (!this.get('isDestroyed')) {
                var email = this.get('email');
                this.set('validEmail', validator.isEmail(email) ? email : '');
            }
        },

        didReceiveAttrs: function didReceiveAttrs(attrs) {
            this._super.apply(this, arguments);
            var timeout = parseInt(attrs.newAttrs.throttle || this.get('debounce'));
            _emberRunloop['default'].debounce(this, 'trySetValidEmail', timeout);
        },

        imageBackground: (0, _emberComputed['default'])('validEmail', 'size', function () {
            var _this = this;

            var email = this.get('validEmail');
            var size = this.get('size');
            var style = '';

            if (!(0, _emberUtils.isBlank)(email)) {
                var gravatarUrl = '//www.gravatar.com/avatar/' + window.md5(email) + '?s=' + size + '&d=404';

                this.get('ajax').request(gravatarUrl)['catch'](function (error) {
                    var defaultImageUrl = 'url("' + _this.get('ghostPaths.assetRoot') + '/img/user-image.png")';

                    if ((0, _emberAjaxErrors.isNotFoundError)(error)) {
                        _this.$('.placeholder-img')[0].style.backgroundImage = (0, _emberString.htmlSafe)(defaultImageUrl);
                    } else {
                        _this.$('.placeholder-img')[0].style.backgroundImage = 'url()';
                    }
                });

                style = 'background-image: url(' + gravatarUrl + ')';
            }
            return (0, _emberString.htmlSafe)(style);
        }),

        didInsertElement: function didInsertElement() {
            var size = this.get('size');
            var uploadElement = this.$('.js-file-input');

            this._super.apply(this, arguments);

            // while theoretically the 'add' and 'processalways' functions could be
            // added as properties of the hash passed to fileupload(), for some reason
            // they needed to be placed in an on() call for the add method to work correctly
            uploadElement.fileupload({
                url: this.get('ghostPaths.url').api('uploads'),
                dropZone: this.$('.js-img-dropzone'),
                previewMaxHeight: size,
                previewMaxWidth: size,
                previewCrop: true,
                maxNumberOfFiles: 1,
                autoUpload: false
            }).on('fileuploadadd', _emberRunloop['default'].bind(this, this.queueFile)).on('fileuploadprocessalways', _emberRunloop['default'].bind(this, this.triggerPreview));
        },

        willDestroyElement: function willDestroyElement() {
            var $input = this.$('.js-file-input');

            this._super.apply(this, arguments);

            if ($input.length && $input.data()['blueimp-fileupload']) {
                $input.fileupload('destroy');
            }
        },

        queueFile: function queueFile(e, data) {
            var fileName = data.files[0].name;

            if (/\.(gif|jpe?g|png|svg?z)$/i.test(fileName)) {
                this.sendAction('setImage', data);
            }
        },

        triggerPreview: function triggerPreview(e, data) {
            var file = data.files[data.index];

            if (file.preview) {
                this.set('hasUploadedImage', true);
                // necessary jQuery code because file.preview is a raw DOM object
                // potential todo: rename 'gravatar-img' class in the CSS to be something
                // that both the gravatar and the image preview can use that's not so confusing
                this.$('.js-img-preview').empty().append(this.$(file.preview).addClass('gravatar-img'));
            }
        }
    });
});
define('ghost-admin/components/gh-search-input', ['exports', 'ember-component', 'rsvp', 'ember-computed', 'ember-runloop', 'ember-service/inject', 'ember-utils'], function (exports, _emberComponent, _rsvp, _emberComputed, _emberRunloop, _emberServiceInject, _emberUtils) {
    exports.computedGroup = computedGroup;

    function computedGroup(category) {
        return (0, _emberComputed['default'])('content', 'currentSearch', function () {
            var _this = this;

            if (!this.get('currentSearch') || !this.get('content')) {
                return [];
            }

            return this.get('content').filter(function (item) {
                var search = new RegExp(_this.get('currentSearch'), 'ig');

                return item.category === category && item.title.match(search);
            });
        });
    }

    exports['default'] = _emberComponent['default'].extend({

        selection: null,
        content: [],
        isLoading: false,
        contentExpiry: 10 * 1000,
        contentExpiresAt: false,
        currentSearch: '',

        posts: computedGroup('Posts'),
        pages: computedGroup('Pages'),
        users: computedGroup('Users'),
        tags: computedGroup('Tags'),

        _store: (0, _emberServiceInject['default'])('store'),
        _routing: (0, _emberServiceInject['default'])('-routing'),
        ajax: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        refreshContent: function refreshContent() {
            var _this2 = this;

            var promises = [];
            var now = new Date();
            var contentExpiry = this.get('contentExpiry');
            var contentExpiresAt = this.get('contentExpiresAt');

            if (this.get('isLoading') || contentExpiresAt > now) {
                return _rsvp['default'].resolve();
            }

            this.set('isLoading', true);
            this.set('content', []);
            promises.pushObject(this._loadPosts());
            promises.pushObject(this._loadUsers());
            promises.pushObject(this._loadTags());

            return _rsvp['default'].all(promises).then(function () {})['finally'](function () {
                _this2.set('isLoading', false);
                _this2.set('contentExpiresAt', new Date(now.getTime() + contentExpiry));
            });
        },

        groupedContent: (0, _emberComputed['default'])('posts', 'pages', 'users', 'tags', function () {
            var groups = [];

            if (!(0, _emberUtils.isEmpty)(this.get('posts'))) {
                groups.pushObject({ groupName: 'Posts', options: this.get('posts') });
            }

            if (!(0, _emberUtils.isEmpty)(this.get('pages'))) {
                groups.pushObject({ groupName: 'Pages', options: this.get('pages') });
            }

            if (!(0, _emberUtils.isEmpty)(this.get('users'))) {
                groups.pushObject({ groupName: 'Users', options: this.get('users') });
            }

            if (!(0, _emberUtils.isEmpty)(this.get('tags'))) {
                groups.pushObject({ groupName: 'Tags', options: this.get('tags') });
            }

            return groups;
        }),

        _loadPosts: function _loadPosts() {
            var _this3 = this;

            var store = this.get('_store');
            var postsUrl = store.adapterFor('post').urlForQuery({}, 'post') + '/';
            var postsQuery = { fields: 'id,title,page', limit: 'all', status: 'all', staticPages: 'all' };
            var content = this.get('content');

            return this.get('ajax').request(postsUrl, { data: postsQuery }).then(function (posts) {
                content.pushObjects(posts.posts.map(function (post) {
                    return {
                        id: 'post.' + post.id,
                        title: post.title,
                        category: post.page ? 'Pages' : 'Posts'
                    };
                }));
            })['catch'](function (error) {
                _this3.get('notifications').showAPIError(error, { key: 'search.loadPosts.error' });
            });
        },

        _loadUsers: function _loadUsers() {
            var _this4 = this;

            var store = this.get('_store');
            var usersUrl = store.adapterFor('user').urlForQuery({}, 'user') + '/';
            var usersQuery = { fields: 'name,slug', limit: 'all' };
            var content = this.get('content');

            return this.get('ajax').request(usersUrl, { data: usersQuery }).then(function (users) {
                content.pushObjects(users.users.map(function (user) {
                    return {
                        id: 'user.' + user.slug,
                        title: user.name,
                        category: 'Users'
                    };
                }));
            })['catch'](function (error) {
                _this4.get('notifications').showAPIError(error, { key: 'search.loadUsers.error' });
            });
        },

        _loadTags: function _loadTags() {
            var _this5 = this;

            var store = this.get('_store');
            var tagsUrl = store.adapterFor('tag').urlForQuery({}, 'tag') + '/';
            var tagsQuery = { fields: 'name,slug', limit: 'all' };
            var content = this.get('content');

            return this.get('ajax').request(tagsUrl, { data: tagsQuery }).then(function (tags) {
                content.pushObjects(tags.tags.map(function (tag) {
                    return {
                        id: 'tag.' + tag.slug,
                        title: tag.name,
                        category: 'Tags'
                    };
                }));
            })['catch'](function (error) {
                _this5.get('notifications').showAPIError(error, { key: 'search.loadTags.error' });
            });
        },

        _performSearch: function _performSearch(term, resolve, reject) {
            var _this6 = this;

            if ((0, _emberUtils.isBlank)(term)) {
                return resolve([]);
            }

            this.refreshContent().then(function () {
                _this6.set('currentSearch', term);

                return resolve(_this6.get('groupedContent'));
            })['catch'](reject);
        },

        _setKeymasterScope: function _setKeymasterScope() {
            key.setScope('search-input');
        },

        _resetKeymasterScope: function _resetKeymasterScope() {
            key.setScope('default');
        },

        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            this._resetKeymasterScope();
        },

        actions: {
            openSelected: function openSelected(selected) {
                if (!selected) {
                    return;
                }

                if (selected.category === 'Posts' || selected.category === 'Pages') {
                    var id = selected.id.replace('post.', '');
                    this.get('_routing.router').transitionTo('editor.edit', id);
                }

                if (selected.category === 'Users') {
                    var id = selected.id.replace('user.', '');
                    this.get('_routing.router').transitionTo('team.user', id);
                }

                if (selected.category === 'Tags') {
                    var id = selected.id.replace('tag.', '');
                    this.get('_routing.router').transitionTo('settings.tags.tag', id);
                }
            },

            onFocus: function onFocus() {
                this._setKeymasterScope();
            },

            onBlur: function onBlur() {
                this._resetKeymasterScope();
            },

            search: function search(term) {
                var _this7 = this;

                return new _rsvp['default'].Promise(function (resolve, reject) {
                    _emberRunloop['default'].debounce(_this7, _this7._performSearch, term, resolve, reject, 200);
                });
            }
        }

    });
});
/* global key */
/* eslint-disable camelcase */
define('ghost-admin/components/gh-search-input/trigger', ['exports', 'ember-runloop', 'ember-utils', 'ember-component', 'ember-invoke-action'], function (exports, _emberRunloop, _emberUtils, _emberComponent, _emberInvokeAction) {
    exports['default'] = _emberComponent['default'].extend({
        open: function open() {
            this.get('select.actions').open();
        },

        close: function close() {
            this.get('select.actions').close();
        },

        actions: {
            captureMouseDown: function captureMouseDown(e) {
                e.stopPropagation();
            },

            search: function search(term) {
                if ((0, _emberUtils.isBlank)(term) === this.get('select.isOpen')) {
                    _emberRunloop['default'].scheduleOnce('afterRender', this, (0, _emberUtils.isBlank)(term) ? this.close : this.open);
                }

                (0, _emberInvokeAction.invokeAction)(this, 'select.actions.search', term);
            },

            focusInput: function focusInput() {
                this.$('input')[0].focus();
            },

            resetInput: function resetInput() {
                this.$('input').val('');
            },

            handleKeydown: function handleKeydown(e) {
                var select = this.get('select');

                // TODO: remove keycode check once EPS is updated to 1.0
                if (!select.isOpen || e.keyCode === 32) {
                    e.stopPropagation();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-selectize', ['exports', 'ember-array/utils', 'ember-computed', 'ember-utils', 'ember-metal/get', 'ember-runloop', 'ember-cli-selectize/components/ember-selectize'], function (exports, _emberArrayUtils, _emberComputed, _emberUtils, _emberMetalGet, _emberRunloop, _emberCliSelectizeComponentsEmberSelectize) {
    exports['default'] = _emberCliSelectizeComponentsEmberSelectize['default'].extend({

        selectizeOptions: (0, _emberComputed['default'])(function () {
            var options = this._super.apply(this, arguments);

            options.onChange = _emberRunloop['default'].bind(this, '_onChange');

            return options;
        }),

        /**
        * Event callback that is triggered when user creates a tag
        * - modified to pass the caret position to the action
        */
        _create: function _create(input, callback) {
            var caret = this._selectize.caretPos;

            // Delete user entered text
            this._selectize.setTextboxValue('');
            // Send create action

            // allow the observers and computed properties to run first
            _emberRunloop['default'].schedule('actions', this, function () {
                this.sendAction('create-item', input, caret);
            });
            // We cancel the creation here, so it's up to you to include the created element
            // in the content and selection property
            callback(null);
        },

        _addSelection: function _addSelection(obj) {
            var _valuePath = this.get('_valuePath');
            var val = (0, _emberMetalGet['default'])(obj, _valuePath);
            var caret = this._selectize.caretPos;

            // caret position is always 1 more than the desired index as this method
            // is called after selectize has inserted the item and the caret has moved
            // to the right
            caret = caret - 1;

            this.get('selection').insertAt(caret, obj);

            _emberRunloop['default'].schedule('actions', this, function () {
                this.sendAction('add-item', obj);
                this.sendAction('add-value', val);
            });
        },

        _onChange: function _onChange(args) {
            var selection = (0, _emberMetalGet['default'])(this, 'selection');
            var valuePath = (0, _emberMetalGet['default'])(this, '_valuePath');
            var reorderedSelection = (0, _emberArrayUtils.A)([]);

            if (!args || !selection || !(0, _emberArrayUtils.isEmberArray)(selection) || args.length !== (0, _emberMetalGet['default'])(selection, 'length')) {
                return;
            }

            // exit if we're not dealing with the same objects as the selection
            var objectsHaveChanged = selection.any(function (obj) {
                return args.indexOf((0, _emberMetalGet['default'])(obj, valuePath)) === -1;
            });

            if (objectsHaveChanged) {
                return;
            }

            // exit if the order is still the same
            var orderIsSame = selection.every(function (obj, idx) {
                return (0, _emberMetalGet['default'])(obj, valuePath) === args[idx];
            });

            if (orderIsSame) {
                return;
            }

            // we have a re-order, update the selection
            args.forEach(function (value) {
                var obj = selection.find(function (item) {
                    return '' + (0, _emberMetalGet['default'])(item, valuePath) === value;
                });

                if (obj) {
                    reorderedSelection.addObject(obj);
                }
            });

            this.set('selection', reorderedSelection);
        },

        _preventOpeningWhenBlank: function _preventOpeningWhenBlank() {
            var openOnFocus = this.get('openOnFocus');

            if (!openOnFocus) {
                _emberRunloop['default'].schedule('afterRender', this, function () {
                    var selectize = this._selectize;
                    if (selectize) {
                        selectize.on('dropdown_open', function () {
                            if ((0, _emberUtils.isBlank)(selectize.$control_input.val())) {
                                selectize.close();
                            }
                        });
                        selectize.on('type', function (filter) {
                            if ((0, _emberUtils.isBlank)(filter)) {
                                selectize.close();
                            }
                        });
                    }
                });
            }
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._preventOpeningWhenBlank();
        }

    });
});
/* eslint-disable camelcase */
define('ghost-admin/components/gh-skip-link', ['exports', 'jquery', 'ember-component', 'ember-string'], function (exports, _jquery, _emberComponent, _emberString) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'a',
        anchor: '',
        classNames: ['sr-only', 'sr-only-focusable'],
        // Add attributes to component for href
        // href should be set to retain anchor properties
        // such as pointer cursor and text underline
        attributeBindings: ['href'],
        // Used so that upon clicking on the link
        // anchor behaviors or ignored
        href: (0, _emberString.htmlSafe)('javascript:;'),

        click: function click() {
            var anchor = this.get('anchor');
            var $el = (0, _jquery['default'])(anchor);

            if ($el) {
                // Scrolls to the top of main content or whatever
                // is passed to the anchor attribute
                (0, _jquery['default'])('body').scrollTop($el.offset().top);

                // This sets focus on the content which was skipped to
                // upon losing focus, the tabindex should be removed
                // so that normal keyboard navigation picks up from focused
                // element
                (0, _jquery['default'])($el).attr('tabindex', -1).on('blur focusout', function () {
                    (0, _jquery['default'])(this).removeAttr('tabindex');
                }).focus();
            }
        }
    });
});
define('ghost-admin/components/gh-spin-button', ['exports', 'ember-component', 'ember', 'ember-computed', 'ember-metal/observer', 'ember-runloop'], function (exports, _emberComponent, _ember, _emberComputed, _emberMetalObserver, _emberRunloop) {

    // ember-cli-shims doesn't export Ember.Testing
    var testing = _ember['default'].testing;
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'button',
        buttonText: '',
        submitting: false,
        showSpinner: false,
        showSpinnerTimeout: null,
        autoWidth: true,

        // Disable Button when isLoading equals true
        attributeBindings: ['disabled', 'type', 'tabindex'],

        // Must be set on the controller
        disabled: (0, _emberComputed.equal)('showSpinner', true),

        click: function click() {
            if (this.get('action')) {
                this.sendAction('action');
                return false;
            }
            return true;
        },

        toggleSpinner: (0, _emberMetalObserver['default'])('submitting', function () {
            var submitting = this.get('submitting');
            var timeout = this.get('showSpinnerTimeout');
            var delay = testing ? 10 : 1000;

            if (submitting) {
                this.set('showSpinner', true);
                this.set('showSpinnerTimeout', _emberRunloop['default'].later(this, function () {
                    if (!this.get('submitting')) {
                        this.set('showSpinner', false);
                    }
                    this.set('showSpinnerTimeout', null);
                }, delay));
            } else if (!submitting && timeout === null) {
                this.set('showSpinner', false);
            }
        }),

        setSize: (0, _emberMetalObserver['default'])('showSpinner', function () {
            if (this.get('showSpinner') && this.get('autoWidth')) {
                this.$().width(this.$().width());
                this.$().height(this.$().height());
            } else {
                this.$().width('');
                this.$().height('');
            }
        }),

        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            _emberRunloop['default'].cancel(this.get('showSpinnerTimeout'));
        }
    });
});
define('ghost-admin/components/gh-subscribers-table', ['exports', 'ember-component'], function (exports, _emberComponent) {
    exports['default'] = _emberComponent['default'].extend({
        classNames: ['subscribers-table'],

        table: null,

        actions: {
            onScrolledToBottom: function onScrolledToBottom() {
                var loadNextPage = this.get('loadNextPage');

                if (!this.get('isLoading')) {
                    loadNextPage();
                }
            }
        }
    });
});
define('ghost-admin/components/gh-tab-pane', ['exports', 'ember-component', 'ember-computed'], function (exports, _emberComponent, _emberComputed) {

    // See gh-tabs-manager.js for use
    exports['default'] = _emberComponent['default'].extend({
        classNameBindings: ['active'],

        tabsManager: (0, _emberComputed['default'])(function () {
            return this.nearestWithProperty('isTabsManager');
        }),

        tab: (0, _emberComputed['default'])('tabsManager.tabs.[]', 'tabsManager.tabPanes.[]', function () {
            var index = this.get('tabsManager.tabPanes').indexOf(this);
            var tabs = this.get('tabsManager.tabs');

            return tabs && tabs.objectAt(index);
        }),

        active: (0, _emberComputed.alias)('tab.active'),

        willRender: function willRender() {
            this._super.apply(this, arguments);
            // Register with the tabs manager
            this.get('tabsManager').registerTabPane(this);
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // Deregister with the tabs manager
            this.get('tabsManager').unregisterTabPane(this);
        }
    });
});
define('ghost-admin/components/gh-tab', ['exports', 'ember-component', 'ember-computed'], function (exports, _emberComponent, _emberComputed) {

    // See gh-tabs-manager.js for use
    exports['default'] = _emberComponent['default'].extend({
        tabsManager: (0, _emberComputed['default'])(function () {
            return this.nearestWithProperty('isTabsManager');
        }),

        active: (0, _emberComputed['default'])('tabsManager.activeTab', function () {
            return this.get('tabsManager.activeTab') === this;
        }),

        index: (0, _emberComputed['default'])('tabsManager.tabs.[]', function () {
            return this.get('tabsManager.tabs').indexOf(this);
        }),

        // Select on click
        click: function click() {
            this.get('tabsManager').select(this);
        },

        willRender: function willRender() {
            this._super.apply(this, arguments);
            // register the tabs with the tab manager
            this.get('tabsManager').registerTab(this);
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // unregister the tabs with the tab manager
            this.get('tabsManager').unregisterTab(this);
        }
    });
});
define('ghost-admin/components/gh-tabs-manager', ['exports', 'ember-component'], function (exports, _emberComponent) {

    /**
     * Heavily inspired by ic-tabs (https://github.com/instructure/ic-tabs)
     *
     * Three components work together for smooth tabbing.
     * 1. tabs-manager (gh-tabs)
     * 2. tab (gh-tab)
     * 3. tab-pane (gh-tab-pane)
     *
     * ## Usage:
     * The tabs-manager must wrap all tab and tab-pane components,
     * but they can be nested at any level.
    
     * A tab and its pane are tied together via their order.
     * So, the second tab within a tab manager will activate
     * the second pane within that manager.
    
     * ```hbs
     * {{#gh-tabs-manager}}
     *   {{#gh-tab}}
     *     First tab
     *   {{/gh-tab}}
     *   {{#gh-tab}}
     *     Second tab
     *  {{/gh-tab}}
     *
     *  ....
     *  {{#gh-tab-pane}}
     *     First pane
     *   {{/gh-tab-pane}}
     *   {{#gh-tab-pane}}
     *     Second pane
     *   {{/gh-tab-pane}}
     * {{/gh-tabs-manager}}
     * ```
     * ## Options:
     *
     * the tabs-manager will send a "selected" action whenever one of its
     * tabs is clicked.
     * ```hbs
     * {{#gh-tabs-manager selected="myAction"}}
     *     ....
     * {{/gh-tabs-manager}}
     * ```
     *
     * ## Styling:
     * Both tab and tab-pane elements have an "active"
     * class applied when they are active.
     *
     */
    exports['default'] = _emberComponent['default'].extend({
        activeTab: null,
        tabs: [],
        tabPanes: [],

        // Used by children to find this tabsManager
        isTabsManager: true,

        // Called when a gh-tab is clicked.
        select: function select(tab) {
            this.set('activeTab', tab);
            this.sendAction('selected');
        },

        // Register tabs and their panes to allow for
        // interaction between components.
        registerTab: function registerTab(tab) {
            this.get('tabs').addObject(tab);
        },

        unregisterTab: function unregisterTab(tab) {
            this.get('tabs').removeObject(tab);
        },

        registerTabPane: function registerTabPane(tabPane) {
            this.get('tabPanes').addObject(tabPane);
        },

        unregisterTabPane: function unregisterTabPane(tabPane) {
            this.get('tabPanes').removeObject(tabPane);
        }
    });
});
define('ghost-admin/components/gh-tag-settings-form', ['exports', 'ember-component', 'ember', 'ember-computed', 'ember-metal/get', 'ember-service/inject', 'ember-string', 'ghost-admin/utils/bound-one-way', 'ember-invoke-action'], function (exports, _emberComponent, _ember, _emberComputed, _emberMetalGet, _emberServiceInject, _emberString, _ghostAdminUtilsBoundOneWay, _emberInvokeAction) {

    // ember-cli-shims doesn't export this
    var Handlebars = _ember['default'].Handlebars;
    exports['default'] = _emberComponent['default'].extend({

        tag: null,

        scratchName: (0, _ghostAdminUtilsBoundOneWay['default'])('tag.name'),
        scratchSlug: (0, _ghostAdminUtilsBoundOneWay['default'])('tag.slug'),
        scratchDescription: (0, _ghostAdminUtilsBoundOneWay['default'])('tag.description'),
        scratchMetaTitle: (0, _ghostAdminUtilsBoundOneWay['default'])('tag.metaTitle'),
        scratchMetaDescription: (0, _ghostAdminUtilsBoundOneWay['default'])('tag.metaDescription'),

        isViewingSubview: false,

        feature: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        mediaQueries: (0, _emberServiceInject['default'])(),

        isMobile: (0, _emberComputed.reads)('mediaQueries.maxWidth600'),

        title: (0, _emberComputed['default'])('tag.isNew', function () {
            if (this.get('tag.isNew')) {
                return 'New Tag';
            } else {
                return 'Tag Settings';
            }
        }),

        seoTitle: (0, _emberComputed['default'])('scratchName', 'scratchMetaTitle', function () {
            var metaTitle = this.get('scratchMetaTitle') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('scratchName');

            if (metaTitle && metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = (0, _emberString.htmlSafe)(metaTitle + '&hellip;');
            }

            return metaTitle;
        }),

        seoURL: (0, _emberComputed['default'])('scratchSlug', function () {
            var blogUrl = this.get('config.blogUrl');
            var seoSlug = this.get('scratchSlug') || '';

            var seoURL = blogUrl + '/tag/' + seoSlug;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = Handlebars.Utils.escapeExpression(seoURL);
                seoURL = (0, _emberString.htmlSafe)(seoURL + '&hellip;');
            }

            return seoURL;
        }),

        seoDescription: (0, _emberComputed['default'])('scratchDescription', 'scratchMetaDescription', function () {
            var metaDescription = this.get('scratchMetaDescription') || '';

            metaDescription = metaDescription.length > 0 ? metaDescription : this.get('scratchDescription');

            if (metaDescription && metaDescription.length > 156) {
                metaDescription = metaDescription.substring(0, 156).trim();
                metaDescription = Handlebars.Utils.escapeExpression(metaDescription);
                metaDescription = (0, _emberString.htmlSafe)(metaDescription + '&hellip;');
            }

            return metaDescription;
        }),

        didReceiveAttrs: function didReceiveAttrs(attrs) {
            this._super.apply(this, arguments);

            if ((0, _emberMetalGet['default'])(attrs, 'newAttrs.tag.value.id') !== (0, _emberMetalGet['default'])(attrs, 'oldAttrs.tag.value.id')) {
                this.reset();
            }
        },

        reset: function reset() {
            this.set('isViewingSubview', false);
            if (this.$()) {
                this.$('.settings-menu-pane').scrollTop(0);
            }
        },

        focusIn: function focusIn() {
            key.setScope('tag-settings-form');
        },

        focusOut: function focusOut() {
            key.setScope('default');
        },

        actions: {
            setProperty: function setProperty(property, value) {
                (0, _emberInvokeAction.invokeAction)(this, 'setProperty', property, value);
            },

            setCoverImage: function setCoverImage(image) {
                this.send('setProperty', 'image', image);
            },

            clearCoverImage: function clearCoverImage() {
                this.send('setProperty', 'image', '');
            },

            openMeta: function openMeta() {
                this.set('isViewingSubview', true);
            },

            closeMeta: function closeMeta() {
                this.set('isViewingSubview', false);
            },

            deleteTag: function deleteTag() {
                (0, _emberInvokeAction.invokeAction)(this, 'showDeleteTagModal');
            }
        }

    });
});
/* global key */
define('ghost-admin/components/gh-tag', ['exports', 'ember-component', 'ember-service/inject', 'ember-invoke-action'], function (exports, _emberComponent, _emberServiceInject, _emberInvokeAction) {
    exports['default'] = _emberComponent['default'].extend({
        feature: (0, _emberServiceInject['default'])(),

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            if (this.get('tag.isDeleted') && this.get('onDelete')) {
                (0, _emberInvokeAction.invokeAction)(this, 'onDelete');
            }
        }
    });
});
define('ghost-admin/components/gh-tags-management-container', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-utils', 'ember-metal/observer', 'ember-runloop'], function (exports, _emberComponent, _emberComputed, _emberServiceInject, _emberUtils, _emberMetalObserver, _emberRunloop) {
    exports['default'] = _emberComponent['default'].extend({
        classNames: ['view-container'],
        classNameBindings: ['isMobile'],

        mediaQueries: (0, _emberServiceInject['default'])(),

        tags: null,
        selectedTag: null,

        isMobile: (0, _emberComputed.reads)('mediaQueries.maxWidth600'),
        isEmpty: (0, _emberComputed.equal)('tags.length', 0),

        init: function init() {
            this._super.apply(this, arguments);
            _emberRunloop['default'].schedule('actions', this, this.fireMobileChangeActions);
        },

        displaySettingsPane: (0, _emberComputed['default'])('isEmpty', 'selectedTag', 'isMobile', function () {
            var isEmpty = this.get('isEmpty');
            var selectedTag = this.get('selectedTag');
            var isMobile = this.get('isMobile');

            // always display settings pane for blank-slate on mobile
            if (isMobile && isEmpty) {
                return true;
            }

            // display list if no tag is selected on mobile
            if (isMobile && (0, _emberUtils.isBlank)(selectedTag)) {
                return false;
            }

            // default to displaying settings pane
            return true;
        }),

        fireMobileChangeActions: (0, _emberMetalObserver['default'])('isMobile', function () {
            if (!this.get('isMobile')) {
                this.sendAction('leftMobile');
            }
        })
    });
});
define('ghost-admin/components/gh-task-button', ['exports', 'ember-component', 'ember-metal/observer', 'ember-computed', 'ember-invoke-action'], function (exports, _emberComponent, _emberMetalObserver, _emberComputed, _emberInvokeAction) {

    /**
     * Task Button works exactly like Spin button, but with one major difference:
     *
     * Instead of passing a "submitting" parameter (which is bound to the parent object),
     * you pass an ember-concurrency task. All of the "submitting" behavior is handled automatically.
     *
     * As another bonus, there's no need to handle canceling the promises when something
     * like a controller changes. Because the only task running is handled through this
     * component, all running promises will automatically be cancelled when this
     * component is removed from the DOM
     */
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'button',
        classNameBindings: ['isRunning:appear-disabled'],
        attributeBindings: ['disabled', 'type', 'tabindex'],

        task: null,
        disabled: false,

        isRunning: (0, _emberComputed.reads)('task.last.isRunning'),

        click: function click() {
            // do nothing if disabled externally
            if (this.get('disabled')) {
                return false;
            }

            var task = this.get('task');
            var taskName = this.get('task.name');
            var lastTaskName = this.get('task.last.task.name');

            // task-buttons are never disabled whilst running so that clicks when a
            // taskGroup is running don't get dropped BUT that means we need to check
            // here to avoid spamming actions from multiple clicks
            if (this.get('isRunning') && taskName === lastTaskName) {
                return;
            }

            (0, _emberInvokeAction.invokeAction)(this, 'action');

            return task.perform();
        },

        setSize: (0, _emberMetalObserver['default'])('isRunning', function () {
            if (this.get('isRunning')) {
                this.$().width(this.$().width());
                this.$().height(this.$().height());
            } else {
                this.$().width('');
                this.$().height('');
            }
        })
    });
});
define('ghost-admin/components/gh-textarea', ['exports', 'ember-one-way-controls/components/one-way-textarea', 'ghost-admin/mixins/text-input'], function (exports, _emberOneWayControlsComponentsOneWayTextarea, _ghostAdminMixinsTextInput) {
    exports['default'] = _emberOneWayControlsComponentsOneWayTextarea['default'].extend(_ghostAdminMixinsTextInput['default'], {
        classNames: 'gh-input'
    });
});
define('ghost-admin/components/gh-theme-table', ['exports', 'ember-component', 'ember-computed'], function (exports, _emberComponent, _emberComputed) {
    exports['default'] = _emberComponent['default'].extend({

        availableThemes: null,

        themes: (0, _emberComputed['default'])('availableThemes', function () {
            var themes = this.get('availableThemes').map(function (t) {
                var theme = {};

                theme.name = t.name;
                theme.label = t['package'] ? t['package'].name + ' - ' + t['package'].version : t.name;
                theme['package'] = t['package'];
                theme.active = !!t.active;
                theme.isDeletable = !theme.active;

                return theme;
            });
            var duplicateThemes = [];

            themes.forEach(function (theme) {
                var duplicateLabels = themes.filterBy('label', theme.label);

                if (duplicateLabels.length > 1) {
                    duplicateThemes.pushObject(theme);
                }
            });

            duplicateThemes.forEach(function (theme) {
                if (theme.name !== 'casper') {
                    theme.label = theme.label + ' (' + theme.name + ')';
                }
            });

            // "(default)" needs to be added to casper manually as it's always
            // displayed and would mess up the duplicate checking if added earlier
            var casper = themes.findBy('name', 'casper');
            if (casper) {
                casper.label = casper.label + ' (default)';
                casper.isDefault = true;
                casper.isDeletable = false;
            }

            // sorting manually because .sortBy('label') has a different sorting
            // algorithm to [...strings].sort()
            return themes.sort(function (themeA, themeB) {
                var a = themeA.label.toLowerCase();
                var b = themeB.label.toLowerCase();

                if (a < b) {
                    return -1;
                }
                if (a > b) {
                    return 1;
                }
                return 0;
            });
        }).readOnly()

    });
});
define('ghost-admin/components/gh-timezone-select', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-invoke-action'], function (exports, _emberComponent, _emberComputed, _emberServiceInject, _emberInvokeAction) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    exports['default'] = _emberComponent['default'].extend({
        classNames: ['form-group', 'for-select'],

        activeTimezone: null,
        availableTimezones: null,

        clock: (0, _emberServiceInject['default'])(),

        availableTimezoneNames: (0, _emberComputed.mapBy)('availableTimezones', 'name'),

        hasTimezoneOverride: (0, _emberComputed['default'])('activeTimezone', 'availableTimezoneNames', function () {
            var activeTimezone = this.get('activeTimezone');
            var availableTimezoneNames = this.get('availableTimezoneNames');

            return !availableTimezoneNames.includes(activeTimezone);
        }),

        selectedTimezone: (0, _emberComputed['default'])('activeTimezone', 'availableTimezones', 'hasTimezoneOverride', function () {
            var hasTimezoneOverride = this.get('hasTimezoneOverride');
            var activeTimezone = this.get('activeTimezone');
            var availableTimezones = this.get('availableTimezones');

            if (hasTimezoneOverride) {
                return { name: '', label: '' };
            }

            return availableTimezones.filterBy('name', activeTimezone).get('firstObject');
        }),

        selectableTimezones: (0, _emberComputed['default'])('availableTimezones', 'hasTimezoneOverride', function () {
            var hasTimezoneOverride = this.get('hasTimezoneOverride');
            var availableTimezones = this.get('availableTimezones');

            if (hasTimezoneOverride) {
                return [{ name: '', label: '' }].concat(_toConsumableArray(availableTimezones));
            }

            return availableTimezones;
        }),

        localTime: (0, _emberComputed['default'])('hasTimezoneOverride', 'activeTimezone', 'selectedTimezone', 'clock.second', function () {
            var hasTimezoneOverride = this.get('hasTimezoneOverride');
            var timezone = hasTimezoneOverride ? this.get('activeTimezone') : this.get('selectedTimezone.name');

            this.get('clock.second');
            return timezone ? moment().tz(timezone).format('HH:mm:ss') : moment().utc().format('HH:mm:ss');
        }),

        actions: {
            setTimezone: function setTimezone(timezone) {
                (0, _emberInvokeAction.invokeAction)(this, 'update', timezone);
            }
        }
    });
});
define('ghost-admin/components/gh-trim-focus-input', ['exports', 'ember-computed', 'ghost-admin/components/gh-input'], function (exports, _emberComputed, _ghostAdminComponentsGhInput) {

    /**
     * This doesn't override the OneWayInput component because
     * we need finer control. It borrows
     * parts from both the OneWayInput component and Ember's default
     * input component
     */
    var TrimFocusInputComponent = _ghostAdminComponentsGhInput['default'].extend({

        shouldFocus: true,

        attributeBindings: ['autofocus'],

        autofocus: (0, _emberComputed['default'])(function () {
            if (this.get('shouldFocus')) {
                return device.ios() ? false : 'autofocus';
            }

            return false;
        }),

        init: function init() {
            this._super.apply(this, arguments);
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._focus();
        },

        focusOut: function focusOut(event) {
            this._trimInput(event.target.value);
        },

        _trimInput: function _trimInput(value) {
            if (value && typeof value.trim === 'function') {
                value = value.trim();
            }

            this._processNewValue(value);
        },

        _focus: function _focus() {
            // Until mobile safari has better support
            // for focusing, we just ignore it
            if (this.get('shouldFocus') && !device.ios()) {
                this.element.focus();
            }
        }
    });

    exports['default'] = TrimFocusInputComponent;
});
/* global device */
define('ghost-admin/components/gh-upgrade-notification', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _emberServiceInject) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'section',

        classNames: ['gh-upgrade-notification'],

        upgradeNotification: (0, _emberServiceInject['default'])('upgrade-notification'),

        message: (0, _emberComputed.alias)('upgradeNotification.content')
    });
});
define('ghost-admin/components/gh-url-preview', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject'], function (exports, _emberComponent, _emberComputed, _emberServiceInject) {

    /*
    Example usage:
    {{gh-url-preview prefix="tag" slug=theSlugValue tagName="p" classNames="description"}}
    */
    exports['default'] = _emberComponent['default'].extend({
        classNames: 'ghost-url-preview',
        prefix: null,
        slug: null,

        config: (0, _emberServiceInject['default'])(),

        url: (0, _emberComputed['default'])('slug', function () {
            // Get the blog URL and strip the scheme
            var blogUrl = this.get('config.blogUrl');
            // Remove `http[s]://`
            var noSchemeBlogUrl = blogUrl.substr(blogUrl.indexOf('://') + 3);

            // Get the prefix and slug values
            var prefix = this.get('prefix') ? this.get('prefix') + '/' : '';
            var slug = this.get('slug') ? this.get('slug') + '/' : '';

            // Join parts of the URL together with slashes
            var theUrl = noSchemeBlogUrl + '/' + prefix + slug;

            return theUrl;
        })
    });
});
define('ghost-admin/components/gh-user-active', ['exports', 'ember', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-string'], function (exports, _ember, _emberComponent, _emberComputed, _emberServiceInject, _emberString) {

    // ember-cli-shims doesn't export these
    var Handlebars = _ember['default'].Handlebars;
    exports['default'] = _emberComponent['default'].extend({
        tagName: '',

        user: null,

        ghostPaths: (0, _emberServiceInject['default'])(),

        userDefault: (0, _emberComputed['default'])('ghostPaths', function () {
            return this.get('ghostPaths.assetRoot') + '/img/user-image.png';
        }),

        userImageBackground: (0, _emberComputed['default'])('user.image', 'userDefault', function () {
            var url = this.get('user.image') || this.get('userDefault');
            var safeUrl = Handlebars.Utils.escapeExpression(url);

            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),

        lastLoginUTC: (0, _emberComputed['default'])('user.lastLoginUTC', function () {
            var lastLoginUTC = this.get('user.lastLoginUTC');

            return lastLoginUTC ? moment(lastLoginUTC).fromNow() : '(Never)';
        })
    });
});
define('ghost-admin/components/gh-user-invited', ['exports', 'ember-component', 'ember-computed', 'ember-service/inject', 'ember-ajax/errors'], function (exports, _emberComponent, _emberComputed, _emberServiceInject, _emberAjaxErrors) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: '',

        invite: null,
        isSending: false,

        notifications: (0, _emberServiceInject['default'])(),
        store: (0, _emberServiceInject['default'])(),

        createdAt: (0, _emberComputed['default'])('invite.createdAtUTC', function () {
            var createdAtUTC = this.get('invite.createdAtUTC');

            return createdAtUTC ? moment(createdAtUTC).fromNow() : '';
        }),

        expiresAt: (0, _emberComputed['default'])('invite.expires', function () {
            var expires = this.get('invite.expires');

            return expires ? moment(expires).fromNow() : '';
        }),

        actions: {
            resend: function resend() {
                var _this = this;

                var invite = this.get('invite');
                var notifications = this.get('notifications');

                this.set('isSending', true);
                invite.resend().then(function (result) {
                    var notificationText = 'Invitation resent! (' + invite.get('email') + ')';

                    // the server deletes the old record and creates a new one when
                    // resending so we need to update the store accordingly
                    invite.unloadRecord();
                    _this.get('store').pushPayload('invite', result);

                    // If sending the invitation email fails, the API will still return a status of 201
                    // but the invite's status in the response object will be 'invited-pending'.
                    if (result.invites[0].status === 'invited-pending') {
                        notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.resend.not-sent' });
                    } else {
                        notifications.showNotification(notificationText, { key: 'invite.resend.success' });
                    }
                })['catch'](function (error) {
                    notifications.showAPIError(error, { key: 'invite.resend' });
                })['finally'](function () {
                    _this.set('isSending', false);
                });
            },

            revoke: function revoke() {
                var _this2 = this;

                var invite = this.get('invite');
                var email = invite.get('email');
                var notifications = this.get('notifications');

                // reload the invite to get the most up-to-date information
                invite.reload().then(function () {
                    invite.destroyRecord().then(function () {
                        var notificationText = 'Invitation revoked. (' + email + ')';
                        notifications.showNotification(notificationText, { key: 'invite.revoke.success' });
                    })['catch'](function (error) {
                        notifications.showAPIError(error, { key: 'invite.revoke' });
                    });
                })['catch'](function (error) {
                    if ((0, _emberAjaxErrors.isNotFoundError)(error)) {
                        // if the invite no longer exists, then show a warning and reload the route
                        _this2.sendAction('reload');
                        notifications.showAlert('This invite has been revoked or a user has already accepted the invitation.', { type: 'error', delayed: true, key: 'invite.revoke.already-accepted' });
                    } else {
                        throw error;
                    }
                });
            }
        }
    });
});
define('ghost-admin/components/gh-validation-status-container', ['exports', 'ember-component', 'ember-computed', 'ghost-admin/mixins/validation-state'], function (exports, _emberComponent, _emberComputed, _ghostAdminMixinsValidationState) {

    /**
     * Handles the CSS necessary to show a specific property state. When passed a
     * DS.Errors object and a property name, if the DS.Errors object has errors for
     * the specified property, it will change the CSS to reflect the error state
     * @param  {DS.Errors} errors   The DS.Errors object
     * @param  {string} property    Name of the property
     */
    exports['default'] = _emberComponent['default'].extend(_ghostAdminMixinsValidationState['default'], {
        classNameBindings: ['errorClass'],

        errorClass: (0, _emberComputed['default'])('property', 'hasError', 'hasValidated.[]', function () {
            var hasValidated = this.get('hasValidated');
            var property = this.get('property');

            if (hasValidated && hasValidated.includes(property)) {
                return this.get('hasError') ? 'error' : 'success';
            } else {
                return '';
            }
        })
    });
});
define('ghost-admin/components/gh-view-title', ['exports', 'ember-component'], function (exports, _emberComponent) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'h2',
        classNames: ['view-title'],

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.sendAction('openMobileMenu');
            }
        }
    });
});
define('ghost-admin/components/ghost-card', ['exports', 'ghost-editor/components/ghost-card'], function (exports, _ghostEditorComponentsGhostCard) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostCard['default'];
    }
  });
});
define('ghost-admin/components/ghost-editor', ['exports', 'ghost-editor/components/ghost-editor'], function (exports, _ghostEditorComponentsGhostEditor) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostEditor['default'];
    }
  });
  Object.defineProperty(exports, 'BLANK_DOC', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostEditor.BLANK_DOC;
    }
  });
});
define('ghost-admin/components/ghost-toolbar-blockitem', ['exports', 'ghost-editor/components/ghost-toolbar-blockitem'], function (exports, _ghostEditorComponentsGhostToolbarBlockitem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostToolbarBlockitem['default'];
    }
  });
});
define('ghost-admin/components/ghost-toolbar-button', ['exports', 'ghost-editor/components/ghost-toolbar-button'], function (exports, _ghostEditorComponentsGhostToolbarButton) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostToolbarButton['default'];
    }
  });
});
define('ghost-admin/components/ghost-toolbar-newitem', ['exports', 'ghost-editor/components/ghost-toolbar-newitem'], function (exports, _ghostEditorComponentsGhostToolbarNewitem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostToolbarNewitem['default'];
    }
  });
});
define('ghost-admin/components/ghost-toolbar', ['exports', 'ghost-editor/components/ghost-toolbar'], function (exports, _ghostEditorComponentsGhostToolbar) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsGhostToolbar['default'];
    }
  });
});
define('ghost-admin/components/html-card', ['exports', 'ghost-editor/components/cards/html-card'], function (exports, _ghostEditorComponentsCardsHtmlCard) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsCardsHtmlCard['default'];
    }
  });
});
define("ghost-admin/components/illiquid-model", ["exports", "liquid-fire/components/illiquid-model"], function (exports, _liquidFireComponentsIlliquidModel) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsIlliquidModel["default"];
    }
  });
});
define('ghost-admin/components/image-card', ['exports', 'ghost-editor/components/cards/image-card'], function (exports, _ghostEditorComponentsCardsImageCard) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsCardsImageCard['default'];
    }
  });
});
define('ghost-admin/components/infinity-loader', ['exports', 'ember-infinity/components/infinity-loader'], function (exports, _emberInfinityComponentsInfinityLoader) {
  exports['default'] = _emberInfinityComponentsInfinityLoader['default'];
});
define('ghost-admin/components/light-table', ['exports', 'ember-light-table/components/light-table'], function (exports, _emberLightTableComponentsLightTable) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLightTable['default'];
    }
  });
});
define('ghost-admin/components/light-table/cells/base', ['exports', 'ember-light-table/components/cells/base'], function (exports, _emberLightTableComponentsCellsBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsCellsBase['default'];
    }
  });
});
define('ghost-admin/components/light-table/columns/base', ['exports', 'ember-light-table/components/columns/base'], function (exports, _emberLightTableComponentsColumnsBase) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsColumnsBase['default'];
    }
  });
});
define('ghost-admin/components/liquid-append', ['exports', 'liquid-wormhole/components/liquid-append'], function (exports, _liquidWormholeComponentsLiquidAppend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidWormholeComponentsLiquidAppend['default'];
    }
  });
});
define("ghost-admin/components/liquid-bind", ["exports", "liquid-fire/components/liquid-bind"], function (exports, _liquidFireComponentsLiquidBind) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidBind["default"];
    }
  });
});
define("ghost-admin/components/liquid-child", ["exports", "liquid-fire/components/liquid-child"], function (exports, _liquidFireComponentsLiquidChild) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidChild["default"];
    }
  });
});
define("ghost-admin/components/liquid-container", ["exports", "liquid-fire/components/liquid-container"], function (exports, _liquidFireComponentsLiquidContainer) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidContainer["default"];
    }
  });
});
define('ghost-admin/components/liquid-destination', ['exports', 'liquid-wormhole/components/liquid-destination'], function (exports, _liquidWormholeComponentsLiquidDestination) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidWormholeComponentsLiquidDestination['default'];
    }
  });
});
define("ghost-admin/components/liquid-if", ["exports", "liquid-fire/components/liquid-if"], function (exports, _liquidFireComponentsLiquidIf) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidIf["default"];
    }
  });
});
define("ghost-admin/components/liquid-measured", ["exports", "liquid-fire/components/liquid-measured"], function (exports, _liquidFireComponentsLiquidMeasured) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidMeasured["default"];
    }
  });
  Object.defineProperty(exports, "measure", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidMeasured.measure;
    }
  });
});
define("ghost-admin/components/liquid-outlet", ["exports", "liquid-fire/components/liquid-outlet"], function (exports, _liquidFireComponentsLiquidOutlet) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidOutlet["default"];
    }
  });
});
define("ghost-admin/components/liquid-spacer", ["exports", "liquid-fire/components/liquid-spacer"], function (exports, _liquidFireComponentsLiquidSpacer) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidSpacer["default"];
    }
  });
});
define('ghost-admin/components/liquid-sync', ['exports', 'liquid-fire/components/liquid-sync'], function (exports, _liquidFireComponentsLiquidSync) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidSync['default'];
    }
  });
});
define("ghost-admin/components/liquid-unless", ["exports", "liquid-fire/components/liquid-unless"], function (exports, _liquidFireComponentsLiquidUnless) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidUnless["default"];
    }
  });
});
define("ghost-admin/components/liquid-versions", ["exports", "liquid-fire/components/liquid-versions"], function (exports, _liquidFireComponentsLiquidVersions) {
  Object.defineProperty(exports, "default", {
    enumerable: true,
    get: function get() {
      return _liquidFireComponentsLiquidVersions["default"];
    }
  });
});
define('ghost-admin/components/liquid-wormhole', ['exports', 'liquid-wormhole/components/liquid-wormhole'], function (exports, _liquidWormholeComponentsLiquidWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidWormholeComponentsLiquidWormhole['default'];
    }
  });
});
define('ghost-admin/components/lt-body', ['exports', 'ember-light-table/components/lt-body'], function (exports, _emberLightTableComponentsLtBody) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtBody['default'];
    }
  });
});
define('ghost-admin/components/lt-column-resizer', ['exports', 'ember-light-table/components/lt-column-resizer'], function (exports, _emberLightTableComponentsLtColumnResizer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtColumnResizer['default'];
    }
  });
});
define('ghost-admin/components/lt-foot', ['exports', 'ember-light-table/components/lt-foot'], function (exports, _emberLightTableComponentsLtFoot) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtFoot['default'];
    }
  });
});
define('ghost-admin/components/lt-head', ['exports', 'ember-light-table/components/lt-head'], function (exports, _emberLightTableComponentsLtHead) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtHead['default'];
    }
  });
});
define('ghost-admin/components/lt-infinity', ['exports', 'ember-light-table/components/lt-infinity'], function (exports, _emberLightTableComponentsLtInfinity) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtInfinity['default'];
    }
  });
});
define('ghost-admin/components/lt-row', ['exports', 'ember-light-table/components/lt-row'], function (exports, _emberLightTableComponentsLtRow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtRow['default'];
    }
  });
});
define('ghost-admin/components/lt-scrollable', ['exports', 'ember-light-table/components/lt-scrollable'], function (exports, _emberLightTableComponentsLtScrollable) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtScrollable['default'];
    }
  });
});
define('ghost-admin/components/lt-spanned-row', ['exports', 'ember-light-table/components/lt-spanned-row'], function (exports, _emberLightTableComponentsLtSpannedRow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberLightTableComponentsLtSpannedRow['default'];
    }
  });
});
define('ghost-admin/components/markdown-card', ['exports', 'ghost-editor/components/cards/markdown-card'], function (exports, _ghostEditorComponentsCardsMarkdownCard) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsCardsMarkdownCard['default'];
    }
  });
});
define('ghost-admin/components/modals/base', ['exports', 'ember-component', 'ember-runloop', 'ember-invoke-action'], function (exports, _emberComponent, _emberRunloop, _emberInvokeAction) {
    exports['default'] = _emberComponent['default'].extend({
        tagName: 'section',
        classNames: 'modal-content',

        _previousKeymasterScope: null,

        _setupShortcuts: function _setupShortcuts() {
            var _this = this;

            (0, _emberRunloop['default'])(function () {
                document.activeElement.blur();
            });
            this._previousKeymasterScope = key.getScope();

            key('enter', 'modal', function () {
                _this.send('confirm');
            });

            key('escape', 'modal', function () {
                _this.send('closeModal');
            });

            key.setScope('modal');
        },

        _removeShortcuts: function _removeShortcuts() {
            key.unbind('enter', 'modal');
            key.unbind('escape', 'modal');

            key.setScope(this._previousKeymasterScope);
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);
            this._setupShortcuts();
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            this._removeShortcuts();
        },

        actions: {
            confirm: function confirm() {
                throw new Error('You must override the "confirm" action in your modal component');
            },

            closeModal: function closeModal() {
                (0, _emberInvokeAction.invokeAction)(this, 'closeModal');
            }
        }
    });
});
/* global key */
define('ghost-admin/components/modals/copy-html', ['exports', 'ember-computed', 'ghost-admin/components/modals/base'], function (exports, _emberComputed, _ghostAdminComponentsModalsBase) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({
        generatedHtml: (0, _emberComputed.alias)('model')
    });
});
define('ghost-admin/components/modals/delete-all', ['exports', 'ember-service/inject', 'ghost-admin/components/modals/base', 'ember-concurrency'], function (exports, _emberServiceInject, _ghostAdminComponentsModalsBase, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        store: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        _deleteAll: function _deleteAll() {
            var deleteUrl = this.get('ghostPaths.url').api('db');
            return this.get('ajax').del(deleteUrl);
        },

        _unloadData: function _unloadData() {
            this.get('store').unloadAll('post');
            this.get('store').unloadAll('tag');
        },

        _showSuccess: function _showSuccess() {
            this.get('notifications').showAlert('All content deleted from database.', { type: 'success', key: 'all-content.delete.success' });
        },

        _showFailure: function _showFailure(error) {
            this.get('notifications').showAPIError(error, { key: 'all-content.delete' });
        },

        deleteAll: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return this._deleteAll();

                    case 3:
                        this._unloadData();
                        this._showSuccess();
                        context$1$0.next = 10;
                        break;

                    case 7:
                        context$1$0.prev = 7;
                        context$1$0.t0 = context$1$0['catch'](0);

                        this._showFailure(context$1$0.t0);

                    case 10:
                        context$1$0.prev = 10;

                        this.send('closeModal');
                        return context$1$0.finish(10);

                    case 13:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0, 7, 10, 13]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteAll').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-post', ['exports', 'ember-computed', 'ember-service/inject', 'ghost-admin/components/modals/base', 'ember-concurrency'], function (exports, _emberComputed, _emberServiceInject, _ghostAdminComponentsModalsBase, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        post: (0, _emberComputed.alias)('model.post'),
        onSuccess: (0, _emberComputed.alias)('model.onSuccess'),

        notifications: (0, _emberServiceInject['default'])(),
        routing: (0, _emberServiceInject['default'])('-routing'),

        _deletePost: function _deletePost() {
            var post = this.get('post');

            // definitely want to clear the data store and post of any unsaved,
            // client-generated tags
            post.updateTags();

            return post.destroyRecord();
        },

        _success: function _success() {
            // clear any previous error messages
            this.get('notifications').closeAlerts('post.delete');

            // trigger the success action
            if (this.get('onSuccess')) {
                this.get('onSuccess')();
            }
        },

        _failure: function _failure(error) {
            this.get('notifications').showAPIError(error, { key: 'post.delete.failed' });
        },

        deletePost: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return this._deletePost();

                    case 3:
                        this._success();
                        context$1$0.next = 9;
                        break;

                    case 6:
                        context$1$0.prev = 6;
                        context$1$0.t0 = context$1$0['catch'](0);

                        this._failure(context$1$0.t0);

                    case 9:
                        context$1$0.prev = 9;

                        this.send('closeModal');
                        return context$1$0.finish(9);

                    case 12:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0, 6, 9, 12]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deletePost').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-subscriber', ['exports', 'ember-computed', 'ghost-admin/components/modals/base', 'ember-invoke-action', 'ember-concurrency'], function (exports, _emberComputed, _ghostAdminComponentsModalsBase, _emberInvokeAction, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        subscriber: (0, _emberComputed.alias)('model'),

        deleteSubscriber: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.next = 2;
                        return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                    case 2:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteSubscriber').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-tag', ['exports', 'ember-computed', 'ghost-admin/components/modals/base', 'ember-invoke-action', 'ember-concurrency'], function (exports, _emberComputed, _ghostAdminComponentsModalsBase, _emberInvokeAction, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        tag: (0, _emberComputed.alias)('model'),

        postInflection: (0, _emberComputed['default'])('tag.count.posts', function () {
            return this.get('tag.count.posts') > 1 ? 'posts' : 'post';
        }),

        deleteTag: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                    case 3:
                        context$1$0.prev = 3;

                        this.send('closeModal');
                        return context$1$0.finish(3);

                    case 6:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteTag').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-theme', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ember-concurrency'], function (exports, _ghostAdminComponentsModalsBase, _emberComputed, _emberInvokeAction, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        theme: (0, _emberComputed.alias)('model.theme'),
        download: (0, _emberComputed.alias)('model.download'),

        deleteTheme: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                    case 3:
                        context$1$0.prev = 3;

                        this.send('closeModal');
                        return context$1$0.finish(3);

                    case 6:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteTheme').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/delete-user', ['exports', 'ghost-admin/components/modals/base', 'ember-invoke-action', 'ember-computed', 'ember-concurrency'], function (exports, _ghostAdminComponentsModalsBase, _emberInvokeAction, _emberComputed, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        user: (0, _emberComputed.alias)('model'),

        deleteUser: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                    case 3:
                        context$1$0.prev = 3;

                        this.send('closeModal');
                        return context$1$0.finish(3);

                    case 6:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('deleteUser').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/import-subscribers', ['exports', 'ember-computed', 'ember-invoke-action', 'ghost-admin/components/modals/base', 'ghost-admin/utils/ghost-paths'], function (exports, _emberComputed, _emberInvokeAction, _ghostAdminComponentsModalsBase, _ghostAdminUtilsGhostPaths) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({
        labelText: 'Select or drag-and-drop a CSV File',

        response: null,
        closeDisabled: false,

        uploadUrl: (0, _emberComputed['default'])(function () {
            return (0, _ghostAdminUtilsGhostPaths['default'])().apiRoot + '/subscribers/csv/';
        }),

        actions: {
            uploadStarted: function uploadStarted() {
                this.set('closeDisabled', true);
            },

            uploadFinished: function uploadFinished() {
                this.set('closeDisabled', false);
            },

            uploadSuccess: function uploadSuccess(response) {
                this.set('response', response.meta.stats);
                // invoke the passed in confirm action
                (0, _emberInvokeAction.invokeAction)(this, 'confirm');
            },

            confirm: function confirm() {
                // noop - we don't want the enter key doing anything
            },

            closeModal: function closeModal() {
                if (!this.get('closeDisabled')) {
                    this._super.apply(this, arguments);
                }
            }
        }
    });
});
define('ghost-admin/components/modals/invite-new-user', ['exports', 'rsvp', 'ember-service/inject', 'ember-array/utils', 'ember-runloop', 'ghost-admin/components/modals/base', 'ghost-admin/mixins/validation-engine', 'ember-concurrency'], function (exports, _rsvp, _emberServiceInject, _emberArrayUtils, _emberRunloop, _ghostAdminComponentsModalsBase, _ghostAdminMixinsValidationEngine, _emberConcurrency) {
    var Promise = _rsvp['default'].Promise;
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        classNames: 'modal-content invite-new-user',

        role: null,
        roles: null,
        authorRole: null,

        validationType: 'inviteUser',

        notifications: (0, _emberServiceInject['default'])(),
        store: (0, _emberServiceInject['default'])(),

        init: function init() {
            this._super.apply(this, arguments);

            // populate roles and set initial value for the dropdown
            _emberRunloop['default'].schedule('afterRender', this, function () {
                var _this = this;

                this.get('store').query('role', { permissions: 'assign' }).then(function (roles) {
                    var authorRole = roles.findBy('name', 'Author');

                    _this.set('roles', roles);
                    _this.set('authorRole', authorRole);

                    if (!_this.get('role')) {
                        _this.set('role', authorRole);
                    }
                });
            });
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);
            // TODO: this should not be needed, ValidationEngine acts as a
            // singleton and so it's errors and hasValidated state stick around
            this.get('errors').clear();
            this.set('hasValidated', (0, _emberArrayUtils.A)());
        },

        validate: function validate() {
            var _this2 = this;

            var email = this.get('email');

            // TODO: either the validator should check the email's existence or
            // the API should return an appropriate error when attempting to save
            return new Promise(function (resolve, reject) {
                return _this2._super().then(function () {
                    return _rsvp['default'].hash({
                        users: _this2.get('store').findAll('user', { reload: true }),
                        invites: _this2.get('store').findAll('invite', { reload: true })
                    }).then(function (data) {
                        var existingUser = data.users.findBy('email', email);
                        var existingInvite = data.invites.findBy('email', email);

                        if (existingUser || existingInvite) {
                            _this2.get('errors').clear('email');
                            if (existingUser) {
                                _this2.get('errors').add('email', 'A user with that email address already exists.');
                            } else {
                                _this2.get('errors').add('email', 'A user with that email address was already invited.');
                            }

                            // TODO: this shouldn't be needed, ValidationEngine doesn't mark
                            // properties as validated when validating an entire object
                            _this2.get('hasValidated').addObject('email');
                            reject();
                        } else {
                            resolve();
                        }
                    });
                }, function () {
                    // TODO: this shouldn't be needed, ValidationEngine doesn't mark
                    // properties as validated when validating an entire object
                    _this2.get('hasValidated').addObject('email');
                    reject();
                });
            });
        },

        sendInvitation: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var email, role, notifications, notificationText, invite;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        email = this.get('email');
                        role = this.get('role');
                        notifications = this.get('notifications');
                        notificationText = 'Invitation sent! (' + email + ')';
                        invite = undefined;
                        context$1$0.prev = 5;
                        context$1$0.next = 8;
                        return this.validate();

                    case 8:

                        invite = this.get('store').createRecord('invite', {
                            email: email,
                            role: role
                        });

                        context$1$0.next = 11;
                        return invite.save();

                    case 11:

                        // If sending the invitation email fails, the API will still return a status of 201
                        // but the invite's status in the response object will be 'invited-pending'.
                        if (invite.get('status') === 'pending') {
                            notifications.showAlert('Invitation email was not sent.  Please try resending.', { type: 'error', key: 'invite.send.failed' });
                        } else {
                            notifications.showNotification(notificationText, { key: 'invite.send.success' });
                        }

                        this.send('closeModal');
                        context$1$0.next = 18;
                        break;

                    case 15:
                        context$1$0.prev = 15;
                        context$1$0.t0 = context$1$0['catch'](5);

                        // validation will reject and cause this to be called with no error
                        if (context$1$0.t0) {
                            invite.deleteRecord();
                            notifications.showAPIError(context$1$0.t0, { key: 'invite.send' });
                            this.send('closeModal');
                        }

                    case 18:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[5, 15]]);
        })).drop(),

        actions: {
            setRole: function setRole(role) {
                this.set('role', role);
            },

            confirm: function confirm() {
                this.get('sendInvitation').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/leave-editor', ['exports', 'ghost-admin/components/modals/base', 'ember-invoke-action'], function (exports, _ghostAdminComponentsModalsBase, _emberInvokeAction) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({
        actions: {
            confirm: function confirm() {
                var _this = this;

                (0, _emberInvokeAction.invokeAction)(this, 'confirm')['finally'](function () {
                    _this.send('closeModal');
                });
            }
        }
    });
});
define('ghost-admin/components/modals/markdown-help', ['exports', 'ghost-admin/components/modals/base'], function (exports, _ghostAdminComponentsModalsBase) {
  exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({});
});
define('ghost-admin/components/modals/new-subscriber', ['exports', 'ember-array/utils', 'ghost-admin/components/modals/base', 'ember-ajax/errors', 'ember-concurrency'], function (exports, _emberArrayUtils, _ghostAdminComponentsModalsBase, _emberAjaxErrors, _emberConcurrency) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        addSubscriber: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var _error$errors, firstError, message;

            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return this.get('confirm')();

                    case 3:
                        this.send('closeModal');
                        context$1$0.next = 17;
                        break;

                    case 6:
                        context$1$0.prev = 6;
                        context$1$0.t0 = context$1$0['catch'](0);

                        if (!(context$1$0.t0 && (0, _emberAjaxErrors.isInvalidError)(context$1$0.t0))) {
                            context$1$0.next = 16;
                            break;
                        }

                        _error$errors = _slicedToArray(context$1$0.t0.errors, 1);
                        firstError = _error$errors[0];
                        message = firstError.message;

                        if (!(message && message.match(/email/i))) {
                            context$1$0.next = 16;
                            break;
                        }

                        this.get('model.errors').add('email', message);
                        this.get('model.hasValidated').pushObject('email');
                        return context$1$0.abrupt('return');

                    case 16:
                        throw context$1$0.t0;

                    case 17:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0, 6]]);
        })).drop(),

        actions: {
            updateEmail: function updateEmail(newEmail) {
                this.set('model.email', newEmail);
                this.set('model.hasValidated', (0, _emberArrayUtils.A)());
                this.get('model.errors').clear();
            },

            confirm: function confirm() {
                this.get('addSubscriber').perform();
            }
        }
    });
});

// TODO: server-side validation errors should be serialized
// properly so that errors are added to the model's errors
// property

// this is a route action so it should bubble up to the global
// error handler
define('ghost-admin/components/modals/re-authenticate', ['exports', 'jquery', 'ember-computed', 'ember-service/inject', 'ember-string', 'ghost-admin/components/modals/base', 'ghost-admin/mixins/validation-engine', 'ghost-admin/services/ajax', 'ember-concurrency'], function (exports, _jquery, _emberComputed, _emberServiceInject, _emberString, _ghostAdminComponentsModalsBase, _ghostAdminMixinsValidationEngine, _ghostAdminServicesAjax, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        validationType: 'signin',

        authenticationError: null,

        config: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        torii: (0, _emberServiceInject['default'])(),

        identification: (0, _emberComputed['default'])('session.user.email', function () {
            return this.get('session.user.email');
        }),

        _authenticate: function _authenticate() {
            var _this = this;

            var session = this.get('session');
            var authStrategy = 'authenticator:oauth2';
            var identification = this.get('identification');
            var password = this.get('password');

            session.set('skipAuthSuccessHandler', true);

            this.toggleProperty('submitting');

            return session.authenticate(authStrategy, identification, password)['finally'](function () {
                _this.toggleProperty('submitting');
                session.set('skipAuthSuccessHandler', undefined);
            });
        },

        _passwordConfirm: function _passwordConfirm() {
            var _this2 = this;

            // Manually trigger events for input fields, ensuring legacy compatibility with
            // browsers and password managers that don't send proper events on autofill
            (0, _jquery['default'])('#login').find('input').trigger('change');

            this.set('authenticationError', null);

            return this.validate({ property: 'signin' }).then(function () {
                _this2._authenticate().then(function () {
                    _this2.get('notifications').closeAlerts();
                    _this2.send('closeModal');
                })['catch'](function (error) {
                    if (error && error.errors) {
                        error.errors.forEach(function (err) {
                            if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(err)) {
                                return _this2.get('notifications').showAPIError(error);
                            }
                            err.message = (0, _emberString.htmlSafe)(err.message);
                        });

                        _this2.get('errors').add('password', 'Incorrect password');
                        _this2.get('hasValidated').pushObject('password');
                        _this2.set('authenticationError', error.errors[0].message);
                    }
                });
            }, function () {
                _this2.get('hasValidated').pushObject('password');
            });
        },

        _oauthConfirm: function _oauthConfirm() {
            var _this3 = this;

            // TODO: remove duplication between signin/signup/re-auth
            var authStrategy = 'authenticator:oauth2-ghost';

            this.toggleProperty('submitting');
            this.set('authenticationError', '');

            return this.get('torii').open('ghost-oauth2', { type: 'signin' }).then(function (authentication) {
                _this3.get('session').set('skipAuthSuccessHandler', true);

                _this3.get('session').authenticate(authStrategy, authentication)['finally'](function () {
                    _this3.get('session').set('skipAuthSuccessHandler', undefined);

                    _this3.toggleProperty('submitting');
                    _this3.get('notifications').closeAlerts();
                    _this3.send('closeModal');
                });
            })['catch'](function () {
                _this3.toggleProperty('submitting');
                _this3.set('authenticationError', 'Authentication with Ghost.org denied or failed');
            });
        },

        reauthenticate: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        if (!this.get('config.ghostOAuth')) {
                            context$1$0.next = 5;
                            break;
                        }

                        context$1$0.next = 3;
                        return this._oauthConfirm();

                    case 3:
                        context$1$0.next = 7;
                        break;

                    case 5:
                        context$1$0.next = 7;
                        return this._passwordConfirm();

                    case 7:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('reauthenticate').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/transfer-owner', ['exports', 'ghost-admin/components/modals/base', 'ember-invoke-action', 'ember-concurrency'], function (exports, _ghostAdminComponentsModalsBase, _emberInvokeAction, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({
        user: null,

        transferOwnership: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        context$1$0.prev = 0;
                        context$1$0.next = 3;
                        return (0, _emberInvokeAction.invokeAction)(this, 'confirm');

                    case 3:
                        context$1$0.prev = 3;

                        this.send('closeModal');
                        return context$1$0.finish(3);

                    case 6:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[0,, 3, 6]]);
        })).drop(),

        actions: {
            confirm: function confirm() {
                this.get('transferOwnership').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/upload-image', ['exports', 'ember-computed', 'ember-service/inject', 'ember-utils', 'ghost-admin/components/modals/base', 'ghost-admin/utils/caja-sanitizers', 'ember-concurrency'], function (exports, _emberComputed, _emberServiceInject, _emberUtils, _ghostAdminComponentsModalsBase, _ghostAdminUtilsCajaSanitizers, _emberConcurrency) {
    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({
        model: null,

        url: '',
        newUrl: '',

        config: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        image: (0, _emberComputed['default'])('model.model', 'model.imageProperty', {
            get: function get() {
                var imageProperty = this.get('model.imageProperty');

                return this.get('model.model.' + imageProperty);
            },

            set: function set(key, value) {
                var model = this.get('model.model');
                var imageProperty = this.get('model.imageProperty');

                return model.set(imageProperty, value);
            }
        }),

        didReceiveAttrs: function didReceiveAttrs() {
            var image = this.get('image');
            this.set('url', image);
            this.set('newUrl', image);
        },

        // TODO: should validation be handled in the gh-image-uploader component?
        //  pro - consistency everywhere, simplification here
        //  con - difficult if the "save" is happening externally as it does here
        //
        //  maybe it should be handled at the model level?
        //      - automatically present everywhere
        //      - file uploads should always result in valid urls so it should only
        //        affect the url input form
        keyDown: function keyDown() {
            this._setErrorState(false);
        },

        _setErrorState: function _setErrorState(state) {
            if (state) {
                this.$('.url').addClass('error');
            } else {
                this.$('.url').removeClass('error');
            }
        },

        _validateUrl: function _validateUrl(url) {
            if (!(0, _emberUtils.isEmpty)(url) && !_ghostAdminUtilsCajaSanitizers['default'].url(url)) {
                this._setErrorState(true);
                return { message: 'Image URI is not valid' };
            }

            return true;
        },
        // end validation

        uploadImage: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var model, newUrl, result, notifications;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        model = this.get('model.model');
                        newUrl = this.get('newUrl');
                        result = this._validateUrl(newUrl);
                        notifications = this.get('notifications');

                        if (!(result === true)) {
                            context$1$0.next = 17;
                            break;
                        }

                        this.set('image', newUrl);

                        context$1$0.prev = 6;
                        context$1$0.next = 9;
                        return model.save();

                    case 9:
                        context$1$0.next = 14;
                        break;

                    case 11:
                        context$1$0.prev = 11;
                        context$1$0.t0 = context$1$0['catch'](6);

                        notifications.showAPIError(context$1$0.t0, { key: 'image.upload' });

                    case 14:
                        context$1$0.prev = 14;

                        this.send('closeModal');
                        return context$1$0.finish(14);

                    case 17:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[6, 11, 14, 17]]);
        })).drop(),

        actions: {
            fileUploaded: function fileUploaded(url) {
                this.set('url', url);
                this.set('newUrl', url);
            },

            removeImage: function removeImage() {
                this.set('url', '');
                this.set('newUrl', '');
            },

            confirm: function confirm() {
                this.get('uploadImage').perform();
            }
        }
    });
});
define('ghost-admin/components/modals/upload-theme', ['exports', 'ghost-admin/components/modals/base', 'ember-computed', 'ember-invoke-action', 'ghost-admin/utils/ghost-paths', 'ghost-admin/services/ajax', 'ember-runloop', 'ember-service/inject', 'ember-metal/get'], function (exports, _ghostAdminComponentsModalsBase, _emberComputed, _emberInvokeAction, _ghostAdminUtilsGhostPaths, _ghostAdminServicesAjax, _emberRunloop, _emberServiceInject, _emberMetalGet) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _ghostAdminComponentsModalsBase['default'].extend({

        accept: ['application/zip', 'application/x-zip-compressed'],
        extensions: ['zip'],
        availableThemes: null,
        closeDisabled: false,
        file: null,
        theme: false,
        displayOverwriteWarning: false,

        eventBus: (0, _emberServiceInject['default'])(),

        hideUploader: (0, _emberComputed.or)('theme', 'displayOverwriteWarning'),

        uploadUrl: (0, _emberComputed['default'])(function () {
            return (0, _ghostAdminUtilsGhostPaths['default'])().apiRoot + '/themes/upload/';
        }),

        themeName: (0, _emberComputed['default'])('theme.{name,package.name}', function () {
            var t = this.get('theme');

            return t['package'] ? t['package'].name + ' - ' + t['package'].version : t.name;
        }),

        availableThemeNames: (0, _emberComputed.mapBy)('model.availableThemes', 'name'),

        fileThemeName: (0, _emberComputed['default'])('file', function () {
            var file = this.get('file');
            return file.name.replace(/\.zip$/, '');
        }),

        canActivateTheme: (0, _emberComputed['default'])('theme', function () {
            var theme = this.get('theme');
            return theme && !theme.active;
        }),

        actions: {
            validateTheme: function validateTheme(file) {
                var themeName = file.name.replace(/\.zip$/, '').replace(/[^\w@.]/gi, '-');

                var availableThemeNames = this.get('availableThemeNames');

                this.set('file', file);

                var _$$exec = /(?:\.([^.]+))?$/.exec(file.name);

                var _$$exec2 = _slicedToArray(_$$exec, 2);

                var extension = _$$exec2[1];

                var extensions = this.get('extensions');

                if (!extension || extensions.indexOf(extension.toLowerCase()) === -1) {
                    return new _ghostAdminServicesAjax.UnsupportedMediaTypeError();
                }

                if (file.name.match(/^casper\.zip$/i)) {
                    return { errors: [{ message: 'Sorry, the default Casper theme cannot be overwritten.<br>Please rename your zip file and try again.' }] };
                }

                if (!this._allowOverwrite && availableThemeNames.includes(themeName)) {
                    this.set('displayOverwriteWarning', true);
                    return false;
                }

                return true;
            },

            confirmOverwrite: function confirmOverwrite() {
                this._allowOverwrite = true;
                this.set('displayOverwriteWarning', false);

                // we need to schedule afterRender so that the upload component is
                // displayed again in order to subscribe/respond to the event bus
                _emberRunloop['default'].schedule('afterRender', this, function () {
                    this.get('eventBus').publish('themeUploader:upload', this.get('file'));
                });
            },

            uploadStarted: function uploadStarted() {
                this.set('closeDisabled', true);
            },

            uploadFinished: function uploadFinished() {
                this.set('closeDisabled', false);
            },

            uploadSuccess: function uploadSuccess(response) {
                var _response$themes = _slicedToArray(response.themes, 1);

                var theme = _response$themes[0];

                this.set('theme', theme);

                if ((0, _emberMetalGet['default'])(theme, 'warnings.length') > 0) {
                    this.set('validationWarnings', theme.warnings);
                }

                // invoke the passed in confirm action
                (0, _emberInvokeAction.invokeAction)(this, 'model.uploadSuccess', this.get('theme'));
            },

            uploadFailed: function uploadFailed(error) {
                if ((0, _ghostAdminServicesAjax.isThemeValidationError)(error)) {
                    this.set('validationErrors', error.errors[0].errorDetails);
                }
            },

            confirm: function confirm() {
                // noop - we don't want the enter key doing anything
            },

            activate: function activate() {
                (0, _emberInvokeAction.invokeAction)(this, 'model.activate', this.get('theme'));
                (0, _emberInvokeAction.invokeAction)(this, 'closeModal');
            },

            closeModal: function closeModal() {
                if (!this.get('closeDisabled')) {
                    this._super.apply(this, arguments);
                }
            },

            reset: function reset() {
                this.set('validationErrors', null);
            }
        }
    });
});
define('ghost-admin/components/one-way-checkbox', ['exports', 'ember-one-way-controls/components/one-way-checkbox'], function (exports, _emberOneWayControlsComponentsOneWayCheckbox) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayCheckbox['default'];
    }
  });
});
define('ghost-admin/components/one-way-color', ['exports', 'ember-one-way-controls/components/one-way-color'], function (exports, _emberOneWayControlsComponentsOneWayColor) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayColor['default'];
    }
  });
});
define('ghost-admin/components/one-way-date', ['exports', 'ember-one-way-controls/components/one-way-date'], function (exports, _emberOneWayControlsComponentsOneWayDate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayDate['default'];
    }
  });
});
define('ghost-admin/components/one-way-datetime-local', ['exports', 'ember-one-way-controls/components/one-way-datetime-local'], function (exports, _emberOneWayControlsComponentsOneWayDatetimeLocal) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayDatetimeLocal['default'];
    }
  });
});
define('ghost-admin/components/one-way-email', ['exports', 'ember-one-way-controls/components/one-way-email'], function (exports, _emberOneWayControlsComponentsOneWayEmail) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayEmail['default'];
    }
  });
});
define('ghost-admin/components/one-way-file', ['exports', 'ember-one-way-controls/components/one-way-file'], function (exports, _emberOneWayControlsComponentsOneWayFile) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayFile['default'];
    }
  });
});
define('ghost-admin/components/one-way-hidden', ['exports', 'ember-one-way-controls/components/one-way-hidden'], function (exports, _emberOneWayControlsComponentsOneWayHidden) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayHidden['default'];
    }
  });
});
define('ghost-admin/components/one-way-input', ['exports', 'ember-one-way-controls/components/one-way-input'], function (exports, _emberOneWayControlsComponentsOneWayInput) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayInput['default'];
    }
  });
});
define('ghost-admin/components/one-way-month', ['exports', 'ember-one-way-controls/components/one-way-month'], function (exports, _emberOneWayControlsComponentsOneWayMonth) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayMonth['default'];
    }
  });
});
define('ghost-admin/components/one-way-number', ['exports', 'ember-one-way-controls/components/one-way-number'], function (exports, _emberOneWayControlsComponentsOneWayNumber) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayNumber['default'];
    }
  });
});
define('ghost-admin/components/one-way-password', ['exports', 'ember-one-way-controls/components/one-way-password'], function (exports, _emberOneWayControlsComponentsOneWayPassword) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayPassword['default'];
    }
  });
});
define('ghost-admin/components/one-way-radio', ['exports', 'ember-one-way-controls/components/one-way-radio'], function (exports, _emberOneWayControlsComponentsOneWayRadio) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayRadio['default'];
    }
  });
});
define('ghost-admin/components/one-way-range', ['exports', 'ember-one-way-controls/components/one-way-range'], function (exports, _emberOneWayControlsComponentsOneWayRange) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayRange['default'];
    }
  });
});
define('ghost-admin/components/one-way-search', ['exports', 'ember-one-way-controls/components/one-way-search'], function (exports, _emberOneWayControlsComponentsOneWaySearch) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWaySearch['default'];
    }
  });
});
define('ghost-admin/components/one-way-select', ['exports', 'ember-one-way-controls/components/one-way-select'], function (exports, _emberOneWayControlsComponentsOneWaySelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWaySelect['default'];
    }
  });
});
define('ghost-admin/components/one-way-select/option', ['exports', 'ember-one-way-controls/components/one-way-select/option'], function (exports, _emberOneWayControlsComponentsOneWaySelectOption) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWaySelectOption['default'];
    }
  });
});
define('ghost-admin/components/one-way-tel', ['exports', 'ember-one-way-controls/components/one-way-tel'], function (exports, _emberOneWayControlsComponentsOneWayTel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayTel['default'];
    }
  });
});
define('ghost-admin/components/one-way-text', ['exports', 'ember-one-way-controls/components/one-way-text'], function (exports, _emberOneWayControlsComponentsOneWayText) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayText['default'];
    }
  });
});
define('ghost-admin/components/one-way-textarea', ['exports', 'ember-one-way-controls/components/one-way-textarea'], function (exports, _emberOneWayControlsComponentsOneWayTextarea) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayTextarea['default'];
    }
  });
});
define('ghost-admin/components/one-way-time', ['exports', 'ember-one-way-controls/components/one-way-time'], function (exports, _emberOneWayControlsComponentsOneWayTime) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayTime['default'];
    }
  });
});
define('ghost-admin/components/one-way-url', ['exports', 'ember-one-way-controls/components/one-way-url'], function (exports, _emberOneWayControlsComponentsOneWayUrl) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayUrl['default'];
    }
  });
});
define('ghost-admin/components/one-way-week', ['exports', 'ember-one-way-controls/components/one-way-week'], function (exports, _emberOneWayControlsComponentsOneWayWeek) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsComponentsOneWayWeek['default'];
    }
  });
});
define('ghost-admin/components/power-select-multiple', ['exports', 'ember-power-select/components/power-select-multiple'], function (exports, _emberPowerSelectComponentsPowerSelectMultiple) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultiple['default'];
    }
  });
});
define('ghost-admin/components/power-select-multiple/trigger', ['exports', 'ember-power-select/components/power-select-multiple/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectMultipleTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectMultipleTrigger['default'];
    }
  });
});
define('ghost-admin/components/power-select', ['exports', 'ember-power-select/components/power-select'], function (exports, _emberPowerSelectComponentsPowerSelect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelect['default'];
    }
  });
});
define('ghost-admin/components/power-select/before-options', ['exports', 'ember-power-select/components/power-select/before-options'], function (exports, _emberPowerSelectComponentsPowerSelectBeforeOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectBeforeOptions['default'];
    }
  });
});
define('ghost-admin/components/power-select/options', ['exports', 'ember-power-select/components/power-select/options'], function (exports, _emberPowerSelectComponentsPowerSelectOptions) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectOptions['default'];
    }
  });
});
define('ghost-admin/components/power-select/placeholder', ['exports', 'ember-power-select/components/power-select/placeholder'], function (exports, _emberPowerSelectComponentsPowerSelectPlaceholder) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectPlaceholder['default'];
    }
  });
});
define('ghost-admin/components/power-select/search-message', ['exports', 'ember-power-select/components/power-select/search-message'], function (exports, _emberPowerSelectComponentsPowerSelectSearchMessage) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectSearchMessage['default'];
    }
  });
});
define('ghost-admin/components/power-select/trigger', ['exports', 'ember-power-select/components/power-select/trigger'], function (exports, _emberPowerSelectComponentsPowerSelectTrigger) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectComponentsPowerSelectTrigger['default'];
    }
  });
});
define('ghost-admin/components/resize-detector', ['exports', 'ember-element-resize-detector/components/resize-detector'], function (exports, _emberElementResizeDetectorComponentsResizeDetector) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberElementResizeDetectorComponentsResizeDetector['default'];
    }
  });
});
define('ghost-admin/components/scroll-content-element', ['exports', 'ember-scrollable/components/scroll-content-element'], function (exports, _emberScrollableComponentsScrollContentElement) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberScrollableComponentsScrollContentElement['default'];
    }
  });
});
define('ghost-admin/components/slash-menu-item', ['exports', 'ghost-editor/components/slash-menu-item'], function (exports, _ghostEditorComponentsSlashMenuItem) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsSlashMenuItem['default'];
    }
  });
});
define('ghost-admin/components/slash-menu', ['exports', 'ghost-editor/components/slash-menu'], function (exports, _ghostEditorComponentsSlashMenu) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorComponentsSlashMenu['default'];
    }
  });
});
define('ghost-admin/components/sortable-group', ['exports', 'ember-sortable/components/sortable-group'], function (exports, _emberSortableComponentsSortableGroup) {
  exports['default'] = _emberSortableComponentsSortableGroup['default'];
});
define('ghost-admin/components/sortable-item', ['exports', 'ember-sortable/components/sortable-item'], function (exports, _emberSortableComponentsSortableItem) {
  exports['default'] = _emberSortableComponentsSortableItem['default'];
});
define('ghost-admin/components/torii-iframe-placeholder', ['exports', 'torii/components/torii-iframe-placeholder'], function (exports, _toriiComponentsToriiIframePlaceholder) {
  exports['default'] = _toriiComponentsToriiIframePlaceholder['default'];
});
define('ghost-admin/components/x-file-input', ['exports', 'emberx-file-input/components/x-file-input'], function (exports, _emberxFileInputComponentsXFileInput) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberxFileInputComponentsXFileInput['default'];
    }
  });
});
define('ghost-admin/controllers/about', ['exports', 'ember-controller', 'ember-computed'], function (exports, _emberController, _emberComputed) {
    exports['default'] = _emberController['default'].extend({
        updateNotificationCount: 0,

        actions: {
            updateNotificationChange: function updateNotificationChange(count) {
                this.set('updateNotificationCount', count);
            }
        },

        copyrightYear: (0, _emberComputed['default'])(function () {
            var date = new Date();
            return date.getFullYear();
        })
    });
});
define('ghost-admin/controllers/application', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject'], function (exports, _emberController, _emberComputed, _emberServiceInject) {
    exports['default'] = _emberController['default'].extend({
        dropdown: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),

        showNavMenu: (0, _emberComputed['default'])('currentPath', 'session.isAuthenticated', 'session.user.isFulfilled', function () {
            // we need to defer showing the navigation menu until the session.user
            // promise has fulfilled so that gh-user-can-admin has the correct data
            if (!this.get('session.isAuthenticated') || !this.get('session.user.isFulfilled')) {
                return false;
            }

            return (this.get('currentPath') !== 'error404' || this.get('session.isAuthenticated')) && !this.get('currentPath').match(/(signin|signup|setup|reset)/);
        }),

        topNotificationCount: 0,
        showMobileMenu: false,
        showSettingsMenu: false,
        showMarkdownHelpModal: false,

        autoNav: false,
        autoNavOpen: (0, _emberComputed['default'])('autoNav', {
            get: function get() {
                return false;
            },
            set: function set(key, value) {
                if (this.get('autoNav')) {
                    return value;
                }
                return false;
            }
        }),

        actions: {
            topNotificationChange: function topNotificationChange(count) {
                this.set('topNotificationCount', count);
            },

            toggleAutoNav: function toggleAutoNav() {
                this.toggleProperty('autoNav');
            },

            openAutoNav: function openAutoNav() {
                this.set('autoNavOpen', true);
            },

            closeAutoNav: function closeAutoNav() {
                this.set('autoNavOpen', false);
            },

            closeMobileMenu: function closeMobileMenu() {
                this.set('showMobileMenu', false);
            }
        }
    });
});
define('ghost-admin/controllers/editor/edit', ['exports', 'ember-controller', 'ghost-admin/mixins/editor-base-controller'], function (exports, _emberController, _ghostAdminMixinsEditorBaseController) {
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {
        showDeletePostModal: false,

        actions: {
            toggleDeletePostModal: function toggleDeletePostModal() {
                this.toggleProperty('showDeletePostModal');
            }
        }
    });
});
define('ghost-admin/controllers/editor/new', ['exports', 'ember-controller', 'ghost-admin/mixins/editor-base-controller'], function (exports, _emberController, _ghostAdminMixinsEditorBaseController) {

    function K() {
        return this;
    }

    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsEditorBaseController['default'], {
        // Overriding autoSave on the base controller, as the new controller shouldn't be autosaving
        autoSave: K,
        actions: {
            /**
              * Redirect to editor after the first save
              */
            save: function save(options) {
                var _this = this;

                return this._super(options).then(function (model) {
                    if (model.get('id')) {
                        _this.replaceRoute('editor.edit', model);
                    }
                });
            }
        }
    });
});
define('ghost-admin/controllers/error', ['exports', 'ember-controller', 'ember-computed'], function (exports, _emberController, _emberComputed) {
    exports['default'] = _emberController['default'].extend({

        stack: false,

        code: (0, _emberComputed['default'])('content.status', function () {
            return this.get('content.status') > 200 ? this.get('content.status') : 500;
        }),

        message: (0, _emberComputed['default'])('content.statusText', function () {
            if (this.get('code') === 404) {
                return 'Page not found';
            }

            return this.get('content.statusText') !== 'error' ? this.get('content.statusText') : 'Internal Server Error';
        })
    });
});
define('ghost-admin/controllers/post-settings-menu', ['exports', 'jquery', 'ember', 'ember-controller', 'ember-computed', 'ember-metal/utils', 'ember-service/inject', 'ember-controller/inject', 'ember-string', 'ember-metal/observer', 'ghost-admin/utils/date-formatting', 'ghost-admin/mixins/settings-menu-controller', 'ghost-admin/utils/bound-one-way', 'ghost-admin/utils/isNumber'], function (exports, _jquery, _ember, _emberController, _emberComputed, _emberMetalUtils, _emberServiceInject, _emberControllerInject, _emberString, _emberMetalObserver, _ghostAdminUtilsDateFormatting, _ghostAdminMixinsSettingsMenuController, _ghostAdminUtilsBoundOneWay, _ghostAdminUtilsIsNumber) {
    var ArrayProxy = _ember['default'].ArrayProxy;
    var Handlebars = _ember['default'].Handlebars;
    var PromiseProxyMixin = _ember['default'].PromiseProxyMixin;
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsSettingsMenuController['default'], {
        selectedAuthor: null,

        application: (0, _emberControllerInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        slugGenerator: (0, _emberServiceInject['default'])(),
        timeZone: (0, _emberServiceInject['default'])(),

        initializeSelectedAuthor: (0, _emberMetalObserver['default'])('model', function () {
            var _this = this;

            return this.get('model.author').then(function (author) {
                _this.set('selectedAuthor', author);
                return author;
            });
        }),

        authors: (0, _emberComputed['default'])(function () {
            // Loaded asynchronously, so must use promise proxies.
            var deferred = {};

            deferred.promise = this.store.query('user', { limit: 'all' }).then(function (users) {
                return users.rejectBy('id', 'me').sortBy('name');
            }).then(function (users) {
                return users.filter(function (user) {
                    return user.get('active');
                });
            });

            return ArrayProxy.extend(PromiseProxyMixin).create(deferred);
        }),

        slugValue: (0, _ghostAdminUtilsBoundOneWay['default'])('model.slug'),
        metaTitleScratch: (0, _ghostAdminUtilsBoundOneWay['default'])('model.metaTitle'),
        metaDescriptionScratch: (0, _ghostAdminUtilsBoundOneWay['default'])('model.metaDescription'),

        seoTitle: (0, _emberComputed['default'])('model.titleScratch', 'metaTitleScratch', function () {
            var metaTitle = this.get('metaTitleScratch') || '';

            metaTitle = metaTitle.length > 0 ? metaTitle : this.get('model.titleScratch');

            if (metaTitle.length > 70) {
                metaTitle = metaTitle.substring(0, 70).trim();
                metaTitle = Handlebars.Utils.escapeExpression(metaTitle);
                metaTitle = (0, _emberString.htmlSafe)(metaTitle + '&hellip;');
            }

            return metaTitle;
        }),

        seoDescription: (0, _emberComputed['default'])('model.scratch', 'metaDescriptionScratch', function () {
            var metaDescription = this.get('metaDescriptionScratch') || '';
            var html = '';
            var el = undefined,
                placeholder = undefined;

            if (metaDescription.length > 0) {
                placeholder = metaDescription;
            } else {
                el = (0, _jquery['default'])('.rendered-markdown');

                // Get rendered markdown
                if (el !== undefined && el.length > 0) {
                    html = el.clone();
                    html.find('.js-drop-zone').remove();
                    html = html[0].innerHTML;
                }

                // Strip HTML
                placeholder = (0, _jquery['default'])('<div />', { html: html }).text();
                // Replace new lines and trim
                placeholder = placeholder.replace(/\n+/g, ' ').trim();
            }

            if (placeholder.length > 156) {
                // Limit to 156 characters
                placeholder = placeholder.substring(0, 156).trim();
                placeholder = Handlebars.Utils.escapeExpression(placeholder);
                placeholder = (0, _emberString.htmlSafe)(placeholder + '&hellip;');
            }

            return placeholder;
        }),

        seoURL: (0, _emberComputed['default'])('model.slug', 'config.blogUrl', function () {
            var blogUrl = this.get('config.blogUrl');
            var seoSlug = this.get('model.slug') ? this.get('model.slug') : '';
            var seoURL = blogUrl + '/' + seoSlug;

            // only append a slash to the URL if the slug exists
            if (seoSlug) {
                seoURL += '/';
            }

            if (seoURL.length > 70) {
                seoURL = seoURL.substring(0, 70).trim();
                seoURL = Handlebars.Utils.escapeExpression(seoURL);
                seoURL = (0, _emberString.htmlSafe)(seoURL + '&hellip;');
            }

            return seoURL;
        }),

        // live-query of all tags for tag input autocomplete
        availableTags: (0, _emberComputed['default'])(function () {
            return this.get('store').filter('tag', { limit: 'all' }, function () {
                return true;
            });
        }),

        showError: function showError(error) {
            // TODO: remove null check once ValidationEngine has been removed
            if (error) {
                this.get('notifications').showAPIError(error);
            }
        },

        actions: {
            discardEnter: function discardEnter() {
                return false;
            },

            togglePage: function togglePage() {
                var _this2 = this;

                this.toggleProperty('model.page');

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (error) {
                    _this2.showError(error);
                    _this2.get('model').rollbackAttributes();
                });
            },

            toggleFeatured: function toggleFeatured() {
                var _this3 = this;

                this.toggleProperty('model.featured');

                // If this is a new post.  Don't save the model.  Defer the save
                // to the user pressing the save button
                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save(this.get('saveOptions'))['catch'](function (error) {
                    _this3.showError(error);
                    _this3.get('model').rollbackAttributes();
                });
            },

            /**
             * triggered by user manually changing slug
             */
            updateSlug: function updateSlug(newSlug) {
                var _this4 = this;

                var slug = this.get('model.slug');

                newSlug = newSlug || slug;
                newSlug = newSlug && newSlug.trim();

                // Ignore unchanged slugs or candidate slugs that are empty
                if (!newSlug || slug === newSlug) {
                    // reset the input to its previous state
                    this.set('slugValue', slug);

                    return;
                }

                this.get('slugGenerator').generateSlug('post', newSlug).then(function (serverSlug) {
                    // If after getting the sanitized and unique slug back from the API
                    // we end up with a slug that matches the existing slug, abort the change
                    if (serverSlug === slug) {
                        return;
                    }

                    // Because the server transforms the candidate slug by stripping
                    // certain characters and appending a number onto the end of slugs
                    // to enforce uniqueness, there are cases where we can get back a
                    // candidate slug that is a duplicate of the original except for
                    // the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

                    // get the last token out of the slug candidate and see if it's a number
                    var slugTokens = serverSlug.split('-');
                    var check = Number(slugTokens.pop());

                    // if the candidate slug is the same as the existing slug except
                    // for the incrementor then the existing slug should be used
                    if ((0, _ghostAdminUtilsIsNumber['default'])(check) && check > 0) {
                        if (slug === slugTokens.join('-') && serverSlug !== newSlug) {
                            _this4.set('slugValue', slug);

                            return;
                        }
                    }

                    _this4.set('model.slug', serverSlug);

                    if (_this4.hasObserverFor('model.titleScratch')) {
                        _this4.removeObserver('model.titleScratch', _this4, 'titleObserver');
                    }

                    // If this is a new post.  Don't save the model.  Defer the save
                    // to the user pressing the save button
                    if (_this4.get('model.isNew')) {
                        return;
                    }

                    return _this4.get('model').save();
                })['catch'](function (error) {
                    _this4.showError(error);
                    _this4.get('model').rollbackAttributes();
                });
            },

            /**
             * Parse user's set published date.
             * Action sent by post settings menu view.
             * (#1351)
             */
            setPublishedAtUTC: function setPublishedAtUTC(userInput) {
                var _this5 = this;

                if (!userInput) {
                    // Clear out the publishedAtUTC field for a draft
                    if (this.get('model.isDraft')) {
                        this.set('model.publishedAtUTC', null);
                    }
                    return;
                }

                // The user inputs a date which he expects to be in his timezone. Therefore, from now on
                // we have to work with the timezone offset which we get from the timeZone Service.
                this.get('timeZone.blogTimezone').then(function (blogTimezone) {
                    var newPublishedAt = (0, _ghostAdminUtilsDateFormatting.parseDateString)(userInput, blogTimezone);
                    var publishedAtUTC = moment.utc(_this5.get('model.publishedAtUTC'));
                    var errMessage = '';
                    var newPublishedAtUTC = undefined;

                    // Clear previous errors
                    _this5.get('model.errors').remove('post-setting-date');

                    // Validate new Published date
                    if (!newPublishedAt.isValid()) {
                        errMessage = 'Published Date must be a valid date with format: ' + 'DD MMM YY @ HH:mm (e.g. 6 Dec 14 @ 15:00)';
                    }

                    // Date is a valid date, so now make it UTC
                    newPublishedAtUTC = moment.utc(newPublishedAt);

                    if (newPublishedAtUTC.diff(moment.utc(new Date()), 'hours', true) > 0) {

                        // We have to check that the time from now is not shorter than 2 minutes,
                        // otherwise we'll have issues with the serverside scheduling procedure
                        if (newPublishedAtUTC.diff(moment.utc(new Date()), 'minutes', true) < 2) {
                            errMessage = 'Must be at least 2 minutes from now.';
                        } else {
                            // in case the post is already published and the user sets the date
                            // afterwards to a future time, we stop here, and he has to unpublish
                            // his post first
                            if (_this5.get('model.isPublished')) {
                                errMessage = 'Your post is already published.';
                                // this is the indicator for the different save button layout
                                _this5.set('timeScheduled', false);
                            }
                            // everything fine, we can start the schedule workflow and change
                            // the save buttons according to it
                            _this5.set('timeScheduled', true);
                        }
                        // if the post is already scheduled and the user changes the date back into the
                        // past, we'll set the status of the post back to draft, so he can start all over
                        // again
                    } else if (_this5.get('model.isScheduled')) {
                            _this5.set('model.status', 'draft');
                        }

                    // If errors, notify and exit.
                    if (errMessage) {
                        _this5.get('model.errors').add('post-setting-date', errMessage);
                        return;
                    }

                    // Do nothing if the user didn't actually change the date
                    if (publishedAtUTC && publishedAtUTC.isSame(newPublishedAtUTC)) {
                        return;
                    }

                    // Validation complete
                    _this5.set('model.publishedAtUTC', newPublishedAtUTC);

                    // If this is a new post.  Don't save the model.  Defer the save
                    // to the user pressing the save button
                    if (_this5.get('model.isNew')) {
                        return;
                    }

                    _this5.get('model').save()['catch'](function (error) {
                        _this5.showError(error);
                        _this5.get('model').rollbackAttributes();
                    });
                });
            },

            setMetaTitle: function setMetaTitle(metaTitle) {
                // Grab the model and current stored meta title
                var model = this.get('model');
                var currentTitle = model.get('metaTitle');

                // If the title entered matches the stored meta title, do nothing
                if (currentTitle === metaTitle) {
                    return;
                }

                // If the title entered is different, set it as the new meta title
                model.set('metaTitle', metaTitle);

                // Make sure the meta title is valid and if so, save it into the model
                return model.validate({ property: 'metaTitle' }).then(function () {
                    if (model.get('isNew')) {
                        return;
                    }

                    return model.save();
                });
            },

            setMetaDescription: function setMetaDescription(metaDescription) {
                // Grab the model and current stored meta description
                var model = this.get('model');
                var currentDescription = model.get('metaDescription');

                // If the title entered matches the stored meta title, do nothing
                if (currentDescription === metaDescription) {
                    return;
                }

                // If the title entered is different, set it as the new meta title
                model.set('metaDescription', metaDescription);

                // Make sure the meta title is valid and if so, save it into the model
                return model.validate({ property: 'metaDescription' }).then(function () {
                    if (model.get('isNew')) {
                        return;
                    }

                    return model.save();
                });
            },

            setCoverImage: function setCoverImage(image) {
                var _this6 = this;

                this.set('model.image', image);

                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (error) {
                    _this6.showError(error);
                    _this6.get('model').rollbackAttributes();
                });
            },

            clearCoverImage: function clearCoverImage() {
                var _this7 = this;

                this.set('model.image', '');

                if (this.get('model.isNew')) {
                    return;
                }

                this.get('model').save()['catch'](function (error) {
                    _this7.showError(error);
                    _this7.get('model').rollbackAttributes();
                });
            },

            resetPubDate: function resetPubDate() {
                this.set('publishedAtUTCValue', '');
            },

            closeNavMenu: function closeNavMenu() {
                this.get('application').send('closeNavMenu');
            },

            changeAuthor: function changeAuthor(newAuthor) {
                var _this8 = this;

                var author = this.get('model.author');
                var model = this.get('model');

                // return if nothing changed
                if (newAuthor.get('id') === author.get('id')) {
                    return;
                }

                model.set('author', newAuthor);

                // if this is a new post (never been saved before), don't try to save it
                if (this.get('model.isNew')) {
                    return;
                }

                model.save()['catch'](function (error) {
                    _this8.showError(error);
                    _this8.set('selectedAuthor', author);
                    model.rollbackAttributes();
                });
            },

            addTag: function addTag(tagName, index) {
                var _this9 = this;

                var currentTags = this.get('model.tags');
                var currentTagNames = currentTags.map(function (tag) {
                    return tag.get('name').toLowerCase();
                });
                var availableTagNames = undefined,
                    tagToAdd = undefined;

                tagName = tagName.trim();

                // abort if tag is already selected
                if (currentTagNames.includes(tagName.toLowerCase())) {
                    return;
                }

                this.get('availableTags').then(function (availableTags) {
                    availableTagNames = availableTags.map(function (tag) {
                        return tag.get('name').toLowerCase();
                    });

                    // find existing tag or create new
                    if (availableTagNames.includes(tagName.toLowerCase())) {
                        tagToAdd = availableTags.find(function (tag) {
                            return tag.get('name').toLowerCase() === tagName.toLowerCase();
                        });
                    } else {
                        tagToAdd = _this9.get('store').createRecord('tag', {
                            name: tagName
                        });

                        // we need to set a UUID so that selectize has a unique value
                        // it will be ignored when sent to the server
                        tagToAdd.set('uuid', (0, _emberMetalUtils.guidFor)(tagToAdd));
                    }

                    // push tag onto post relationship
                    if (tagToAdd) {
                        _this9.get('model.tags').insertAt(index, tagToAdd);
                    }
                });
            },

            removeTag: function removeTag(tag) {
                this.get('model.tags').removeObject(tag);

                if (tag.get('isNew')) {
                    tag.destroyRecord();
                }
            }
        }
    });
});
define('ghost-admin/controllers/posts', ['exports', 'ember-controller'], function (exports, _emberController) {
  exports['default'] = _emberController['default'].extend({});
});
define('ghost-admin/controllers/posts/index', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject'], function (exports, _emberController, _emberComputed, _emberServiceInject) {
    exports['default'] = _emberController['default'].extend({

        queryParams: ['type'],
        type: null,

        session: (0, _emberServiceInject['default'])(),

        showDeletePostModal: false,

        showingAll: (0, _emberComputed['default'])('type', function () {
            return this.get('type') === null;
        }),

        actions: {
            toggleDeletePostModal: function toggleDeletePostModal() {
                this.toggleProperty('showDeletePostModal');
            }
        }
    });
});
define('ghost-admin/controllers/reset', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ghost-admin/mixins/validation-engine', 'ember-concurrency'], function (exports, _emberController, _emberComputed, _emberServiceInject, _ghostAdminMixinsValidationEngine, _emberConcurrency) {
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        newPassword: '',
        ne2Password: '',
        token: '',
        flowErrors: '',

        validationType: 'reset',

        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        email: (0, _emberComputed['default'])('token', function () {
            // The token base64 encodes the email (and some other stuff),
            // each section is divided by a '|'. Email comes second.
            return atob(this.get('token')).split('|')[1];
        }),

        // Used to clear sensitive information
        clearData: function clearData() {
            this.setProperties({
                newPassword: '',
                ne2Password: '',
                token: ''
            });
        },

        resetPassword: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var credentials, authUrl, resp;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        credentials = this.getProperties('newPassword', 'ne2Password', 'token');
                        authUrl = this.get('ghostPaths.url').api('authentication', 'passwordreset');

                        this.set('flowErrors', '');
                        this.get('hasValidated').addObjects(['newPassword', 'ne2Password']);

                        context$1$0.prev = 4;
                        context$1$0.next = 7;
                        return this.validate();

                    case 7:
                        context$1$0.prev = 7;
                        context$1$0.next = 10;
                        return this.get('ajax').put(authUrl, {
                            data: {
                                passwordreset: [credentials]
                            }
                        });

                    case 10:
                        resp = context$1$0.sent;

                        this.get('notifications').showAlert(resp.passwordreset[0].message, { type: 'warn', delayed: true, key: 'password.reset' });
                        this.get('session').authenticate('authenticator:oauth2', this.get('email'), credentials.newPassword);
                        context$1$0.next = 18;
                        break;

                    case 15:
                        context$1$0.prev = 15;
                        context$1$0.t0 = context$1$0['catch'](7);

                        this.get('notifications').showAPIError(context$1$0.t0, { key: 'password.reset' });

                    case 18:
                        context$1$0.next = 26;
                        break;

                    case 20:
                        context$1$0.prev = 20;
                        context$1$0.t1 = context$1$0['catch'](4);

                        if (this.get('errors.newPassword')) {
                            this.set('flowErrors', this.get('errors.newPassword')[0].message);
                        }

                        if (this.get('errors.ne2Password')) {
                            this.set('flowErrors', this.get('errors.ne2Password')[0].message);
                        }

                        if (!(context$1$0.t1 && this.get('errors.length') === 0)) {
                            context$1$0.next = 26;
                            break;
                        }

                        throw context$1$0.t1;

                    case 26:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[4, 20], [7, 15]]);
        })).drop(),

        actions: {
            submit: function submit() {
                this.get('resetPassword').perform();
            }
        }
    });
});
define('ghost-admin/controllers/settings/apps/amp', ['exports', 'ember-controller', 'ember-service/inject'], function (exports, _emberController, _emberServiceInject) {
    exports['default'] = _emberController['default'].extend({
        notifications: (0, _emberServiceInject['default'])(),

        // will be set by route
        settings: null,

        isSaving: false,

        actions: {
            update: function update(value) {
                this.set('model', value);
            },

            save: function save() {
                var _this = this;

                var amp = this.get('model');
                var settings = this.get('settings');

                if (this.get('isSaving')) {
                    return;
                }

                settings.set('amp', amp);

                this.set('isSaving', true);

                return settings.save()['catch'](function (err) {
                    _this.get('notifications').showAPIError(err);
                    throw err;
                })['finally'](function () {
                    _this.set('isSaving', false);
                });
            }
        }
    });
});
define('ghost-admin/controllers/settings/apps/index', ['exports', 'ember-controller', 'ember-controller/inject', 'ember-computed'], function (exports, _emberController, _emberControllerInject, _emberComputed) {
    exports['default'] = _emberController['default'].extend({
        appsController: (0, _emberControllerInject['default'])('settings.apps'),

        slack: (0, _emberComputed.alias)('appsController.model.slack.firstObject'),
        amp: (0, _emberComputed.alias)('appsController.model.amp')
    });
});
define('ghost-admin/controllers/settings/apps/slack', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ember-invoke-action'], function (exports, _emberController, _emberComputed, _emberServiceInject, _emberInvokeAction) {
    exports['default'] = _emberController['default'].extend({
        ghostPaths: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        // will be set by route
        settings: null,

        isSaving: false,
        savePromise: null,
        isSendingTest: false,

        testNotificationDisabled: (0, _emberComputed.empty)('model.url'),

        actions: {
            sendTestNotification: function sendTestNotification() {
                var _this = this;

                var notifications = this.get('notifications');
                var slackApi = this.get('ghostPaths.url').api('slack', 'test');

                if (this.get('isSendingTest')) {
                    return;
                }

                this.set('isSendingTest', true);

                (0, _emberInvokeAction.invoke)(this, 'save').then(function () {
                    _this.get('ajax').post(slackApi).then(function () {
                        notifications.showAlert('Check your slack channel test message.', { type: 'info', key: 'slack-test.send.success' });
                    })['catch'](function (error) {
                        notifications.showAPIError(error, { key: 'slack-test:send' });
                        throw error;
                    });
                })['catch'](function () {
                    // noop - error already handled in .save
                })['finally'](function () {
                    _this.set('isSendingTest', false);
                });
            },

            updateURL: function updateURL(value) {
                this.set('model.url', value);
                this.get('model.errors').clear();
            },

            save: function save() {
                var _this2 = this;

                var slack = this.get('model');
                var settings = this.get('settings');

                if (this.get('isSaving')) {
                    return;
                }

                return slack.validate().then(function () {
                    settings.get('slack').clear().pushObject(slack);

                    _this2.set('isSaving', true);

                    return settings.save()['catch'](function (err) {
                        _this2.get('notifications').showAPIError(err);
                        throw err;
                    })['finally'](function () {
                        _this2.set('isSaving', false);
                    });
                });
            }
        }
    });
});
define('ghost-admin/controllers/settings/code-injection', ['exports', 'ember-controller', 'ember-service/inject', 'ghost-admin/mixins/settings-save'], function (exports, _emberController, _emberServiceInject, _ghostAdminMixinsSettingsSave) {
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsSettingsSave['default'], {
        notifications: (0, _emberServiceInject['default'])(),

        save: function save() {
            var notifications = this.get('notifications');

            return this.get('model').save()['catch'](function (error) {
                notifications.showAPIError(error, { key: 'code-injection.save' });
            });
        }
    });
});
define('ghost-admin/controllers/settings/general', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ember-metal/observer', 'ember-runloop', 'ghost-admin/mixins/settings-save', 'ghost-admin/utils/random-password', 'jquery'], function (exports, _emberController, _emberComputed, _emberServiceInject, _emberMetalObserver, _emberRunloop, _ghostAdminMixinsSettingsSave, _ghostAdminUtilsRandomPassword, _jquery) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsSettingsSave['default'], {

        availableTimezones: null,
        themeToDelete: null,

        showUploadLogoModal: false,
        showUploadCoverModal: false,
        showUploadIconModal: false,
        showDeleteThemeModal: (0, _emberComputed.notEmpty)('themeToDelete'),

        ajax: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        _scratchFacebook: null,
        _scratchTwitter: null,

        iconMimeTypes: 'image/png,image/x-icon',
        iconExtensions: ['ico', 'png'],

        isDatedPermalinks: (0, _emberComputed['default'])('model.permalinks', {
            set: function set(key, value) {
                this.set('model.permalinks', value ? '/:year/:month/:day/:slug/' : '/:slug/');

                var slugForm = this.get('model.permalinks');
                return slugForm !== '/:slug/';
            },

            get: function get() {
                var slugForm = this.get('model.permalinks');

                return slugForm !== '/:slug/';
            }
        }),

        generatePassword: (0, _emberMetalObserver['default'])('model.isPrivate', function () {
            this.get('model.errors').remove('password');
            if (this.get('model.isPrivate') && this.get('model.hasDirtyAttributes')) {
                this.get('model').set('password', (0, _ghostAdminUtilsRandomPassword['default'])());
            }
        }),

        _deleteTheme: function _deleteTheme() {
            var _this = this;

            var theme = this.get('themeToDelete');
            var themeURL = this.get('ghostPaths.apiRoot') + '/themes/' + theme.name + '/';

            if (!theme) {
                return;
            }

            return this.get('ajax').del(themeURL).then(function () {
                _this.send('reloadSettings');
            })['catch'](function (error) {
                _this.get('notifications').showAPIError(error);
            });
        },

        save: function save() {
            var _this2 = this;

            var notifications = this.get('notifications');
            var config = this.get('config');
            return this.get('model').save().then(function (model) {
                config.set('blogTitle', model.get('title'));

                // this forces the document title to recompute after
                // a blog title change
                _this2.send('collectTitleTokens', []);

                return model;
            })['catch'](function (error) {
                if (error) {
                    notifications.showAPIError(error, { key: 'settings.save' });
                }
                throw error;
            });
        },

        actions: {
            setTheme: function setTheme(theme) {
                this.set('model.activeTheme', theme.name);
                this.send('save');
            },

            downloadTheme: function downloadTheme(theme) {
                var themeURL = this.get('ghostPaths.apiRoot') + '/themes/' + theme.name;
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = themeURL + '/download/?access_token=' + accessToken;
                var iframe = (0, _jquery['default'])('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = (0, _jquery['default'])('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },

            deleteTheme: function deleteTheme(theme) {
                if (theme) {
                    return this.set('themeToDelete', theme);
                }

                return this._deleteTheme();
            },

            hideDeleteThemeModal: function hideDeleteThemeModal() {
                this.set('themeToDelete', null);
            },

            setTimezone: function setTimezone(timezone) {
                this.set('model.activeTimezone', timezone.name);
            },

            toggleUploadCoverModal: function toggleUploadCoverModal() {
                this.toggleProperty('showUploadCoverModal');
            },

            toggleUploadLogoModal: function toggleUploadLogoModal() {
                this.toggleProperty('showUploadLogoModal');
            },

            toggleUploadIconModal: function toggleUploadIconModal() {
                this.toggleProperty('showUploadIconModal');
            },

            validateFacebookUrl: function validateFacebookUrl() {
                var _this3 = this;

                var newUrl = this.get('_scratchFacebook');
                var oldUrl = this.get('model.facebook');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Facebook url
                    this.set('model.facebook', '');
                    this.get('model.errors').remove('facebook');
                    return;
                }

                // _scratchFacebook will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('model.errors').remove('facebook');
                    return;
                }

                if (newUrl.match(/(?:facebook\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:facebook\.com\/)(\S+)/)) {
                        var _newUrl$match = newUrl.match(/(?:facebook\.com\/)(\S+)/);

                        var _newUrl$match2 = _slicedToArray(_newUrl$match, 2);

                        username = _newUrl$match2[1];
                    } else {
                        var _newUrl$match3 = newUrl.match(/(?:https\:\/\/|http\:\/\/)?(?:www\.)?(?:\w+\.\w+\/+)?(\S+)/mi);

                        var _newUrl$match32 = _slicedToArray(_newUrl$match3, 2);

                        username = _newUrl$match32[1];
                    }

                    // check if we have a /page/username or without
                    if (username.match(/^(?:\/)?(pages?\/\S+)/mi)) {
                        var _username$match = username.match(/^(?:\/)?(pages?\/\S+)/mi);

                        // we got a page url, now save the username without the / in the beginning

                        var _username$match2 = _slicedToArray(_username$match, 2);

                        username = _username$match2[1];
                    } else if (username.match(/^(http|www)|(\/)/) || !username.match(/^([a-z\d\.]{5,50})$/mi)) {
                        errMessage = !username.match(/^([a-z\d\.]{5,50})$/mi) ? 'Your Page name is not a valid Facebook Page name' : 'The URL must be in a format like https://www.facebook.com/yourPage';

                        this.get('model.errors').add('facebook', errMessage);
                        this.get('model.hasValidated').pushObject('facebook');
                        return;
                    }

                    newUrl = 'https://www.facebook.com/' + username;
                    this.set('model.facebook', newUrl);

                    this.get('model.errors').remove('facebook');
                    this.get('model.hasValidated').pushObject('facebook');

                    // User input is validated
                    return this.save().then(function () {
                        _this3.set('model.facebook', '');
                        _emberRunloop['default'].schedule('afterRender', _this3, function () {
                            this.set('model.facebook', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourPage';
                    this.get('model.errors').add('facebook', errMessage);
                    this.get('model.hasValidated').pushObject('facebook');
                    return;
                }
            },

            validateTwitterUrl: function validateTwitterUrl() {
                var _this4 = this;

                var newUrl = this.get('_scratchTwitter');
                var oldUrl = this.get('model.twitter');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Twitter url
                    this.set('model.twitter', '');
                    this.get('model.errors').remove('twitter');
                    return;
                }

                // _scratchTwitter will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('model.errors').remove('twitter');
                    return;
                }

                if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
                        var _newUrl$match4 = newUrl.match(/(?:twitter\.com\/)(\S+)/);

                        var _newUrl$match42 = _slicedToArray(_newUrl$match4, 2);

                        username = _newUrl$match42[1];
                    } else {
                        var _newUrl$match5 = newUrl.match(/([^/]+)\/?$/mi);

                        var _newUrl$match52 = _slicedToArray(_newUrl$match5, 1);

                        username = _newUrl$match52[0];
                    }

                    // check if username starts with http or www and show error if so
                    if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d\.\_]{1,15}$/mi)) {
                        errMessage = !username.match(/^[a-z\d\.\_]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';

                        this.get('model.errors').add('twitter', errMessage);
                        this.get('model.hasValidated').pushObject('twitter');
                        return;
                    }

                    newUrl = 'https://twitter.com/' + username;
                    this.set('model.twitter', newUrl);

                    this.get('model.errors').remove('twitter');
                    this.get('model.hasValidated').pushObject('twitter');

                    // User input is validated
                    return this.save().then(function () {
                        _this4.set('model.twitter', '');
                        _emberRunloop['default'].schedule('afterRender', _this4, function () {
                            this.set('model.twitter', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
                    this.get('model.errors').add('twitter', errMessage);
                    this.get('model.hasValidated').pushObject('twitter');
                    return;
                }
            }
        }
    });
});
define('ghost-admin/controllers/settings/labs', ['exports', 'jquery', 'rsvp', 'ember-controller', 'ember-service/inject', 'ember-utils', 'ember-array/utils', 'ghost-admin/services/ajax'], function (exports, _jquery, _rsvp, _emberController, _emberServiceInject, _emberUtils, _emberArrayUtils, _ghostAdminServicesAjax) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var Promise = _rsvp['default'].Promise;
    exports['default'] = _emberController['default'].extend({
        uploadButtonText: 'Import',
        importErrors: '',
        submitting: false,
        showDeleteAllModal: false,

        importMimeType: ['application/json', 'application/zip', 'application/x-zip-compressed'],

        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        // TODO: convert to ember-concurrency task
        _validate: function _validate(file) {
            // Windows doesn't have mime-types for json files by default, so we
            // need to have some additional checking
            if (file.type === '') {
                // First check file extension so we can early return

                var _$$exec = /(?:\.([^.]+))?$/.exec(file.name);

                var _$$exec2 = _slicedToArray(_$$exec, 2);

                var extension = _$$exec2[1];

                if (!extension || extension.toLowerCase() !== 'json') {
                    return _rsvp['default'].reject(new _ghostAdminServicesAjax.UnsupportedMediaTypeError());
                }

                return new Promise(function (resolve, reject) {
                    // Extension is correct, so check the contents of the file
                    var reader = new FileReader();

                    reader.onload = function () {
                        var result = reader.result;

                        try {
                            JSON.parse(result);

                            return resolve();
                        } catch (e) {
                            return reject(new _ghostAdminServicesAjax.UnsupportedMediaTypeError());
                        }
                    };

                    reader.readAsText(file);
                });
            }

            var accept = this.get('importMimeType');

            if (!(0, _emberUtils.isBlank)(accept) && file && accept.indexOf(file.type) === -1) {
                return _rsvp['default'].reject(new _ghostAdminServicesAjax.UnsupportedMediaTypeError());
            }

            return _rsvp['default'].resolve();
        },

        actions: {
            onUpload: function onUpload(file) {
                var _this = this;

                var formData = new FormData();
                var notifications = this.get('notifications');
                var currentUserId = this.get('session.user.id');
                var dbUrl = this.get('ghostPaths.url').api('db');

                this.set('uploadButtonText', 'Importing');
                this.set('importErrors', '');

                return this._validate(file).then(function () {
                    formData.append('importfile', file);

                    return _this.get('ajax').post(dbUrl, {
                        data: formData,
                        dataType: 'json',
                        cache: false,
                        contentType: false,
                        processData: false
                    });
                }).then(function () {
                    // Clear the store, so that all the new data gets fetched correctly.
                    _this.store.unloadAll();
                    // Reload currentUser and set session
                    _this.set('session.user', _this.store.findRecord('user', currentUserId));
                    // TODO: keep as notification, add link to view content
                    notifications.showNotification('Import successful.', { key: 'import.upload.success' });
                })['catch'](function (response) {
                    if ((0, _ghostAdminServicesAjax.isUnsupportedMediaTypeError)(response)) {
                        _this.set('importErrors', [response]);
                        return;
                    }

                    if (response && response.errors && (0, _emberArrayUtils.isEmberArray)(response.errors)) {
                        _this.set('importErrors', response.errors);
                    }

                    notifications.showAlert('Import Failed', { type: 'error', key: 'import.upload.failed' });
                })['finally'](function () {
                    _this.set('uploadButtonText', 'Import');
                });
            },

            exportData: function exportData() {
                var dbUrl = this.get('ghostPaths.url').api('db');
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = dbUrl + '?access_token=' + accessToken;
                var iframe = (0, _jquery['default'])('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = (0, _jquery['default'])('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            },

            sendTestEmail: function sendTestEmail() {
                var _this2 = this;

                var notifications = this.get('notifications');
                var emailUrl = this.get('ghostPaths.url').api('mail', 'test');

                this.toggleProperty('submitting');

                this.get('ajax').post(emailUrl).then(function () {
                    notifications.showAlert('Check your email for the test message.', { type: 'info', key: 'test-email.send.success' });
                    _this2.toggleProperty('submitting');
                })['catch'](function (error) {
                    notifications.showAPIError(error, { key: 'test-email:send' });
                    _this2.toggleProperty('submitting');
                });
            },

            toggleDeleteAllModal: function toggleDeleteAllModal() {
                this.toggleProperty('showDeleteAllModal');
            }
        }
    });
});
define('ghost-admin/controllers/settings/navigation', ['exports', 'rsvp', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ghost-admin/mixins/settings-save', 'ghost-admin/models/navigation-item'], function (exports, _rsvp, _emberController, _emberComputed, _emberServiceInject, _ghostAdminMixinsSettingsSave, _ghostAdminModelsNavigationItem) {
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsSettingsSave['default'], {
        config: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        newNavItem: null,

        blogUrl: (0, _emberComputed['default'])('config.blogUrl', function () {
            var url = this.get('config.blogUrl');

            return url.slice(-1) !== '/' ? url + '/' : url;
        }),

        init: function init() {
            this._super.apply(this, arguments);
            this.set('newNavItem', _ghostAdminModelsNavigationItem['default'].create({ isNew: true }));
        },

        save: function save() {
            var _this = this;

            var navItems = this.get('model.navigation');
            var newNavItem = this.get('newNavItem');
            var notifications = this.get('notifications');
            var validationPromises = [];

            if (!newNavItem.get('isBlank')) {
                validationPromises.pushObject(this.send('addItem'));
            }

            navItems.map(function (item) {
                validationPromises.pushObject(item.validate());
            });

            return _rsvp['default'].all(validationPromises).then(function () {
                return _this.get('model').save()['catch'](function (err) {
                    notifications.showAPIError(err);
                });
            })['catch'](function () {
                // TODO: noop - needed to satisfy spinner button
            });
        },

        addNewNavItem: function addNewNavItem() {
            var navItems = this.get('model.navigation');
            var newNavItem = this.get('newNavItem');

            newNavItem.set('isNew', false);
            navItems.pushObject(newNavItem);
            this.set('newNavItem', _ghostAdminModelsNavigationItem['default'].create({ isNew: true }));
        },

        actions: {
            addItem: function addItem() {
                var _this2 = this;

                var newNavItem = this.get('newNavItem');

                // If the url sent through is blank (user never edited the url)
                if (newNavItem.get('url') === '') {
                    newNavItem.set('url', '/');
                }

                return newNavItem.validate().then(function () {
                    _this2.addNewNavItem();
                });
            },

            deleteItem: function deleteItem(item) {
                if (!item) {
                    return;
                }

                var navItems = this.get('model.navigation');

                navItems.removeObject(item);
            },

            reorderItems: function reorderItems(navItems) {
                this.set('model.navigation', navItems);
            },

            updateUrl: function updateUrl(url, navItem) {
                if (!navItem) {
                    return;
                }

                navItem.set('url', url);
            },

            reset: function reset() {
                this.set('newNavItem', _ghostAdminModelsNavigationItem['default'].create({ isNew: true }));
            }
        }
    });
});
define('ghost-admin/controllers/settings/tags', ['exports', 'ember-controller', 'ember-controller/inject', 'ember-computed'], function (exports, _emberController, _emberControllerInject, _emberComputed) {
    exports['default'] = _emberController['default'].extend({

        tagController: (0, _emberControllerInject['default'])('settings.tags.tag'),

        selectedTag: (0, _emberComputed.alias)('tagController.tag'),

        tagListFocused: (0, _emberComputed.equal)('keyboardFocus', 'tagList'),
        tagContentFocused: (0, _emberComputed.equal)('keyboardFocus', 'tagContent'),

        // TODO: replace with ordering by page count once supported by the API
        tags: (0, _emberComputed.sort)('model', function (a, b) {
            var idA = +a.get('id');
            var idB = +b.get('id');

            if (idA > idB) {
                return 1;
            } else if (idA < idB) {
                return -1;
            }

            return 0;
        }),

        actions: {
            leftMobile: function leftMobile() {
                var firstTag = this.get('tags.firstObject');
                // redirect to first tag if possible so that you're not left with
                // tag settings blank slate when switching from portrait to landscape
                if (firstTag && !this.get('tagController.tag')) {
                    this.transitionToRoute('settings.tags.tag', firstTag);
                }
            }
        }

    });
});
define('ghost-admin/controllers/settings/tags/tag', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ember-controller/inject'], function (exports, _emberController, _emberComputed, _emberServiceInject, _emberControllerInject) {
    exports['default'] = _emberController['default'].extend({

        showDeleteTagModal: false,

        tag: (0, _emberComputed.alias)('model'),
        isMobile: (0, _emberComputed.alias)('tagsController.isMobile'),

        applicationController: (0, _emberControllerInject['default'])('application'),
        tagsController: (0, _emberControllerInject['default'])('settings.tags'),
        notifications: (0, _emberServiceInject['default'])(),

        _saveTagProperty: function _saveTagProperty(propKey, newValue) {
            var _this = this;

            var tag = this.get('tag');
            var currentValue = tag.get(propKey);

            newValue = newValue.trim();

            // Quit if there was no change
            if (newValue === currentValue) {
                return;
            }

            tag.set(propKey, newValue);
            // TODO: This is required until .validate/.save mark fields as validated
            tag.get('hasValidated').addObject(propKey);

            tag.save().then(function (savedTag) {
                // replace 'new' route with 'tag' route
                _this.replaceRoute('settings.tags.tag', savedTag);
            })['catch'](function (error) {
                if (error) {
                    _this.get('notifications').showAPIError(error, { key: 'tag.save' });
                }
            });
        },

        _deleteTag: function _deleteTag() {
            var _this2 = this;

            var tag = this.get('tag');

            return tag.destroyRecord().then(function () {
                _this2._deleteTagSuccess();
            }, function (error) {
                _this2._deleteTagFailure(error);
            });
        },

        _deleteTagSuccess: function _deleteTagSuccess() {
            var currentRoute = this.get('applicationController.currentRouteName') || '';

            if (currentRoute.match(/^settings\.tags/)) {
                this.transitionToRoute('settings.tags.index');
            }
        },

        _deleteTagFailure: function _deleteTagFailure(error) {
            this.get('notifications').showAPIError(error, { key: 'tag.delete' });
        },

        actions: {
            setProperty: function setProperty(propKey, value) {
                this._saveTagProperty(propKey, value);
            },

            toggleDeleteTagModal: function toggleDeleteTagModal() {
                this.toggleProperty('showDeleteTagModal');
            },

            deleteTag: function deleteTag() {
                return this._deleteTag();
            }
        }
    });
});
define('ghost-admin/controllers/setup', ['exports', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ember-controller/inject'], function (exports, _emberController, _emberComputed, _emberServiceInject, _emberControllerInject) {
    exports['default'] = _emberController['default'].extend({
        appController: (0, _emberControllerInject['default'])('application'),
        ghostPaths: (0, _emberServiceInject['default'])(),

        showBackLink: (0, _emberComputed.match)('appController.currentRouteName', /^setup\.(two|three)$/),

        backRoute: (0, _emberComputed['default'])('appController.currentRouteName', function () {
            var currentRoute = this.get('appController.currentRouteName');

            return currentRoute === 'setup.two' ? 'setup.one' : 'setup.two';
        })
    });
});
define('ghost-admin/controllers/setup/three', ['exports', 'ember-controller', 'rsvp', 'ember-computed', 'ember-array/utils', 'ember-service/inject', 'ember-controller/inject', 'ember-string', 'ember-runloop', 'ember-data'], function (exports, _emberController, _rsvp, _emberComputed, _emberArrayUtils, _emberServiceInject, _emberControllerInject, _emberString, _emberRunloop, _emberData) {
    var Errors = _emberData['default'].Errors;
    exports['default'] = _emberController['default'].extend({
        notifications: (0, _emberServiceInject['default'])(),
        two: (0, _emberControllerInject['default'])('setup/two'),

        errors: Errors.create(),
        hasValidated: (0, _emberArrayUtils.A)(),
        users: '',
        ownerEmail: (0, _emberComputed.alias)('two.email'),
        submitting: false,

        usersArray: (0, _emberComputed['default'])('users', function () {
            var errors = this.get('errors');
            var users = this.get('users').split('\n').filter(function (email) {
                return email.trim().length > 0;
            });

            // remove "no users to invite" error if we have users
            if (users.uniq().length > 0 && errors.get('users.length') === 1) {
                if (errors.get('users.firstObject').message.match(/no users/i)) {
                    errors.remove('users');
                }
            }

            return users.uniq();
        }),

        validUsersArray: (0, _emberComputed['default'])('usersArray', 'ownerEmail', function () {
            var ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').filter(function (user) {
                return validator.isEmail(user) && user !== ownerEmail;
            });
        }),

        invalidUsersArray: (0, _emberComputed['default'])('usersArray', 'ownerEmail', function () {
            var ownerEmail = this.get('ownerEmail');

            return this.get('usersArray').reject(function (user) {
                return validator.isEmail(user) || user === ownerEmail;
            });
        }),

        validationResult: (0, _emberComputed['default'])('invalidUsersArray', function () {
            var errors = [];

            this.get('invalidUsersArray').forEach(function (user) {
                errors.push({
                    user: user,
                    error: 'email'
                });
            });

            if (errors.length === 0) {
                // ensure we aren't highlighting fields when everything is fine
                this.get('errors').clear();
                return true;
            } else {
                return errors;
            }
        }),

        validate: function validate() {
            var errors = this.get('errors');
            var validationResult = this.get('validationResult');
            var property = 'users';

            errors.clear();

            // If property isn't in the `hasValidated` array, add it to mark that this field can show a validation result
            this.get('hasValidated').addObject(property);

            if (validationResult === true) {
                return true;
            }

            validationResult.forEach(function (error) {
                // Only one error type here so far, but one day the errors might be more detailed
                switch (error.error) {
                    case 'email':
                        errors.add(property, error.user + ' is not a valid email.');
                }
            });

            return false;
        },

        buttonText: (0, _emberComputed['default'])('errors.users', 'validUsersArray', 'invalidUsersArray', function () {
            var usersError = this.get('errors.users.firstObject.message');
            var validNum = this.get('validUsersArray').length;
            var invalidNum = this.get('invalidUsersArray').length;
            var userCount = undefined;

            if (usersError && usersError.match(/no users/i)) {
                return usersError;
            }

            if (invalidNum > 0) {
                userCount = invalidNum === 1 ? 'email address' : 'email addresses';
                return invalidNum + ' invalid ' + userCount;
            }

            if (validNum > 0) {
                userCount = validNum === 1 ? 'user' : 'users';
                userCount = validNum + ' ' + userCount;
            } else {
                userCount = 'some users';
            }

            return 'Invite ' + userCount;
        }),

        buttonClass: (0, _emberComputed['default'])('validationResult', 'usersArray.length', function () {
            if (this.get('validationResult') === true && this.get('usersArray.length') > 0) {
                return 'gh-btn-green';
            } else {
                return 'gh-btn-minor';
            }
        }),

        authorRole: (0, _emberComputed['default'])(function () {
            return this.store.findAll('role', { reload: true }).then(function (roles) {
                return roles.findBy('name', 'Author');
            });
        }),

        _transitionAfterSubmission: function _transitionAfterSubmission() {
            if (!this._hasTransitioned) {
                this._hasTransitioned = true;
                this.transitionToRoute('posts.index');
            }
        },

        actions: {
            validate: function validate() {
                this.validate();
            },

            invite: function invite() {
                var _this = this;

                var users = this.get('usersArray');
                var notifications = this.get('notifications');
                var invitationsString = undefined,
                    submissionTimeout = undefined;

                if (this.validate() && users.length > 0) {
                    this.set('submitting', true);
                    this._hasTransitioned = false;

                    // wait for 4 seconds, otherwise transition anyway
                    submissionTimeout = _emberRunloop['default'].later(this, function () {
                        this._transitionAfterSubmission();
                    }, 4000);

                    this.get('authorRole').then(function (authorRole) {
                        _rsvp['default'].Promise.all(users.map(function (user) {
                            var invite = _this.store.createRecord('invite', {
                                email: user,
                                role: authorRole
                            });

                            return invite.save().then(function () {
                                return {
                                    email: user,
                                    success: invite.get('status') === 'sent'
                                };
                            })['catch'](function () {
                                return {
                                    email: user,
                                    success: false
                                };
                            });
                        })).then(function (invites) {
                            var erroredEmails = [];
                            var successCount = 0;
                            var message = undefined;

                            _emberRunloop['default'].cancel(submissionTimeout);

                            invites.forEach(function (invite) {
                                if (invite.success) {
                                    successCount++;
                                } else {
                                    erroredEmails.push(invite.email);
                                }
                            });

                            if (erroredEmails.length > 0) {
                                invitationsString = erroredEmails.length > 1 ? ' invitations: ' : ' invitation: ';
                                message = 'Failed to send ' + erroredEmails.length + ' ' + invitationsString;
                                message += erroredEmails.join(', ');
                                message += ". Please check your email configuration, see <a href=\'http://support.ghost.org/mail\' target=\'_blank\'>http://support.ghost.org/mail</a> for instructions";

                                message = (0, _emberString.htmlSafe)(message);
                                notifications.showAlert(message, { type: 'error', delayed: successCount > 0, key: 'signup.send-invitations.failed' });
                            }

                            if (successCount > 0) {
                                // pluralize
                                invitationsString = successCount > 1 ? 'invitations' : 'invitation';
                                notifications.showAlert(successCount + ' ' + invitationsString + ' sent!', { type: 'success', delayed: true, key: 'signup.send-invitations.success' });
                            }

                            _this.set('submitting', false);

                            _emberRunloop['default'].schedule('actions', _this, function () {
                                this.send('loadServerNotifications');
                                this._transitionAfterSubmission();
                            });
                        });
                    });
                } else if (users.length === 0) {
                    this.get('errors').add('users', 'No users to invite');
                }
            },

            skipInvite: function skipInvite() {
                this.send('loadServerNotifications');
                this.transitionToRoute('posts.index');
            }
        }
    });
});
define('ghost-admin/controllers/setup/two', ['exports', 'ember-controller', 'rsvp', 'ember-service/inject', 'ember-controller/inject', 'ember-ajax/errors', 'ghost-admin/mixins/validation-engine'], function (exports, _emberController, _rsvp, _emberServiceInject, _emberControllerInject, _emberAjaxErrors, _ghostAdminMixinsValidationEngine) {
    var Promise = _rsvp['default'].Promise;
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        size: 90,
        blogTitle: null,
        name: null,
        email: '',
        password: null,
        image: null,
        blogCreated: false,
        submitting: false,
        flowErrors: '',

        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        application: (0, _emberControllerInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        // ValidationEngine settings
        validationType: 'setup',

        /**
         * Uploads the given data image, then sends the changed user image property to the server
         * @param  {Object} user User object, returned from the 'setup' api call
         * @return {Ember.RSVP.Promise} A promise that takes care of both calls
         */
        sendImage: function sendImage(user) {
            var _this = this;

            var image = this.get('image');

            return new Promise(function (resolve, reject) {
                image.formData = {};
                image.submit().success(function (response) {
                    var usersUrl = _this.get('ghostPaths.url').api('users', user.id.toString());
                    user.image = response;

                    return _this.get('ajax').put(usersUrl, {
                        data: {
                            users: [user]
                        }
                    }).then(resolve)['catch'](reject);
                }).error(reject);
            });
        },

        _handleSaveError: function _handleSaveError(resp) {
            this.toggleProperty('submitting');

            if ((0, _emberAjaxErrors.isInvalidError)(resp)) {
                this.set('flowErrors', resp.errors[0].message);
            } else {
                this.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
            }
        },

        _handleAuthenticationError: function _handleAuthenticationError(error) {
            this.toggleProperty('submitting');
            if (error && error.errors) {
                this.set('flowErrors', error.errors[0].message);
            } else {
                // Connection errors don't return proper status message, only req.body
                this.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'setup.authenticate.failed' });
            }
        },

        afterAuthentication: function afterAuthentication(result) {
            var _this2 = this;

            if (this.get('image')) {
                return this.sendImage(result.users[0]).then(function () {
                    _this2.toggleProperty('submitting');
                    return _this2.transitionToRoute('setup.three');
                })['catch'](function (resp) {
                    _this2.toggleProperty('submitting');
                    _this2.get('notifications').showAPIError(resp, { key: 'setup.blog-details' });
                });
            } else {
                this.toggleProperty('submitting');
                return this.transitionToRoute('setup.three');
            }
        },

        _passwordSetup: function _passwordSetup() {
            var _this3 = this;

            var setupProperties = ['blogTitle', 'name', 'email', 'password'];
            var data = this.getProperties(setupProperties);
            var config = this.get('config');
            var method = this.get('blogCreated') ? 'put' : 'post';

            this.toggleProperty('submitting');
            this.set('flowErrors', '');

            this.get('hasValidated').addObjects(setupProperties);

            return this.validate().then(function () {
                var authUrl = _this3.get('ghostPaths.url').api('authentication', 'setup');

                return _this3.get('ajax')[method](authUrl, {
                    data: {
                        setup: [{
                            name: data.name,
                            email: data.email,
                            password: data.password,
                            blogTitle: data.blogTitle
                        }]
                    }
                }).then(function (result) {
                    config.set('blogTitle', data.blogTitle);

                    // don't try to login again if we are already logged in
                    if (_this3.get('session.isAuthenticated')) {
                        return _this3.afterAuthentication(result);
                    }

                    // Don't call the success handler, otherwise we will be redirected to admin
                    _this3.set('session.skipAuthSuccessHandler', true);

                    return _this3.get('session').authenticate('authenticator:oauth2', _this3.get('email'), _this3.get('password')).then(function () {
                        _this3.set('blogCreated', true);
                        return _this3.afterAuthentication(result);
                    })['catch'](function (error) {
                        _this3._handleAuthenticationError(error);
                    })['finally'](function () {
                        _this3.set('session.skipAuthSuccessHandler', undefined);
                    });
                })['catch'](function (error) {
                    _this3._handleSaveError(error);
                });
            })['catch'](function () {
                _this3.toggleProperty('submitting');
                _this3.set('flowErrors', 'Please fill out the form to setup your blog.');
            });
        },

        // TODO: for OAuth ghost is in the "setup completed" step as soon
        // as a user has been authenticated so we need to use the standard settings
        // update to set the blog title before redirecting
        _oauthSetup: function _oauthSetup() {
            var _this4 = this;

            var blogTitle = this.get('blogTitle');
            var config = this.get('config');

            this.get('hasValidated').addObjects(['blogTitle', 'session']);

            return this.validate().then(function () {
                return _this4.store.queryRecord('setting', { type: 'blog,theme,private' }).then(function (settings) {
                    settings.set('title', blogTitle);

                    return settings.save().then(function (settings) {
                        // update the config so that the blog title shown in
                        // the nav bar is also updated
                        config.set('blogTitle', settings.get('title'));

                        // this.blogCreated is used by step 3 to check if step 2
                        // has been completed
                        _this4.set('blogCreated', true);
                        return _this4.afterAuthentication(settings);
                    })['catch'](function (error) {
                        _this4._handleSaveError(error);
                    });
                })['finally'](function () {
                    _this4.toggleProperty('submitting');
                    _this4.set('session.skipAuthSuccessHandler', undefined);
                });
            });
        },

        actions: {
            preValidate: function preValidate(model) {
                // Only triggers validation if a value has been entered, preventing empty errors on focusOut
                if (this.get(model)) {
                    return this.validate({ property: model });
                }
            },

            setup: function setup() {
                if (this.get('config.ghostOAuth')) {
                    return this._oauthSetup();
                } else {
                    return this._passwordSetup();
                }
            },

            setImage: function setImage(image) {
                this.set('image', image);
            }
        }
    });
});
define('ghost-admin/controllers/signin', ['exports', 'jquery', 'ember-controller', 'ember-service/inject', 'ember-controller/inject', 'ember-array/utils', 'ghost-admin/services/ajax', 'ghost-admin/mixins/validation-engine'], function (exports, _jquery, _emberController, _emberServiceInject, _emberControllerInject, _emberArrayUtils, _ghostAdminServicesAjax, _ghostAdminMixinsValidationEngine) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        submitting: false,
        loggingIn: false,
        authProperties: ['identification', 'password'],

        ajax: (0, _emberServiceInject['default'])(),
        application: (0, _emberControllerInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),

        flowErrors: '',

        // ValidationEngine settings
        validationType: 'signin',

        actions: {
            validateAndAuthenticate: function validateAndAuthenticate() {
                var _this = this;

                var model = this.get('model');
                var authStrategy = 'authenticator:oauth2';

                this.set('flowErrors', '');
                // Manually trigger events for input fields, ensuring legacy compatibility with
                // browsers and password managers that don't send proper events on autofill
                (0, _jquery['default'])('#login').find('input').trigger('change');

                // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'signin'
                this.get('hasValidated').addObjects(this.authProperties);
                this.validate({ property: 'signin' }).then(function () {
                    _this.toggleProperty('loggingIn');
                    _this.send('authenticate', authStrategy, [model.get('identification'), model.get('password')]);
                })['catch'](function () {
                    _this.set('flowErrors', 'Please fill out the form to sign in.');
                });
            },

            forgotten: function forgotten() {
                var _this2 = this;

                var email = this.get('model.identification');
                var notifications = this.get('notifications');

                this.set('flowErrors', '');
                // This is a bit dirty, but there's no other way to ensure the properties are set as well as 'forgotPassword'
                this.get('hasValidated').addObject('identification');
                this.validate({ property: 'forgotPassword' }).then(function () {
                    var forgottenUrl = _this2.get('ghostPaths.url').api('authentication', 'passwordreset');
                    _this2.toggleProperty('submitting');

                    _this2.get('ajax').post(forgottenUrl, {
                        data: {
                            passwordreset: [{ email: email }]
                        }
                    }).then(function () {
                        _this2.toggleProperty('submitting');
                        notifications.showAlert('Please check your email for instructions.', { type: 'info', key: 'forgot-password.send.success' });
                    })['catch'](function (error) {
                        _this2.toggleProperty('submitting');

                        if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)) {
                            return notifications.showAPIError(error);
                        }

                        if (error && error.errors && (0, _emberArrayUtils.isEmberArray)(error.errors)) {
                            var _error$errors = _slicedToArray(error.errors, 1);

                            var message = _error$errors[0].message;

                            _this2.set('flowErrors', message);

                            if (message.match(/no user with that email/)) {
                                _this2.get('model.errors').add('identification', '');
                            }
                        } else {
                            notifications.showAPIError(error, { defaultErrorText: 'There was a problem with the reset, please try again.', key: 'forgot-password.send' });
                        }
                    });
                })['catch'](function () {
                    _this2.set('flowErrors', 'We need your email address to reset your password!');
                });
            }
        }
    });
});
define('ghost-admin/controllers/signup', ['exports', 'ember-controller', 'rsvp', 'ember-service/inject', 'ember-array/utils', 'ghost-admin/mixins/validation-engine', 'ghost-admin/services/ajax'], function (exports, _emberController, _rsvp, _emberServiceInject, _emberArrayUtils, _ghostAdminMixinsValidationEngine, _ghostAdminServicesAjax) {
    var Promise = _rsvp['default'].Promise;
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        // ValidationEngine settings
        validationType: 'signup',

        submitting: false,
        flowErrors: '',
        image: null,

        ghostPaths: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        sendImage: function sendImage() {
            var _this = this;

            var image = this.get('image');

            this.get('session.user').then(function (user) {
                return new Promise(function (resolve, reject) {
                    image.formData = {};
                    image.submit().success(function (response) {
                        var usersUrl = _this.get('ghostPaths.url').api('users', user.id.toString());
                        user.image = response;
                        _this.get('ajax').put(usersUrl, {
                            data: {
                                users: [user]
                            }
                        }).then(resolve)['catch'](reject);
                    }).error(reject);
                });
            });
        },

        actions: {
            signup: function signup() {
                var _this2 = this;

                var model = this.get('model');
                var setupProperties = ['name', 'email', 'password', 'token'];
                var data = model.getProperties(setupProperties);
                var image = this.get('image');
                var notifications = this.get('notifications');

                this.set('flowErrors', '');

                this.get('hasValidated').addObjects(setupProperties);
                return this.validate().then(function () {
                    var authUrl = _this2.get('ghostPaths.url').api('authentication', 'invitation');
                    _this2.toggleProperty('submitting');
                    return _this2.get('ajax').post(authUrl, {
                        dataType: 'json',
                        data: {
                            invitation: [{
                                name: data.name,
                                email: data.email,
                                password: data.password,
                                token: data.token
                            }]
                        }
                    }).then(function () {
                        return _this2.get('session').authenticate('authenticator:oauth2', _this2.get('model.email'), _this2.get('model.password')).then(function () {
                            if (image) {
                                _this2.sendImage();
                            }
                        })['catch'](function (resp) {
                            notifications.showAPIError(resp, { key: 'signup.complete' });
                        });
                    })['catch'](function (error) {
                        _this2.toggleProperty('submitting');

                        if (error && error.errors && (0, _emberArrayUtils.isEmberArray)(error.errors)) {
                            if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)) {
                                notifications.showAPIError(error);
                            }
                            _this2.set('flowErrors', error.errors[0].message);
                        } else {
                            notifications.showAPIError(error, { key: 'signup.complete' });
                        }
                    });
                })['catch'](function () {
                    _this2.set('flowErrors', 'Please fill out the form to complete your sign-up');
                });
            },

            setImage: function setImage(image) {
                this.set('image', image);
            }
        }
    });
});
define('ghost-admin/controllers/subscribers', ['exports', 'jquery', 'ember-platform', 'ember-computed', 'ember-service/inject', 'ember-controller', 'ember-light-table', 'ghost-admin/mixins/pagination', 'ghost-admin/utils/ghost-paths'], function (exports, _jquery, _emberPlatform, _emberComputed, _emberServiceInject, _emberController, _emberLightTable, _ghostAdminMixinsPagination, _ghostAdminUtilsGhostPaths) {
    exports['default'] = _emberController['default'].extend(_ghostAdminMixinsPagination['default'], {

        queryParams: ['order', 'direction'],
        order: 'created_at',
        direction: 'desc',

        paginationModel: 'subscriber',

        total: 0,
        table: null,
        subscriberToDelete: null,

        session: (0, _emberServiceInject['default'])(),

        // paginationSettings is replaced by the pagination mixin so we need a
        // getter/setter CP here so that we don't lose the dynamic order param
        paginationSettings: (0, _emberComputed['default'])('order', 'direction', {
            get: function get() {
                var order = this.get('order');
                var direction = this.get('direction');

                var currentSettings = this._paginationSettings || {
                    limit: 30
                };

                return (0, _emberPlatform.assign)({}, currentSettings, {
                    order: order + ' ' + direction
                });
            },
            set: function set(key, value) {
                this._paginationSettings = value;
                return value;
            }
        }),

        columns: (0, _emberComputed['default'])('order', 'direction', function () {
            var order = this.get('order');
            var direction = this.get('direction');

            return [{
                label: 'Email address',
                valuePath: 'email',
                sorted: order === 'email',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-email-cell'],
                cellClassNames: ['gh-subscribers-table-email-cell']
            }, {
                label: 'Subscription Date',
                valuePath: 'createdAtUTC',
                format: function format(value) {
                    return value.format('MMMM DD, YYYY');
                },
                sorted: order === 'created_at',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-date-cell'],
                cellClassNames: ['gh-subscribers-table-date-cell']
            }, {
                label: 'Status',
                valuePath: 'status',
                sorted: order === 'status',
                ascending: direction === 'asc',
                classNames: ['gh-subscribers-table-status-cell'],
                cellClassNames: ['gh-subscribers-table-status-cell']
            }, {
                label: '',
                sortable: false,
                cellComponent: 'gh-subscribers-table-delete-cell',
                align: 'right',
                classNames: ['gh-subscribers-table-delete-cell'],
                cellClassNames: ['gh-subscribers-table-delete-cell']
            }];
        }),

        initializeTable: function initializeTable() {
            this.set('table', new _emberLightTable['default'](this.get('columns'), this.get('subscribers')));
        },

        // capture the total from the server any time we fetch a new page
        didReceivePaginationMeta: function didReceivePaginationMeta(meta) {
            if (meta && meta.pagination) {
                this.set('total', meta.pagination.total);
            }
        },

        actions: {
            loadFirstPage: function loadFirstPage() {
                var table = this.get('table');

                return this._super.apply(this, arguments).then(function (results) {
                    table.addRows(results);
                    return results;
                });
            },

            loadNextPage: function loadNextPage() {
                var table = this.get('table');

                return this._super.apply(this, arguments).then(function (results) {
                    table.addRows(results);
                    return results;
                });
            },

            sortByColumn: function sortByColumn(column) {
                var table = this.get('table');

                if (column.sorted) {
                    this.setProperties({
                        order: column.get('valuePath').trim().replace(/UTC$/, '').underscore(),
                        direction: column.ascending ? 'asc' : 'desc'
                    });
                    table.setRows([]);
                    this.send('loadFirstPage');
                }
            },

            addSubscriber: function addSubscriber(subscriber) {
                this.get('table').insertRowAt(0, subscriber);
                this.incrementProperty('total');
            },

            deleteSubscriber: function deleteSubscriber(subscriber) {
                this.set('subscriberToDelete', subscriber);
            },

            confirmDeleteSubscriber: function confirmDeleteSubscriber() {
                var _this = this;

                var subscriber = this.get('subscriberToDelete');

                return subscriber.destroyRecord().then(function () {
                    _this.set('subscriberToDelete', null);
                    _this.get('table').removeRow(subscriber);
                    _this.decrementProperty('total');
                });
            },

            cancelDeleteSubscriber: function cancelDeleteSubscriber() {
                this.set('subscriberToDelete', null);
            },

            reset: function reset() {
                this.get('table').setRows([]);
                this.send('loadFirstPage');
            },

            exportData: function exportData() {
                var exportUrl = (0, _ghostAdminUtilsGhostPaths['default'])().url.api('subscribers/csv');
                var accessToken = this.get('session.data.authenticated.access_token');
                var downloadURL = exportUrl + '?access_token=' + accessToken;
                var iframe = (0, _jquery['default'])('#iframeDownload');

                if (iframe.length === 0) {
                    iframe = (0, _jquery['default'])('<iframe>', { id: 'iframeDownload' }).hide().appendTo('body');
                }

                iframe.attr('src', downloadURL);
            }
        }
    });
});
define('ghost-admin/controllers/team/index', ['exports', 'ember-controller', 'ember-service/inject', 'ember-computed'], function (exports, _emberController, _emberServiceInject, _emberComputed) {
    exports['default'] = _emberController['default'].extend({

        showInviteUserModal: false,

        users: null,
        invites: null,

        session: (0, _emberServiceInject['default'])(),

        inviteOrder: ['email'],
        sortedInvites: (0, _emberComputed.sort)('invites', 'inviteOrder'),

        actions: {
            toggleInviteUserModal: function toggleInviteUserModal() {
                this.toggleProperty('showInviteUserModal');
            }
        }
    });
});
define('ghost-admin/controllers/team/user', ['exports', 'ember', 'ember-controller', 'ember-computed', 'ember-service/inject', 'ember-string', 'ember-runloop', 'ember-array/utils', 'ember-concurrency', 'ghost-admin/utils/isNumber', 'ghost-admin/utils/bound-one-way'], function (exports, _ember, _emberController, _emberComputed, _emberServiceInject, _emberString, _emberRunloop, _emberArrayUtils, _emberConcurrency, _ghostAdminUtilsIsNumber, _ghostAdminUtilsBoundOneWay) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    // ember-cli-shims doesn't export this
    var Handlebars = _ember['default'].Handlebars;
    exports['default'] = _emberController['default'].extend({
        showDeleteUserModal: false,
        showTransferOwnerModal: false,
        showUploadCoverModal: false,
        showUplaodImageModal: false,
        _scratchFacebook: null,
        _scratchTwitter: null,

        ajax: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        dropdown: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        slugGenerator: (0, _emberServiceInject['default'])(),

        user: (0, _emberComputed.alias)('model'),
        currentUser: (0, _emberComputed.alias)('session.user'),

        email: (0, _emberComputed.readOnly)('model.email'),
        slugValue: (0, _ghostAdminUtilsBoundOneWay['default'])('model.slug'),

        isNotOwnersProfile: (0, _emberComputed.not)('user.isOwner'),
        isAdminUserOnOwnerProfile: (0, _emberComputed.and)('currentUser.isAdmin', 'user.isOwner'),
        canAssignRoles: (0, _emberComputed.or)('currentUser.isAdmin', 'currentUser.isOwner'),
        canMakeOwner: (0, _emberComputed.and)('currentUser.isOwner', 'isNotOwnProfile', 'user.isAdmin'),
        rolesDropdownIsVisible: (0, _emberComputed.and)('isNotOwnProfile', 'canAssignRoles', 'isNotOwnersProfile'),
        userActionsAreVisible: (0, _emberComputed.or)('deleteUserActionIsVisible', 'canMakeOwner'),

        isNotOwnProfile: (0, _emberComputed['default'])('user.id', 'currentUser.id', function () {
            return this.get('user.id') !== this.get('currentUser.id');
        }),

        deleteUserActionIsVisible: (0, _emberComputed['default'])('currentUser', 'canAssignRoles', 'user', function () {
            if (this.get('canAssignRoles') && this.get('isNotOwnProfile') && !this.get('user.isOwner') || this.get('currentUser.isEditor') && (this.get('isNotOwnProfile') || this.get('user.isAuthor'))) {
                return true;
            }
        }),

        canChangePassword: (0, _emberComputed['default'])('config.ghostOAuth', 'isAdminUserOnOwnerProfile', function () {
            return !this.get('config.ghostOAuth') && !this.get('isAdminUserOnOwnerProfile');
        }),

        // duplicated in gh-user-active -- find a better home and consolidate?
        userDefault: (0, _emberComputed['default'])('ghostPaths', function () {
            return this.get('ghostPaths.assetRoot') + '/img/user-image.png';
        }),

        userImageBackground: (0, _emberComputed['default'])('user.image', 'userDefault', function () {
            var url = this.get('user.image') || this.get('userDefault');
            var safeUrl = Handlebars.Utils.escapeExpression(url);

            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),
        // end duplicated

        coverDefault: (0, _emberComputed['default'])('ghostPaths', function () {
            return this.get('ghostPaths.assetRoot') + '/img/user-cover.png';
        }),

        coverImageBackground: (0, _emberComputed['default'])('user.cover', 'coverDefault', function () {
            var url = this.get('user.cover') || this.get('coverDefault');
            var safeUrl = Handlebars.Utils.escapeExpression(url);

            return (0, _emberString.htmlSafe)('background-image: url(' + safeUrl + ')');
        }),

        coverTitle: (0, _emberComputed['default'])('user.name', function () {
            return this.get('user.name') + '\'s Cover Image';
        }),

        roles: (0, _emberComputed['default'])(function () {
            return this.store.query('role', { permissions: 'assign' });
        }),

        _deleteUser: function _deleteUser() {
            if (this.get('deleteUserActionIsVisible')) {
                var user = this.get('user');
                return user.destroyRecord();
            }
        },

        _deleteUserSuccess: function _deleteUserSuccess() {
            this.get('notifications').closeAlerts('user.delete');
            this.store.unloadAll('post');
            this.transitionToRoute('team');
        },

        _deleteUserFailure: function _deleteUserFailure() {
            this.get('notifications').showAlert('The user could not be deleted. Please try again.', { type: 'error', key: 'user.delete.failed' });
        },

        saveHandlers: (0, _emberConcurrency.taskGroup)().enqueue(),

        updateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(newSlug) {
            var slug, serverSlug, slugTokens, check;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        slug = this.get('model.slug');

                        newSlug = newSlug || slug;
                        newSlug = newSlug.trim();

                        // Ignore unchanged slugs or candidate slugs that are empty

                        if (!(!newSlug || slug === newSlug)) {
                            context$1$0.next = 6;
                            break;
                        }

                        this.set('slugValue', slug);

                        return context$1$0.abrupt('return');

                    case 6:
                        context$1$0.next = 8;
                        return this.get('slugGenerator').generateSlug('user', newSlug);

                    case 8:
                        serverSlug = context$1$0.sent;

                        if (!(serverSlug === slug)) {
                            context$1$0.next = 11;
                            break;
                        }

                        return context$1$0.abrupt('return');

                    case 11:
                        slugTokens = serverSlug.split('-');
                        check = Number(slugTokens.pop());

                        if (!((0, _ghostAdminUtilsIsNumber['default'])(check) && check > 0)) {
                            context$1$0.next = 17;
                            break;
                        }

                        if (!(slug === slugTokens.join('-') && serverSlug !== newSlug)) {
                            context$1$0.next = 17;
                            break;
                        }

                        this.set('slugValue', slug);

                        return context$1$0.abrupt('return');

                    case 17:

                        this.set('slugValue', serverSlug);

                    case 18:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).group('saveHandlers'),

        save: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var user, slugValue, slugChanged, model, currentPath, newPath;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        user = this.get('user');
                        slugValue = this.get('slugValue');
                        slugChanged = undefined;

                        if (user.get('slug') !== slugValue) {
                            slugChanged = true;
                            user.set('slug', slugValue);
                        }

                        context$1$0.prev = 4;
                        context$1$0.next = 7;
                        return user.save({ format: false });

                    case 7:
                        model = context$1$0.sent;
                        currentPath = undefined, newPath = undefined;

                        // If the user's slug has changed, change the URL and replace
                        // the history so refresh and back button still work
                        if (slugChanged) {
                            currentPath = window.history.state.path;

                            newPath = currentPath.split('/');
                            newPath[newPath.length - 2] = model.get('slug');
                            newPath = newPath.join('/');

                            window.history.replaceState({ path: newPath }, '', newPath);
                        }

                        this.toggleProperty('submitting');
                        this.get('notifications').closeAlerts('user.update');

                        return context$1$0.abrupt('return', model);

                    case 15:
                        context$1$0.prev = 15;
                        context$1$0.t0 = context$1$0['catch'](4);

                        // validation engine returns undefined so we have to check
                        // before treating the failure as an API error
                        if (context$1$0.t0) {
                            this.get('notifications').showAPIError(context$1$0.t0, { key: 'user.update' });
                        }

                    case 18:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[4, 15]]);
        })).group('saveHandlers'),

        actions: {
            changeRole: function changeRole(newRole) {
                this.set('model.role', newRole);
            },

            deleteUser: function deleteUser() {
                var _this = this;

                return this._deleteUser().then(function () {
                    _this._deleteUserSuccess();
                }, function () {
                    _this._deleteUserFailure();
                });
            },

            toggleDeleteUserModal: function toggleDeleteUserModal() {
                if (this.get('deleteUserActionIsVisible')) {
                    this.toggleProperty('showDeleteUserModal');
                }
            },

            validateFacebookUrl: function validateFacebookUrl() {
                var _this2 = this;

                var newUrl = this.get('_scratchFacebook');
                var oldUrl = this.get('user.facebook');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Facebook url
                    this.set('user.facebook', '');
                    this.get('user.errors').remove('facebook');
                    return;
                }

                // _scratchFacebook will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('user.errors').remove('facebook');
                    return;
                }

                // TODO: put the validation here into a validator
                if (newUrl.match(/(?:facebook\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:facebook\.com\/)(\S+)/)) {
                        var _newUrl$match = newUrl.match(/(?:facebook\.com\/)(\S+)/);

                        var _newUrl$match2 = _slicedToArray(_newUrl$match, 2);

                        username = _newUrl$match2[1];
                    } else {
                        var _newUrl$match3 = newUrl.match(/(?:https\:\/\/|http\:\/\/)?(?:www\.)?(?:\w+\.\w+\/+)?(\S+)/mi);

                        var _newUrl$match32 = _slicedToArray(_newUrl$match3, 2);

                        username = _newUrl$match32[1];
                    }

                    // check if we have a /page/username or without
                    if (username.match(/^(?:\/)?(pages?\/\S+)/mi)) {
                        var _username$match = username.match(/^(?:\/)?(pages?\/\S+)/mi);

                        // we got a page url, now save the username without the / in the beginning

                        var _username$match2 = _slicedToArray(_username$match, 2);

                        username = _username$match2[1];
                    } else if (username.match(/^(http|www)|(\/)/) || !username.match(/^([a-z\d\.]{5,50})$/mi)) {
                        errMessage = !username.match(/^([a-z\d\.]{5,50})$/mi) ? 'Your Username is not a valid Facebook Username' : 'The URL must be in a format like https://www.facebook.com/yourUsername';

                        this.get('user.errors').add('facebook', errMessage);
                        this.get('user.hasValidated').pushObject('facebook');
                        return;
                    }

                    newUrl = 'https://www.facebook.com/' + username;
                    this.set('user.facebook', newUrl);

                    this.get('user.errors').remove('facebook');
                    this.get('user.hasValidated').pushObject('facebook');

                    // User input is validated
                    this.get('save').perform().then(function () {
                        // necessary to update the value in the input field
                        _this2.set('user.facebook', '');
                        _emberRunloop['default'].schedule('afterRender', _this2, function () {
                            this.set('user.facebook', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://www.facebook.com/yourUsername';
                    this.get('user.errors').add('facebook', errMessage);
                    this.get('user.hasValidated').pushObject('facebook');
                    return;
                }
            },

            validateTwitterUrl: function validateTwitterUrl() {
                var _this3 = this;

                var newUrl = this.get('_scratchTwitter');
                var oldUrl = this.get('user.twitter');
                var errMessage = '';

                if (newUrl === '') {
                    // Clear out the Twitter url
                    this.set('user.twitter', '');
                    this.get('user.errors').remove('twitter');
                    return;
                }

                // _scratchTwitter will be null unless the user has input something
                if (!newUrl) {
                    newUrl = oldUrl;
                }

                // If new url didn't change, exit
                if (newUrl === oldUrl) {
                    this.get('user.errors').remove('twitter');
                    return;
                }

                // TODO: put the validation here into a validator
                if (newUrl.match(/(?:twitter\.com\/)(\S+)/) || newUrl.match(/([a-z\d\.]+)/i)) {
                    var username = [];

                    if (newUrl.match(/(?:twitter\.com\/)(\S+)/)) {
                        var _newUrl$match4 = newUrl.match(/(?:twitter\.com\/)(\S+)/);

                        var _newUrl$match42 = _slicedToArray(_newUrl$match4, 2);

                        username = _newUrl$match42[1];
                    } else {
                        var _newUrl$match5 = newUrl.match(/([^/]+)\/?$/mi);

                        var _newUrl$match52 = _slicedToArray(_newUrl$match5, 1);

                        username = _newUrl$match52[0];
                    }

                    // check if username starts with http or www and show error if so
                    if (username.match(/^(http|www)|(\/)/) || !username.match(/^[a-z\d\.\_]{1,15}$/mi)) {
                        errMessage = !username.match(/^[a-z\d\.\_]{1,15}$/mi) ? 'Your Username is not a valid Twitter Username' : 'The URL must be in a format like https://twitter.com/yourUsername';

                        this.get('user.errors').add('twitter', errMessage);
                        this.get('user.hasValidated').pushObject('twitter');
                        return;
                    }

                    newUrl = 'https://twitter.com/' + username;
                    this.set('user.twitter', newUrl);

                    this.get('user.errors').remove('twitter');
                    this.get('user.hasValidated').pushObject('twitter');

                    // User input is validated
                    this.get('save').perform().then(function () {
                        // necessary to update the value in the input field
                        _this3.set('user.twitter', '');
                        _emberRunloop['default'].schedule('afterRender', _this3, function () {
                            this.set('user.twitter', newUrl);
                        });
                    });
                } else {
                    errMessage = 'The URL must be in a format like ' + 'https://twitter.com/yourUsername';
                    this.get('user.errors').add('twitter', errMessage);
                    this.get('user.hasValidated').pushObject('twitter');
                    return;
                }
            },

            transferOwnership: function transferOwnership() {
                var _this4 = this;

                var user = this.get('user');
                var url = this.get('ghostPaths.url').api('users', 'owner');

                this.get('dropdown').closeDropdowns();

                return this.get('ajax').put(url, {
                    data: {
                        owner: [{
                            id: user.get('id')
                        }]
                    }
                }).then(function (response) {
                    // manually update the roles for the users that just changed roles
                    // because store.pushPayload is not working with embedded relations
                    if (response && (0, _emberArrayUtils.isEmberArray)(response.users)) {
                        response.users.forEach(function (userJSON) {
                            var user = _this4.store.peekRecord('user', userJSON.id);
                            var role = _this4.store.peekRecord('role', userJSON.roles[0].id);

                            user.set('role', role);
                        });
                    }

                    _this4.get('notifications').showAlert('Ownership successfully transferred to ' + user.get('name'), { type: 'success', key: 'owner.transfer.success' });
                })['catch'](function (error) {
                    _this4.get('notifications').showAPIError(error, { key: 'owner.transfer' });
                });
            },

            toggleTransferOwnerModal: function toggleTransferOwnerModal() {
                if (this.get('canMakeOwner')) {
                    this.toggleProperty('showTransferOwnerModal');
                }
            },

            toggleUploadCoverModal: function toggleUploadCoverModal() {
                this.toggleProperty('showUploadCoverModal');
            },

            toggleUploadImageModal: function toggleUploadImageModal() {
                this.toggleProperty('showUploadImageModal');
            },

            // TODO: remove those mutation actions once we have better
            // inline validations that auto-clear errors on input
            updatePassword: function updatePassword(password) {
                this.set('user.password', password);
                this.get('user.hasValidated').removeObject('password');
                this.get('user.errors').remove('password');
            },

            updateNewPassword: function updateNewPassword(password) {
                this.set('user.newPassword', password);
                this.get('user.hasValidated').removeObject('newPassword');
                this.get('user.errors').remove('newPassword');
            },

            updateNe2Password: function updateNe2Password(password) {
                this.set('user.ne2Password', password);
                this.get('user.hasValidated').removeObject('ne2Password');
                this.get('user.errors').remove('ne2Password');
            }
        }
    });
});

// If after getting the sanitized and unique slug back from the API
// we end up with a slug that matches the existing slug, abort the change

// Because the server transforms the candidate slug by stripping
// certain characters and appending a number onto the end of slugs
// to enforce uniqueness, there are cases where we can get back a
// candidate slug that is a duplicate of the original except for
// the trailing incrementor (e.g., this-is-a-slug and this-is-a-slug-2)

// get the last token out of the slug candidate and see if it's a number

// if the candidate slug is the same as the existing slug except
// for the incrementor then the existing slug should be used
define('ghost-admin/helpers/and', ['exports', 'ember', 'ember-truth-helpers/helpers/and'], function (exports, _ember, _emberTruthHelpersHelpersAnd) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersAnd.andHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersAnd.andHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/app-version', ['exports', 'ember', 'ghost-admin/config/environment'], function (exports, _ember, _ghostAdminConfigEnvironment) {
  exports.appVersion = appVersion;
  var version = _ghostAdminConfigEnvironment['default'].APP.version;

  function appVersion() {
    return version;
  }

  exports['default'] = _ember['default'].Helper.helper(appVersion);
});
define('ghost-admin/helpers/append', ['exports', 'ember-composable-helpers/helpers/append'], function (exports, _emberComposableHelpersHelpersAppend) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersAppend['default'];
    }
  });
  Object.defineProperty(exports, 'append', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersAppend.append;
    }
  });
});
define('ghost-admin/helpers/array', ['exports', 'ember-composable-helpers/helpers/array'], function (exports, _emberComposableHelpersHelpersArray) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersArray['default'];
    }
  });
  Object.defineProperty(exports, 'array', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersArray.array;
    }
  });
});
define('ghost-admin/helpers/camelize', ['exports', 'ember-composable-helpers/helpers/camelize'], function (exports, _emberComposableHelpersHelpersCamelize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCamelize['default'];
    }
  });
  Object.defineProperty(exports, 'camelize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCamelize.camelize;
    }
  });
});
define('ghost-admin/helpers/cancel-all', ['exports', 'ember', 'ember-concurrency/-helpers'], function (exports, _ember, _emberConcurrencyHelpers) {
  exports.cancelHelper = cancelHelper;

  function cancelHelper(args) {
    var cancelable = args[0];
    if (!cancelable || typeof cancelable.cancelAll !== 'function') {
      _ember['default'].assert('The first argument passed to the `cancel-all` helper should be a Task or TaskGroup (without quotes); you passed ' + cancelable, false);
    }

    return (0, _emberConcurrencyHelpers.taskHelperClosure)('cancelAll', args);
  }

  exports['default'] = _ember['default'].Helper.helper(cancelHelper);
});
define('ghost-admin/helpers/capitalize', ['exports', 'ember-composable-helpers/helpers/capitalize'], function (exports, _emberComposableHelpersHelpersCapitalize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCapitalize['default'];
    }
  });
  Object.defineProperty(exports, 'capitalize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCapitalize.capitalize;
    }
  });
});
define('ghost-admin/helpers/chunk', ['exports', 'ember-composable-helpers/helpers/chunk'], function (exports, _emberComposableHelpersHelpersChunk) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersChunk['default'];
    }
  });
  Object.defineProperty(exports, 'chunk', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersChunk.chunk;
    }
  });
});
define('ghost-admin/helpers/classify', ['exports', 'ember-composable-helpers/helpers/classify'], function (exports, _emberComposableHelpersHelpersClassify) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersClassify['default'];
    }
  });
  Object.defineProperty(exports, 'classify', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersClassify.classify;
    }
  });
});
define('ghost-admin/helpers/compact', ['exports', 'ember-composable-helpers/helpers/compact'], function (exports, _emberComposableHelpersHelpersCompact) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompact['default'];
    }
  });
  Object.defineProperty(exports, 'compact', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompact.compact;
    }
  });
});
define('ghost-admin/helpers/compute', ['exports', 'ember-composable-helpers/helpers/compute'], function (exports, _emberComposableHelpersHelpersCompute) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompute['default'];
    }
  });
  Object.defineProperty(exports, 'compute', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersCompute.compute;
    }
  });
});
define('ghost-admin/helpers/contains', ['exports', 'ember-composable-helpers/helpers/contains'], function (exports, _emberComposableHelpersHelpersContains) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersContains['default'];
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersContains.contains;
    }
  });
});
define('ghost-admin/helpers/dasherize', ['exports', 'ember-composable-helpers/helpers/dasherize'], function (exports, _emberComposableHelpersHelpersDasherize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDasherize['default'];
    }
  });
  Object.defineProperty(exports, 'dasherize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDasherize.dasherize;
    }
  });
});
define('ghost-admin/helpers/dec', ['exports', 'ember-composable-helpers/helpers/dec'], function (exports, _emberComposableHelpersHelpersDec) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDec['default'];
    }
  });
  Object.defineProperty(exports, 'dec', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDec.dec;
    }
  });
});
define('ghost-admin/helpers/drop', ['exports', 'ember-composable-helpers/helpers/drop'], function (exports, _emberComposableHelpersHelpersDrop) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDrop['default'];
    }
  });
  Object.defineProperty(exports, 'drop', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersDrop.drop;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-is-group', ['exports', 'ember-power-select/helpers/ember-power-select-is-group'], function (exports, _emberPowerSelectHelpersEmberPowerSelectIsGroup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsGroup['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsGroup', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsGroup.emberPowerSelectIsGroup;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-is-selected', ['exports', 'ember-power-select/helpers/ember-power-select-is-selected'], function (exports, _emberPowerSelectHelpersEmberPowerSelectIsSelected) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsSelected['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectIsSelected', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectIsSelected.emberPowerSelectIsSelected;
    }
  });
});
define('ghost-admin/helpers/ember-power-select-true-string-if-present', ['exports', 'ember-power-select/helpers/ember-power-select-true-string-if-present'], function (exports, _emberPowerSelectHelpersEmberPowerSelectTrueStringIfPresent) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectTrueStringIfPresent['default'];
    }
  });
  Object.defineProperty(exports, 'emberPowerSelectTrueStringIfPresent', {
    enumerable: true,
    get: function get() {
      return _emberPowerSelectHelpersEmberPowerSelectTrueStringIfPresent.emberPowerSelectTrueStringIfPresent;
    }
  });
});
define('ghost-admin/helpers/eq', ['exports', 'ember', 'ember-truth-helpers/helpers/equal'], function (exports, _ember, _emberTruthHelpersHelpersEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersEqual.equalHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersEqual.equalHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/filter-by', ['exports', 'ember-composable-helpers/helpers/filter-by'], function (exports, _emberComposableHelpersHelpersFilterBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilterBy['default'];
    }
  });
  Object.defineProperty(exports, 'filterBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilterBy.filterBy;
    }
  });
});
define('ghost-admin/helpers/filter', ['exports', 'ember-composable-helpers/helpers/filter'], function (exports, _emberComposableHelpersHelpersFilter) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilter['default'];
    }
  });
  Object.defineProperty(exports, 'filter', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFilter.filter;
    }
  });
});
define('ghost-admin/helpers/find-by', ['exports', 'ember-composable-helpers/helpers/find-by'], function (exports, _emberComposableHelpersHelpersFindBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFindBy['default'];
    }
  });
  Object.defineProperty(exports, 'findBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFindBy.findBy;
    }
  });
});
define('ghost-admin/helpers/flatten', ['exports', 'ember-composable-helpers/helpers/flatten'], function (exports, _emberComposableHelpersHelpersFlatten) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFlatten['default'];
    }
  });
  Object.defineProperty(exports, 'flatten', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersFlatten.flatten;
    }
  });
});
define('ghost-admin/helpers/gh-count-characters', ['exports', 'ember-helper', 'ember-string'], function (exports, _emberHelper, _emberString) {
    exports.countCharacters = countCharacters;

    function countCharacters(params) {
        if (!params || !params.length) {
            return;
        }

        var el = document.createElement('span');
        var content = params[0] || '';

        // convert to array so that we get accurate symbol counts for multibyte chars
        // this will still count emoji+modifer as two chars

        var _Array$from = Array.from(content);

        var length = _Array$from.length;

        el.className = 'word-count';

        if (length > 180) {
            el.style.color = '#E25440';
        } else {
            el.style.color = '#9E9D95';
        }

        el.innerHTML = 200 - length;

        return (0, _emberString.htmlSafe)(el.outerHTML);
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return countCharacters(params);
    });
});
define('ghost-admin/helpers/gh-count-down-characters', ['exports', 'ember-helper', 'ember-string'], function (exports, _emberHelper, _emberString) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.countDownCharacters = countDownCharacters;

    function countDownCharacters(params) {
        if (!params || params.length < 2) {
            return;
        }

        var el = document.createElement('span');

        var _params = _slicedToArray(params, 2);

        var content = _params[0];
        var maxCharacters = _params[1];

        // convert to array so that we get accurate symbol counts for multibyte chars
        // this will still count emoji+modifer as two chars

        var _Array$from = Array.from(content || '');

        var length = _Array$from.length;

        el.className = 'word-count';

        if (length > maxCharacters) {
            el.style.color = '#E25440';
        } else {
            el.style.color = '#9FBB58';
        }

        el.innerHTML = length;

        return (0, _emberString.htmlSafe)(el.outerHTML);
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return countDownCharacters(params);
    });
});
define('ghost-admin/helpers/gh-count-words', ['exports', 'ember-helper', 'ghost-admin/utils/word-count'], function (exports, _emberHelper, _ghostAdminUtilsWordCount) {
    exports['default'] = (0, _emberHelper.helper)(function (params) {
        if (!params || !params.length) {
            return;
        }

        var markdown = params[0] || '';

        if (/^\s*$/.test(markdown)) {
            return '0 words';
        }

        var count = (0, _ghostAdminUtilsWordCount['default'])(markdown);

        return count + (count === 1 ? ' word' : ' words');
    });
});
define('ghost-admin/helpers/gh-format-html', ['exports', 'ember-helper', 'ember-string', 'ghost-admin/utils/caja-sanitizers'], function (exports, _emberHelper, _emberString, _ghostAdminUtilsCajaSanitizers) {
    exports['default'] = (0, _emberHelper.helper)(function (params) {
        if (!params || !params.length) {
            return;
        }

        var escapedhtml = params[0] || '';

        // replace script and iFrame
        escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
        escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');

        // sanitize HTML
        /* eslint-disable camelcase */
        escapedhtml = html_sanitize(escapedhtml, _ghostAdminUtilsCajaSanitizers['default'].url, _ghostAdminUtilsCajaSanitizers['default'].id);
        /* eslint-enable camelcase */

        return (0, _emberString.htmlSafe)(escapedhtml);
    });
});
/* global html_sanitize*/
define('ghost-admin/helpers/gh-format-markdown', ['exports', 'ember-helper', 'ember-string', 'ghost-admin/utils/caja-sanitizers'], function (exports, _emberHelper, _emberString, _ghostAdminUtilsCajaSanitizers) {
    exports.formatMarkdown = formatMarkdown;

    // eslint-disable-next-line new-cap
    var showdown = new Showdown.converter({ extensions: ['ghostimagepreview', 'ghostgfm', 'footnotes', 'highlight'] });

    function formatMarkdown(params) {
        if (!params || !params.length) {
            return;
        }

        var markdown = params[0] || '';
        var escapedhtml = '';

        // convert markdown to HTML
        escapedhtml = showdown.makeHtml(markdown);

        // replace script and iFrame
        escapedhtml = escapedhtml.replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '<pre class="js-embed-placeholder">Embedded JavaScript</pre>');
        escapedhtml = escapedhtml.replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '<pre class="iframe-embed-placeholder">Embedded iFrame</pre>');

        // sanitize html
        /* eslint-disable-next-line camelcase */
        escapedhtml = html_sanitize(escapedhtml, _ghostAdminUtilsCajaSanitizers['default'].url, _ghostAdminUtilsCajaSanitizers['default'].id);

        return (0, _emberString.htmlSafe)(escapedhtml);
    }

    exports['default'] = (0, _emberHelper.helper)(formatMarkdown);
});
/* global Showdown, html_sanitize */
define('ghost-admin/helpers/gh-format-time-scheduled', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.timeToSchedule = timeToSchedule;

    function timeToSchedule(params) {
        if (!params || !params.length) {
            return;
        }

        var _params = _slicedToArray(params, 2);

        var blogTimezone = _params[1];

        var _params2 = _slicedToArray(params, 1);

        var time = _params2[0];

        if (blogTimezone.get('isFulfilled')) {
            return moment.utc(time).tz(blogTimezone.get('content')).format('DD MMM YYYY, HH:mm');
        }
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return timeToSchedule(params);
    });
});
define('ghost-admin/helpers/gh-format-timeago', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.timeAgo = timeAgo;

    function timeAgo(params) {
        if (!params || !params.length) {
            return;
        }

        var _params = _slicedToArray(params, 1);

        var timeago = _params[0];

        return moment(timeago).from(moment.utc());
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return timeAgo(params);
        // stefanpenner says cool for small number of timeagos.
        // For large numbers moment sucks => single Ember.Object based clock better
        // https://github.com/manuelmitasch/ghost-admin-ember-demo/commit/fba3ab0a59238290c85d4fa0d7c6ed1be2a8a82e#commitcomment-5396524
    });
});
define('ghost-admin/helpers/gh-path', ['exports', 'ember-helper', 'ember-string', 'ghost-admin/utils/ghost-paths'], function (exports, _emberHelper, _emberString, _ghostAdminUtilsGhostPaths) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    // Handlebars Helper {{gh-path}}
    // Usage: Assume 'http://www.myghostblog.org/myblog/'
    // {{gh-path}} or {{gh-path 'blog'}} for Ghost's root (/myblog/)
    // {{gh-path 'admin'}} for Ghost's admin root (/myblog/ghost/)
    // {{gh-path 'api'}} for Ghost's api root (/myblog/ghost/api/v0.1/)
    // {{gh-path 'asset' '/img/hi.png'}} for resolved url (/myblog/ghost/assets/img/hi.png)

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        var paths = (0, _ghostAdminUtilsGhostPaths['default'])();

        var _params = _slicedToArray(params, 2);

        var path = _params[0];
        var url = _params[1];

        var base = undefined;

        if (!path) {
            path = 'blog';
        }

        if (!/^(blog|admin|asset|api)$/.test(path)) {
            url = path;
            path = 'blog';
        }

        switch (path.toString()) {
            case 'blog':
                base = paths.blogRoot;
                break;
            case 'admin':
                base = paths.adminRoot;
                break;
            case 'asset':
                base = paths.assetRoot;
                break;
            case 'api':
                base = paths.apiRoot;
                break;
            default:
                base = paths.blogRoot;
                break;
        }

        // handle leading and trailing slashes

        base = base[base.length - 1] !== '/' ? base + '/' : base;

        if (url && url.length > 0) {
            if (url[0] === '/') {
                url = url.substr(1);
            }

            base = base + url;
        }

        return (0, _emberString.htmlSafe)(base);
    });
});
define('ghost-admin/helpers/gh-user-can-admin', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    exports.ghUserCanAdmin = ghUserCanAdmin;

    // Handlebars Helper {{gh-user-can-admin}} group users by admin and owner using if, or group them author using unless
    // Usage: call helper as with aparameter of session.user
    // e.g - {{#if (gh-user-can-admin session.user)}} 'block content' {{/if}}
    // @param session.user

    function ghUserCanAdmin(params) {
        return !!(params[0].get('isOwner') || params[0].get('isAdmin'));
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return ghUserCanAdmin(params);
    });
});
define('ghost-admin/helpers/group-by', ['exports', 'ember-composable-helpers/helpers/group-by'], function (exports, _emberComposableHelpersHelpersGroupBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersGroupBy['default'];
    }
  });
  Object.defineProperty(exports, 'groupBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersGroupBy.groupBy;
    }
  });
});
define('ghost-admin/helpers/gt', ['exports', 'ember', 'ember-truth-helpers/helpers/gt'], function (exports, _ember, _emberTruthHelpersHelpersGt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGt.gtHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGt.gtHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/gte', ['exports', 'ember', 'ember-truth-helpers/helpers/gte'], function (exports, _ember, _emberTruthHelpersHelpersGte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersGte.gteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersGte.gteHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/has-next', ['exports', 'ember-composable-helpers/helpers/has-next'], function (exports, _emberComposableHelpersHelpersHasNext) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasNext['default'];
    }
  });
  Object.defineProperty(exports, 'hasNext', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasNext.hasNext;
    }
  });
});
define('ghost-admin/helpers/has-previous', ['exports', 'ember-composable-helpers/helpers/has-previous'], function (exports, _emberComposableHelpersHelpersHasPrevious) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasPrevious['default'];
    }
  });
  Object.defineProperty(exports, 'hasPrevious', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHasPrevious.hasPrevious;
    }
  });
});
define('ghost-admin/helpers/highlighted-text', ['exports', 'ember-helper', 'ember-string'], function (exports, _emberHelper, _emberString) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.highlightedText = highlightedText;

    function highlightedText(_ref) {
        var _ref2 = _slicedToArray(_ref, 2);

        var text = _ref2[0];
        var termToHighlight = _ref2[1];

        return (0, _emberString.htmlSafe)(text.replace(new RegExp(termToHighlight, 'ig'), '<span class="highlight">$&</span>'));
    }

    exports['default'] = (0, _emberHelper.helper)(highlightedText);
});
define('ghost-admin/helpers/html-safe', ['exports', 'ember-composable-helpers/helpers/html-safe'], function (exports, _emberComposableHelpersHelpersHtmlSafe) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHtmlSafe['default'];
    }
  });
  Object.defineProperty(exports, 'htmlSafe', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersHtmlSafe.htmlSafe;
    }
  });
});
define('ghost-admin/helpers/if-equals', ['exports', 'ghost-editor/helpers/if-equals'], function (exports, _ghostEditorHelpersIfEquals) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _ghostEditorHelpersIfEquals['default'];
    }
  });
  Object.defineProperty(exports, 'ifEquals', {
    enumerable: true,
    get: function get() {
      return _ghostEditorHelpersIfEquals.ifEquals;
    }
  });
});
define('ghost-admin/helpers/inc', ['exports', 'ember-composable-helpers/helpers/inc'], function (exports, _emberComposableHelpersHelpersInc) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInc['default'];
    }
  });
  Object.defineProperty(exports, 'inc', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInc.inc;
    }
  });
});
define('ghost-admin/helpers/intersect', ['exports', 'ember-composable-helpers/helpers/intersect'], function (exports, _emberComposableHelpersHelpersIntersect) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersIntersect['default'];
    }
  });
  Object.defineProperty(exports, 'intersect', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersIntersect.intersect;
    }
  });
});
define('ghost-admin/helpers/invoke', ['exports', 'ember-composable-helpers/helpers/invoke'], function (exports, _emberComposableHelpersHelpersInvoke) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInvoke['default'];
    }
  });
  Object.defineProperty(exports, 'invoke', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersInvoke.invoke;
    }
  });
});
define('ghost-admin/helpers/is-array', ['exports', 'ember', 'ember-truth-helpers/helpers/is-array'], function (exports, _ember, _emberTruthHelpersHelpersIsArray) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersIsArray.isArrayHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/is-equal', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports.isEqual = isEqual;

    function isEqual(params) {
        var _params = _slicedToArray(params, 2);

        var lhs = _params[0];
        var rhs = _params[1];

        return lhs === rhs;
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return isEqual(params);
    });
});
define('ghost-admin/helpers/is-not', ['exports', 'ember-helper'], function (exports, _emberHelper) {
    exports.isNot = isNot;

    function isNot(params) {
        return !params;
    }

    exports['default'] = (0, _emberHelper.helper)(function (params) {
        return isNot(params);
    });
});
define('ghost-admin/helpers/join', ['exports', 'ember-composable-helpers/helpers/join'], function (exports, _emberComposableHelpersHelpersJoin) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersJoin['default'];
    }
  });
  Object.defineProperty(exports, 'join', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersJoin.join;
    }
  });
});
define('ghost-admin/helpers/lf-lock-model', ['exports', 'liquid-fire/helpers/lf-lock-model'], function (exports, _liquidFireHelpersLfLockModel) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireHelpersLfLockModel['default'];
    }
  });
  Object.defineProperty(exports, 'lfLockModel', {
    enumerable: true,
    get: function get() {
      return _liquidFireHelpersLfLockModel.lfLockModel;
    }
  });
});
define('ghost-admin/helpers/lf-or', ['exports', 'liquid-fire/helpers/lf-or'], function (exports, _liquidFireHelpersLfOr) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireHelpersLfOr['default'];
    }
  });
  Object.defineProperty(exports, 'lfOr', {
    enumerable: true,
    get: function get() {
      return _liquidFireHelpersLfOr.lfOr;
    }
  });
});
define('ghost-admin/helpers/lt', ['exports', 'ember', 'ember-truth-helpers/helpers/lt'], function (exports, _ember, _emberTruthHelpersHelpersLt) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLt.ltHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLt.ltHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/lte', ['exports', 'ember', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersHelpersLte) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersLte.lteHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/map-by', ['exports', 'ember-composable-helpers/helpers/map-by'], function (exports, _emberComposableHelpersHelpersMapBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMapBy['default'];
    }
  });
  Object.defineProperty(exports, 'mapBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMapBy.mapBy;
    }
  });
});
define('ghost-admin/helpers/map', ['exports', 'ember-composable-helpers/helpers/map'], function (exports, _emberComposableHelpersHelpersMap) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMap['default'];
    }
  });
  Object.defineProperty(exports, 'map', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersMap.map;
    }
  });
});
define('ghost-admin/helpers/next', ['exports', 'ember-composable-helpers/helpers/next'], function (exports, _emberComposableHelpersHelpersNext) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersNext['default'];
    }
  });
  Object.defineProperty(exports, 'next', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersNext.next;
    }
  });
});
define('ghost-admin/helpers/not-eq', ['exports', 'ember', 'ember-truth-helpers/helpers/not-equal'], function (exports, _ember, _emberTruthHelpersHelpersNotEqual) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNotEqual.notEqualHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/not', ['exports', 'ember', 'ember-truth-helpers/helpers/not'], function (exports, _ember, _emberTruthHelpersHelpersNot) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersNot.notHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersNot.notHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/object-at', ['exports', 'ember-composable-helpers/helpers/object-at'], function (exports, _emberComposableHelpersHelpersObjectAt) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersObjectAt['default'];
    }
  });
  Object.defineProperty(exports, 'objectAt', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersObjectAt.objectAt;
    }
  });
});
define('ghost-admin/helpers/one-way-select/contains', ['exports', 'ember-one-way-controls/helpers/one-way-select/contains'], function (exports, _emberOneWayControlsHelpersOneWaySelectContains) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsHelpersOneWaySelectContains['default'];
    }
  });
  Object.defineProperty(exports, 'contains', {
    enumerable: true,
    get: function get() {
      return _emberOneWayControlsHelpersOneWaySelectContains.contains;
    }
  });
});
define('ghost-admin/helpers/optional', ['exports', 'ember-composable-helpers/helpers/optional'], function (exports, _emberComposableHelpersHelpersOptional) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersOptional['default'];
    }
  });
  Object.defineProperty(exports, 'optional', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersOptional.optional;
    }
  });
});
define('ghost-admin/helpers/or', ['exports', 'ember', 'ember-truth-helpers/helpers/or'], function (exports, _ember, _emberTruthHelpersHelpersOr) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersOr.orHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersOr.orHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/helpers/perform', ['exports', 'ember', 'ember-concurrency/-helpers'], function (exports, _ember, _emberConcurrencyHelpers) {
  exports.performHelper = performHelper;

  function performHelper(args, hash) {
    return (0, _emberConcurrencyHelpers.taskHelperClosure)('perform', args, hash);
  }

  exports['default'] = _ember['default'].Helper.helper(performHelper);
});
define('ghost-admin/helpers/pipe-action', ['exports', 'ember-composable-helpers/helpers/pipe-action'], function (exports, _emberComposableHelpersHelpersPipeAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPipeAction['default'];
    }
  });
});
define('ghost-admin/helpers/pipe', ['exports', 'ember-composable-helpers/helpers/pipe'], function (exports, _emberComposableHelpersHelpersPipe) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPipe['default'];
    }
  });
  Object.defineProperty(exports, 'pipe', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPipe.pipe;
    }
  });
});
define('ghost-admin/helpers/pluralize', ['exports', 'ember-inflector/lib/helpers/pluralize'], function (exports, _emberInflectorLibHelpersPluralize) {
  exports['default'] = _emberInflectorLibHelpersPluralize['default'];
});
define('ghost-admin/helpers/previous', ['exports', 'ember-composable-helpers/helpers/previous'], function (exports, _emberComposableHelpersHelpersPrevious) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPrevious['default'];
    }
  });
  Object.defineProperty(exports, 'previous', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersPrevious.previous;
    }
  });
});
define('ghost-admin/helpers/queue', ['exports', 'ember-composable-helpers/helpers/queue'], function (exports, _emberComposableHelpersHelpersQueue) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersQueue['default'];
    }
  });
  Object.defineProperty(exports, 'queue', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersQueue.queue;
    }
  });
});
define('ghost-admin/helpers/range', ['exports', 'ember-composable-helpers/helpers/range'], function (exports, _emberComposableHelpersHelpersRange) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRange['default'];
    }
  });
  Object.defineProperty(exports, 'range', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRange.range;
    }
  });
});
define('ghost-admin/helpers/reduce', ['exports', 'ember-composable-helpers/helpers/reduce'], function (exports, _emberComposableHelpersHelpersReduce) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReduce['default'];
    }
  });
  Object.defineProperty(exports, 'reduce', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReduce.reduce;
    }
  });
});
define('ghost-admin/helpers/reject-by', ['exports', 'ember-composable-helpers/helpers/reject-by'], function (exports, _emberComposableHelpersHelpersRejectBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRejectBy['default'];
    }
  });
  Object.defineProperty(exports, 'rejectBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRejectBy.rejectBy;
    }
  });
});
define('ghost-admin/helpers/repeat', ['exports', 'ember-composable-helpers/helpers/repeat'], function (exports, _emberComposableHelpersHelpersRepeat) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRepeat['default'];
    }
  });
  Object.defineProperty(exports, 'repeat', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersRepeat.repeat;
    }
  });
});
define('ghost-admin/helpers/reverse', ['exports', 'ember-composable-helpers/helpers/reverse'], function (exports, _emberComposableHelpersHelpersReverse) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReverse['default'];
    }
  });
  Object.defineProperty(exports, 'reverse', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersReverse.reverse;
    }
  });
});
define('ghost-admin/helpers/route-action', ['exports', 'ember-route-action-helper/helpers/route-action'], function (exports, _emberRouteActionHelperHelpersRouteAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberRouteActionHelperHelpersRouteAction['default'];
    }
  });
});
define('ghost-admin/helpers/shuffle', ['exports', 'ember-composable-helpers/helpers/shuffle'], function (exports, _emberComposableHelpersHelpersShuffle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersShuffle['default'];
    }
  });
  Object.defineProperty(exports, 'shuffle', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersShuffle.shuffle;
    }
  });
});
define('ghost-admin/helpers/singularize', ['exports', 'ember-inflector/lib/helpers/singularize'], function (exports, _emberInflectorLibHelpersSingularize) {
  exports['default'] = _emberInflectorLibHelpersSingularize['default'];
});
define('ghost-admin/helpers/slice', ['exports', 'ember-composable-helpers/helpers/slice'], function (exports, _emberComposableHelpersHelpersSlice) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSlice['default'];
    }
  });
  Object.defineProperty(exports, 'slice', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSlice.slice;
    }
  });
});
define('ghost-admin/helpers/sort-by', ['exports', 'ember-composable-helpers/helpers/sort-by'], function (exports, _emberComposableHelpersHelpersSortBy) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSortBy['default'];
    }
  });
  Object.defineProperty(exports, 'sortBy', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersSortBy.sortBy;
    }
  });
});
define('ghost-admin/helpers/take', ['exports', 'ember-composable-helpers/helpers/take'], function (exports, _emberComposableHelpersHelpersTake) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTake['default'];
    }
  });
  Object.defineProperty(exports, 'take', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTake.take;
    }
  });
});
define('ghost-admin/helpers/task', ['exports', 'ember'], function (exports, _ember) {
  function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

  function _toArray(arr) { return Array.isArray(arr) ? arr : Array.from(arr); }

  function taskHelper(_ref) {
    var _ref2 = _toArray(_ref);

    var task = _ref2[0];

    var args = _ref2.slice(1);

    return task._curry.apply(task, _toConsumableArray(args));
  }

  exports['default'] = _ember['default'].Helper.helper(taskHelper);
});
define('ghost-admin/helpers/titleize', ['exports', 'ember-composable-helpers/helpers/titleize'], function (exports, _emberComposableHelpersHelpersTitleize) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTitleize['default'];
    }
  });
  Object.defineProperty(exports, 'titleize', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTitleize.titleize;
    }
  });
});
define('ghost-admin/helpers/toggle-action', ['exports', 'ember-composable-helpers/helpers/toggle-action'], function (exports, _emberComposableHelpersHelpersToggleAction) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersToggleAction['default'];
    }
  });
});
define('ghost-admin/helpers/toggle', ['exports', 'ember-composable-helpers/helpers/toggle'], function (exports, _emberComposableHelpersHelpersToggle) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersToggle['default'];
    }
  });
  Object.defineProperty(exports, 'toggle', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersToggle.toggle;
    }
  });
});
define('ghost-admin/helpers/truncate', ['exports', 'ember-composable-helpers/helpers/truncate'], function (exports, _emberComposableHelpersHelpersTruncate) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTruncate['default'];
    }
  });
  Object.defineProperty(exports, 'truncate', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersTruncate.truncate;
    }
  });
});
define('ghost-admin/helpers/underscore', ['exports', 'ember-composable-helpers/helpers/underscore'], function (exports, _emberComposableHelpersHelpersUnderscore) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnderscore['default'];
    }
  });
  Object.defineProperty(exports, 'underscore', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnderscore.underscore;
    }
  });
});
define('ghost-admin/helpers/union', ['exports', 'ember-composable-helpers/helpers/union'], function (exports, _emberComposableHelpersHelpersUnion) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnion['default'];
    }
  });
  Object.defineProperty(exports, 'union', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersUnion.union;
    }
  });
});
define('ghost-admin/helpers/w', ['exports', 'ember-composable-helpers/helpers/w'], function (exports, _emberComposableHelpersHelpersW) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersW['default'];
    }
  });
  Object.defineProperty(exports, 'w', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersW.w;
    }
  });
});
define('ghost-admin/helpers/without', ['exports', 'ember-composable-helpers/helpers/without'], function (exports, _emberComposableHelpersHelpersWithout) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersWithout['default'];
    }
  });
  Object.defineProperty(exports, 'without', {
    enumerable: true,
    get: function get() {
      return _emberComposableHelpersHelpersWithout.without;
    }
  });
});
define('ghost-admin/helpers/xor', ['exports', 'ember', 'ember-truth-helpers/helpers/xor'], function (exports, _ember, _emberTruthHelpersHelpersXor) {

  var forExport = null;

  if (_ember['default'].Helper) {
    forExport = _ember['default'].Helper.helper(_emberTruthHelpersHelpersXor.xorHelper);
  } else if (_ember['default'].HTMLBars.makeBoundHelper) {
    forExport = _ember['default'].HTMLBars.makeBoundHelper(_emberTruthHelpersHelpersXor.xorHelper);
  }

  exports['default'] = forExport;
});
define('ghost-admin/initializers/app-version', ['exports', 'ember-cli-app-version/initializer-factory', 'ghost-admin/config/environment'], function (exports, _emberCliAppVersionInitializerFactory, _ghostAdminConfigEnvironment) {
  var _config$APP = _ghostAdminConfigEnvironment['default'].APP;
  var name = _config$APP.name;
  var version = _config$APP.version;
  exports['default'] = {
    name: 'App Version',
    initialize: (0, _emberCliAppVersionInitializerFactory['default'])(name, version)
  };
});
define('ghost-admin/initializers/container-debug-adapter', ['exports', 'ember-resolver/container-debug-adapter'], function (exports, _emberResolverContainerDebugAdapter) {
  exports['default'] = {
    name: 'container-debug-adapter',

    initialize: function initialize() {
      var app = arguments[1] || arguments[0];

      app.register('container-debug-adapter:main', _emberResolverContainerDebugAdapter['default']);
      app.inject('container-debug-adapter:main', 'namespace', 'application:main');
    }
  };
});
define('ghost-admin/initializers/data-adapter', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `data-adapter` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'data-adapter',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/ember-cli-fastclick', ['exports', 'ember'], function (exports, _ember) {
  var schedule = _ember['default'].run.schedule;

  var EmberCliFastclickInitializer = {
    name: 'fastclick',

    initialize: function initialize() {
      schedule('afterRender', function () {
        FastClick.attach(document.body);
      });
    }
  };

  exports['default'] = EmberCliFastclickInitializer;
});
define('ghost-admin/initializers/ember-cli-mirage', ['exports', 'ember-cli-mirage/utils/read-modules', 'ghost-admin/config/environment', 'ghost-admin/mirage/config', 'ember-cli-mirage/server', 'lodash/object/assign'], function (exports, _emberCliMirageUtilsReadModules, _ghostAdminConfigEnvironment, _ghostAdminMirageConfig, _emberCliMirageServer, _lodashObjectAssign) {
  exports.startMirage = startMirage;
  exports['default'] = {
    name: 'ember-cli-mirage',
    initialize: function initialize(application) {
      if (arguments.length > 1) {
        // Ember < 2.1
        var container = arguments[0],
            application = arguments[1];
      }

      if (_shouldUseMirage(_ghostAdminConfigEnvironment['default'].environment, _ghostAdminConfigEnvironment['default']['ember-cli-mirage'])) {
        startMirage(_ghostAdminConfigEnvironment['default']);
      }
    }
  };

  function startMirage() {
    var env = arguments.length <= 0 || arguments[0] === undefined ? _ghostAdminConfigEnvironment['default'] : arguments[0];

    var environment = env.environment;
    var modules = (0, _emberCliMirageUtilsReadModules['default'])(env.modulePrefix);
    var options = (0, _lodashObjectAssign['default'])(modules, { environment: environment, baseConfig: _ghostAdminMirageConfig['default'], testConfig: _ghostAdminMirageConfig.testConfig });

    return new _emberCliMirageServer['default'](options);
  }

  function _shouldUseMirage(env, addonConfig) {
    var userDeclaredEnabled = typeof addonConfig.enabled !== 'undefined';
    var defaultEnabled = _defaultEnabled(env, addonConfig);

    return userDeclaredEnabled ? addonConfig.enabled : defaultEnabled;
  }

  /*
    Returns a boolean specifying the default behavior for whether
    to initialize Mirage.
  */
  function _defaultEnabled(env, addonConfig) {
    var usingInDev = env === 'development' && !addonConfig.usingProxy;
    var usingInTest = env === 'test';

    return usingInDev || usingInTest;
  }
});
define('ghost-admin/initializers/ember-concurrency', ['exports', 'ember-concurrency'], function (exports, _emberConcurrency) {
  exports['default'] = {
    name: 'ember-concurrency',
    initialize: function initialize() {}
  };
});
// This initializer exists only to make sure that the following
// imports happen before the app boots.
define('ghost-admin/initializers/ember-data', ['exports', 'ember-data/setup-container', 'ember-data/-private/core'], function (exports, _emberDataSetupContainer, _emberDataPrivateCore) {

  /*
  
    This code initializes Ember-Data onto an Ember application.
  
    If an Ember.js developer defines a subclass of DS.Store on their application,
    as `App.StoreService` (or via a module system that resolves to `service:store`)
    this code will automatically instantiate it and make it available on the
    router.
  
    Additionally, after an application's controllers have been injected, they will
    each have the store made available to them.
  
    For example, imagine an Ember.js application with the following classes:
  
    App.StoreService = DS.Store.extend({
      adapter: 'custom'
    });
  
    App.PostsController = Ember.Controller.extend({
      // ...
    });
  
    When the application is initialized, `App.ApplicationStore` will automatically be
    instantiated, and the instance of `App.PostsController` will have its `store`
    property set to that instance.
  
    Note that this code will only be run if the `ember-application` package is
    loaded. If Ember Data is being used in an environment other than a
    typical application (e.g., node.js where only `ember-runtime` is available),
    this code will be ignored.
  */

  exports['default'] = {
    name: 'ember-data',
    initialize: _emberDataSetupContainer['default']
  };
});
define('ghost-admin/initializers/ember-simple-auth', ['exports', 'ghost-admin/config/environment', 'ghost-admin/utils/ghost-paths', 'ember-simple-auth/configuration', 'ember-simple-auth/initializers/setup-session', 'ember-simple-auth/initializers/setup-session-service'], function (exports, _ghostAdminConfigEnvironment, _ghostAdminUtilsGhostPaths, _emberSimpleAuthConfiguration, _emberSimpleAuthInitializersSetupSession, _emberSimpleAuthInitializersSetupSessionService) {
    exports['default'] = {
        name: 'ember-simple-auth',
        initialize: function initialize(registry) {
            var config = _ghostAdminConfigEnvironment['default']['ember-simple-auth'] || {};
            config.baseURL = (0, _ghostAdminUtilsGhostPaths['default'])().adminRoot;
            _emberSimpleAuthConfiguration['default'].load(config);

            (0, _emberSimpleAuthInitializersSetupSession['default'])(registry);
            (0, _emberSimpleAuthInitializersSetupSessionService['default'])(registry);
        }
    };
});
define('ghost-admin/initializers/event-dispatcher', ['exports', 'ember'], function (exports, _ember) {
    exports.initialize = initialize;
    var EventDispatcher = _ember['default'].EventDispatcher;

    var myEventDispatcher = EventDispatcher.extend({
        canDispatchToEventManager: false
    });

    function initialize(application) {
        application.register('event_dispatcher:main', myEventDispatcher);
    }

    exports['default'] = {
        name: 'event-dispatcher',
        initialize: initialize
    };
});
// TODO: remove this file once canDispatchToEventManager is deprecated
// https://github.com/emberjs/ember.js/issues/14754
define('ghost-admin/initializers/export-application-global', ['exports', 'ember', 'ghost-admin/config/environment'], function (exports, _ember, _ghostAdminConfigEnvironment) {
  exports.initialize = initialize;

  function initialize() {
    var application = arguments[1] || arguments[0];
    if (_ghostAdminConfigEnvironment['default'].exportApplicationGlobal !== false) {
      var theGlobal;
      if (typeof window !== 'undefined') {
        theGlobal = window;
      } else if (typeof global !== 'undefined') {
        theGlobal = global;
      } else if (typeof self !== 'undefined') {
        theGlobal = self;
      } else {
        // no reasonable global, just bail
        return;
      }

      var value = _ghostAdminConfigEnvironment['default'].exportApplicationGlobal;
      var globalName;

      if (typeof value === 'string') {
        globalName = value;
      } else {
        globalName = _ember['default'].String.classify(_ghostAdminConfigEnvironment['default'].modulePrefix);
      }

      if (!theGlobal[globalName]) {
        theGlobal[globalName] = application;

        application.reopen({
          willDestroy: function willDestroy() {
            this._super.apply(this, arguments);
            delete theGlobal[globalName];
          }
        });
      }
    }
  }

  exports['default'] = {
    name: 'export-application-global',

    initialize: initialize
  };
});
define('ghost-admin/initializers/hide-loading-screen', ['exports', 'ghost-admin/instance-initializers/hide-loading-screen', 'ember'], function (exports, _ghostAdminInstanceInitializersHideLoadingScreen, _ember) {
  exports.initialize = initialize;

  var EMBER_VERSION_REGEX = /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:(?:\-(alpha|beta)\.([0-9]+)(?:\.([0-9]+))?)?)?(?:\+(canary))?(?:\.([0-9abcdef]+))?(?:\-([A-Za-z0-9\.\-]+))?(?:\+([A-Za-z0-9\.\-]+))?$/;

  /**
   * VERSION_INFO[i] is as follows:
   *
   * 0  complete version string
   * 1  major version
   * 2  minor version
   * 3  trivial version
   * 4  pre-release type (optional: "alpha" or "beta" or undefined for stable releases)
   * 5  pre-release version (optional)
   * 6  pre-release sub-version (optional)
   * 7  canary (optional: "canary", or undefined for stable releases)
   * 8  SHA (optional)
   */
  var VERSION_INFO = EMBER_VERSION_REGEX.exec(_ember['default'].VERSION);
  var isPre111 = parseInt(VERSION_INFO[1], 10) < 2 && parseInt(VERSION_INFO[2], 10) < 12;

  function initialize() {
    if (isPre111) {
      var registry = arguments[0];
      var application = arguments[1];
      _ghostAdminInstanceInitializersHideLoadingScreen['default'].initialize(registry, application);
    }
  }

  exports['default'] = {
    name: 'hide-loading-screen',
    initialize: initialize
  };
});
define('ghost-admin/initializers/initialize-torii-callback', ['exports', 'torii/redirect-handler'], function (exports, _toriiRedirectHandler) {
  exports['default'] = {
    name: 'torii-callback',
    before: 'torii',
    initialize: function initialize(application) {
      if (arguments[1]) {
        // Ember < 2.1
        application = arguments[1];
      }
      application.deferReadiness();
      _toriiRedirectHandler['default'].handle(window)['catch'](function () {
        application.advanceReadiness();
      });
    }
  };
});
define('ghost-admin/initializers/initialize-torii-session', ['exports', 'torii/bootstrap/session', 'torii/configuration'], function (exports, _toriiBootstrapSession, _toriiConfiguration) {
  exports['default'] = {
    name: 'torii-session',
    after: 'torii',

    initialize: function initialize(application) {
      if (arguments[1]) {
        // Ember < 2.1
        application = arguments[1];
      }
      var configuration = (0, _toriiConfiguration.getConfiguration)();
      if (!configuration.sessionServiceName) {
        return;
      }

      (0, _toriiBootstrapSession['default'])(application, configuration.sessionServiceName);

      var sessionFactoryName = 'service:' + configuration.sessionServiceName;
      application.inject('adapter', configuration.sessionServiceName, sessionFactoryName);
    }
  };
});
define('ghost-admin/initializers/initialize-torii', ['exports', 'torii/bootstrap/torii', 'torii/configuration', 'ghost-admin/config/environment'], function (exports, _toriiBootstrapTorii, _toriiConfiguration, _ghostAdminConfigEnvironment) {

  var initializer = {
    name: 'torii',
    initialize: function initialize(application) {
      if (arguments[1]) {
        // Ember < 2.1
        application = arguments[1];
      }
      (0, _toriiConfiguration.configure)(_ghostAdminConfigEnvironment['default'].torii || {});
      (0, _toriiBootstrapTorii['default'])(application);
      application.inject('route', 'torii', 'service:torii');
    }
  };

  exports['default'] = initializer;
});
define('ghost-admin/initializers/injectStore', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `injectStore` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'injectStore',
    before: 'store',
    initialize: function initialize() {}
  };
});
define("ghost-admin/initializers/liquid-fire", ["exports", "liquid-fire/ember-internals"], function (exports, _liquidFireEmberInternals) {

  (0, _liquidFireEmberInternals.initialize)();

  exports["default"] = {
    name: 'liquid-fire',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/store', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `store` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'store',
    after: 'ember-data',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/trailing-history', ['exports', 'ember-locations/history'], function (exports, _emberLocationsHistory) {

    var trailingHistory = _emberLocationsHistory['default'].extend({
        formatURL: function formatURL() {
            var url = this._super.apply(this, arguments);

            if (url.indexOf('?') > 0) {
                return url.replace(/([^\/])\?/, '$1/?');
            } else {
                return url.replace(/\/?$/, '/');
            }
        }
    });

    exports['default'] = {
        name: 'registerTrailingLocationHistory',

        initialize: function initialize(application) {
            application.register('location:trailing-history', trailingHistory);
        }
    };
});
define('ghost-admin/initializers/transforms', ['exports', 'ember'], function (exports, _ember) {

  /*
    This initializer is here to keep backwards compatibility with code depending
    on the `transforms` initializer (before Ember Data was an addon).
  
    Should be removed for Ember Data 3.x
  */

  exports['default'] = {
    name: 'transforms',
    before: 'store',
    initialize: function initialize() {}
  };
});
define('ghost-admin/initializers/truth-helpers', ['exports', 'ember', 'ember-truth-helpers/utils/register-helper', 'ember-truth-helpers/helpers/and', 'ember-truth-helpers/helpers/or', 'ember-truth-helpers/helpers/equal', 'ember-truth-helpers/helpers/not', 'ember-truth-helpers/helpers/is-array', 'ember-truth-helpers/helpers/not-equal', 'ember-truth-helpers/helpers/gt', 'ember-truth-helpers/helpers/gte', 'ember-truth-helpers/helpers/lt', 'ember-truth-helpers/helpers/lte'], function (exports, _ember, _emberTruthHelpersUtilsRegisterHelper, _emberTruthHelpersHelpersAnd, _emberTruthHelpersHelpersOr, _emberTruthHelpersHelpersEqual, _emberTruthHelpersHelpersNot, _emberTruthHelpersHelpersIsArray, _emberTruthHelpersHelpersNotEqual, _emberTruthHelpersHelpersGt, _emberTruthHelpersHelpersGte, _emberTruthHelpersHelpersLt, _emberTruthHelpersHelpersLte) {
  exports.initialize = initialize;

  function initialize() /* container, application */{

    // Do not register helpers from Ember 1.13 onwards, starting from 1.13 they
    // will be auto-discovered.
    if (_ember['default'].Helper) {
      return;
    }

    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('and', _emberTruthHelpersHelpersAnd.andHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('or', _emberTruthHelpersHelpersOr.orHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('eq', _emberTruthHelpersHelpersEqual.equalHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not', _emberTruthHelpersHelpersNot.notHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('is-array', _emberTruthHelpersHelpersIsArray.isArrayHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('not-eq', _emberTruthHelpersHelpersNotEqual.notEqualHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gt', _emberTruthHelpersHelpersGt.gtHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('gte', _emberTruthHelpersHelpersGte.gteHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lt', _emberTruthHelpersHelpersLt.ltHelper);
    (0, _emberTruthHelpersUtilsRegisterHelper.registerHelper)('lte', _emberTruthHelpersHelpersLte.lteHelper);
  }

  exports['default'] = {
    name: 'truth-helpers',
    initialize: initialize
  };
});
define('ghost-admin/initializers/upgrade-status', ['exports'], function (exports) {
    exports.initialize = initialize;

    function initialize(application) {
        application.inject('route', 'upgradeStatus', 'service:upgrade-status');
    }

    exports['default'] = {
        name: 'upgrade-status',
        initialize: initialize
    };
});
define('ghost-admin/initializers/viewport-config', ['exports', 'ember', 'ghost-admin/config/environment', 'ember-in-viewport/utils/can-use-dom'], function (exports, _ember, _ghostAdminConfigEnvironment, _emberInViewportUtilsCanUseDom) {
  exports.initialize = initialize;

  var defaultConfig = {
    viewportEnabled: true,
    viewportSpy: false,
    viewportScrollSensitivity: 1,
    viewportRefreshRate: 100,
    viewportListeners: [{ context: window, event: 'scroll.scrollable' }, { context: window, event: 'resize.resizable' }],
    viewportTolerance: {
      top: 0,
      left: 0,
      bottom: 0,
      right: 0
    }
  };

  if (_emberInViewportUtilsCanUseDom['default']) {
    defaultConfig.viewportListeners.push({
      context: document,
      event: 'touchmove.scrollable'
    });
  }

  var assign = _ember['default'].assign || _ember['default'].merge;

  function initialize() {
    var application = arguments[1] || arguments[0];
    var _config$viewportConfig = _ghostAdminConfigEnvironment['default'].viewportConfig;
    var viewportConfig = _config$viewportConfig === undefined ? {} : _config$viewportConfig;

    var mergedConfig = assign({}, defaultConfig, viewportConfig);

    application.register('config:in-viewport', mergedConfig, { instantiate: false });
  }

  exports['default'] = {
    name: 'viewport-config',
    initialize: initialize
  };
});
define("ghost-admin/instance-initializers/ember-data", ["exports", "ember-data/-private/instance-initializers/initialize-store-service"], function (exports, _emberDataPrivateInstanceInitializersInitializeStoreService) {
  exports["default"] = {
    name: "ember-data",
    initialize: _emberDataPrivateInstanceInitializersInitializeStoreService["default"]
  };
});
define('ghost-admin/instance-initializers/ember-simple-auth', ['exports', 'ember-simple-auth/instance-initializers/setup-session-restoration'], function (exports, _emberSimpleAuthInstanceInitializersSetupSessionRestoration) {
  exports['default'] = {
    name: 'ember-simple-auth',

    initialize: function initialize(instance) {
      (0, _emberSimpleAuthInstanceInitializersSetupSessionRestoration['default'])(instance);
    }
  };
});
define('ghost-admin/instance-initializers/hide-loading-screen', ['exports', 'ghost-admin/config/environment'], function (exports, _ghostAdminConfigEnvironment) {
  exports.initialize = initialize;

  var userConfig = _ghostAdminConfigEnvironment['default']['ember-load'] || {};

  function initialize() {
    var instance = arguments[1] || arguments[0];
    var container = !!arguments[1] ? arguments[0] : instance.container;

    if (Ember.View) {
      var ApplicationView = container.lookupFactory ? container.lookupFactory('view:application') : instance.resolveRegistration('view:application');

      ApplicationView = ApplicationView.reopen({
        didInsertElement: function didInsertElement() {
          this._super.apply(this, arguments);

          var loadingIndicatorClass = userConfig.loadingIndicatorClass || 'ember-load-indicator';

          Ember.$('.' + loadingIndicatorClass).remove();
        }
      });
    }
  }

  exports['default'] = {
    name: 'hide-loading-screen-instance',
    initialize: initialize
  };
});
define('ghost-admin/instance-initializers/jquery-ajax-oauth-prefilter', ['exports', 'jquery', 'ember-platform'], function (exports, _jquery, _emberPlatform) {
    exports['default'] = {
        name: 'jquery-ajax-oauth-prefilter',
        after: 'ember-simple-auth',

        initialize: function initialize(application) {
            var session = application.lookup('service:session');

            _jquery['default'].ajaxPrefilter(function (options) {
                session.authorize('authorizer:oauth2', function (headerName, headerValue) {
                    var headerObject = {};

                    headerObject[headerName] = headerValue;
                    options.headers = (0, _emberPlatform.assign)(options.headers || {}, headerObject);
                });
            });
        }
    };
});
define('ghost-admin/instance-initializers/setup-routes', ['exports', 'torii/bootstrap/routing', 'torii/configuration', 'torii/router-dsl-ext'], function (exports, _toriiBootstrapRouting, _toriiConfiguration, _toriiRouterDslExt) {
  exports['default'] = {
    name: 'torii-setup-routes',
    initialize: function initialize(applicationInstance, registry) {
      var configuration = (0, _toriiConfiguration.getConfiguration)();

      if (!configuration.sessionServiceName) {
        return;
      }

      var router = applicationInstance.get('router');
      var setupRoutes = function setupRoutes() {
        var authenticatedRoutes = router.router.authenticatedRoutes;
        var hasAuthenticatedRoutes = !Ember.isEmpty(authenticatedRoutes);
        if (hasAuthenticatedRoutes) {
          (0, _toriiBootstrapRouting['default'])(applicationInstance, authenticatedRoutes);
        }
        router.off('willTransition', setupRoutes);
      };
      router.on('willTransition', setupRoutes);
    }
  };
});
define('ghost-admin/instance-initializers/walk-providers', ['exports', 'torii/lib/container-utils', 'torii/configuration'], function (exports, _toriiLibContainerUtils, _toriiConfiguration) {
  exports['default'] = {
    name: 'torii-walk-providers',
    initialize: function initialize(applicationInstance) {
      var configuration = (0, _toriiConfiguration.getConfiguration)();
      // Walk all configured providers and eagerly instantiate
      // them. This gives providers with initialization side effects
      // like facebook-connect a chance to load up assets.
      for (var key in configuration.providers) {
        if (configuration.providers.hasOwnProperty(key)) {
          (0, _toriiLibContainerUtils.lookup)(applicationInstance, 'torii-provider:' + key);
        }
      }
    }
  };
});
define('ghost-admin/mirage/config', ['exports', 'ghost-admin/mirage/config/authentication', 'ghost-admin/mirage/config/configuration', 'ghost-admin/mirage/config/invites', 'ghost-admin/mirage/config/posts', 'ghost-admin/mirage/config/roles', 'ghost-admin/mirage/config/settings', 'ghost-admin/mirage/config/slugs', 'ghost-admin/mirage/config/subscribers', 'ghost-admin/mirage/config/tags', 'ghost-admin/mirage/config/themes', 'ghost-admin/mirage/config/users'], function (exports, _ghostAdminMirageConfigAuthentication, _ghostAdminMirageConfigConfiguration, _ghostAdminMirageConfigInvites, _ghostAdminMirageConfigPosts, _ghostAdminMirageConfigRoles, _ghostAdminMirageConfigSettings, _ghostAdminMirageConfigSlugs, _ghostAdminMirageConfigSubscribers, _ghostAdminMirageConfigTags, _ghostAdminMirageConfigThemes, _ghostAdminMirageConfigUsers) {
    exports.testConfig = testConfig;

    // import {versionMismatchResponse} from 'utils';

    exports['default'] = function () {
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = '/ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        this.timing = 400; // delay for each request, automatically set to 0 during testing

        // Mock endpoints here to override real API requests during development, eg...
        // this.put('/posts/:id/', versionMismatchResponse);
        // mockTags(this);
        // this.loadFixtures('settings');

        // keep this line, it allows all other API requests to hit the real server
        this.passthrough();

        // add any external domains to make sure those get passed through too
        this.passthrough('https://count.ghost.org/');
        this.passthrough('http://www.gravatar.com/**');
    };

    // Mock all endpoints here as there is no real API during testing

    function testConfig() {
        this.passthrough('/write-coverage'); // For code coverage
        // this.urlPrefix = '';    // make this `http://localhost:8080`, for example, if your API is on a different server
        this.namespace = '/ghost/api/v0.1'; // make this `api`, for example, if your API is namespaced
        // this.timing = 400;      // delay for each request, automatically set to 0 during testing
        // this.logging = true;

        (0, _ghostAdminMirageConfigAuthentication['default'])(this);
        (0, _ghostAdminMirageConfigConfiguration['default'])(this);
        (0, _ghostAdminMirageConfigInvites['default'])(this);
        (0, _ghostAdminMirageConfigPosts['default'])(this);
        (0, _ghostAdminMirageConfigRoles['default'])(this);
        (0, _ghostAdminMirageConfigSettings['default'])(this);
        (0, _ghostAdminMirageConfigSlugs['default'])(this);
        (0, _ghostAdminMirageConfigSubscribers['default'])(this);
        (0, _ghostAdminMirageConfigTags['default'])(this);
        (0, _ghostAdminMirageConfigThemes['default'])(this);
        (0, _ghostAdminMirageConfigUsers['default'])(this);

        /* Notifications -------------------------------------------------------- */

        this.get('/notifications/');

        /* Apps - Slack Test Notification --------------------------------------------------------- */

        this.post('/slack/test', function () {
            return {};
        });

        /* External sites ------------------------------------------------------- */

        var downloadCount = 0;
        this.get('https://count.ghost.org/', function () {
            downloadCount++;
            return {
                count: downloadCount
            };
        });

        this.get('http://www.gravatar.com/avatar/:md5', function () {
            return '';
        }, 200);
    }
});
define('ghost-admin/mirage/config/authentication', ['exports', 'ember-cli-mirage', 'ember-utils', 'jquery'], function (exports, _emberCliMirage, _emberUtils, _jquery) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = mockAuthentication;

    function mockAuthentication(server) {
        server.post('/authentication/token', function (_ref, _ref2) {
            var roles = _ref.roles;
            var users = _ref.users;
            var requestBody = _ref2.requestBody;

            var params = _jquery['default'].deparam(requestBody);

            if (params.grant_type === 'authorization_code') {
                // OAuth sign-in
                if (!users.all().models.length) {
                    var role = roles.findBy({ name: 'Owner' });
                    server.create('user', { email: 'oauthtest@example.com', roles: [role] });
                }

                return {
                    access_token: '5JhTdKI7PpoZv4ROsFoERc6wCHALKFH5jxozwOOAErmUzWrFNARuH1q01TYTKeZkPW7FmV5MJ2fU00pg9sm4jtH3Z1LjCf8D6nNqLYCfFb2YEKyuvG7zHj4jZqSYVodN2YTCkcHv6k8oJ54QXzNTLIDMlCevkOebm5OjxGiJpafMxncm043q9u1QhdU9eee3zouGRMVVp8zkKVoo5zlGMi3zvS2XDpx7xsfk8hKHpUgd7EDDQxmMueifWv7hv6n',
                    expires_in: 3600,
                    refresh_token: 'XP13eDjwV5mxOcrq1jkIY9idhdvN3R1Br5vxYpYIub2P5Hdc8pdWMOGmwFyoUshiEB62JWHTl8H1kACJR18Z8aMXbnk5orG28br2kmVgtVZKqOSoiiWrQoeKTqrRV0t7ua8uY5HdDUaKpnYKyOdpagsSPn3WEj8op4vHctGL3svOWOjZhq6F2XeVPMR7YsbiwBE8fjT3VhTB3KRlBtWZd1rE0Qo2EtSplWyjGKv1liAEiL0ndQoLeeSOCH4rTP7'
                };
            } else {
                // Password sign-in
                return {
                    access_token: '5JhTdKI7PpoZv4ROsFoERc6wCHALKFH5jxozwOOAErmUzWrFNARuH1q01TYTKeZkPW7FmV5MJ2fU00pg9sm4jtH3Z1LjCf8D6nNqLYCfFb2YEKyuvG7zHj4jZqSYVodN2YTCkcHv6k8oJ54QXzNTLIDMlCevkOebm5OjxGiJpafMxncm043q9u1QhdU9eee3zouGRMVVp8zkKVoo5zlGMi3zvS2XDpx7xsfk8hKHpUgd7EDDQxmMueifWv7hv6n',
                    expires_in: 3600,
                    refresh_token: 'XP13eDjwV5mxOcrq1jkIY9idhdvN3R1Br5vxYpYIub2P5Hdc8pdWMOGmwFyoUshiEB62JWHTl8H1kACJR18Z8aMXbnk5orG28br2kmVgtVZKqOSoiiWrQoeKTqrRV0t7ua8uY5HdDUaKpnYKyOdpagsSPn3WEj8op4vHctGL3svOWOjZhq6F2XeVPMR7YsbiwBE8fjT3VhTB3KRlBtWZd1rE0Qo2EtSplWyjGKv1liAEiL0ndQoLeeSOCH4rTP7',
                    token_type: 'Bearer'
                };
            }
        });

        server.post('/authentication/passwordreset', function (schema, request) {
            var _JSON$parse = JSON.parse(request.requestBody);

            var passwordreset = _JSON$parse.passwordreset;

            // eslint-disable-next-line ember-suave/prefer-destructuring
            var email = passwordreset[0].email;

            if (email === 'unknown@example.com') {
                return new _emberCliMirage.Response(404, {}, {
                    errors: [{
                        message: 'There is no user with that email address.',
                        errorType: 'NotFoundError'
                    }]
                });
            } else {
                return {
                    passwordreset: [{ message: 'Check your email for further instructions.' }]
                };
            }
        });

        server.get('/authentication/invitation/', function (schema, request) {
            var email = request.queryParams.email;

            var invite = schema.invites.findBy({ email: email });
            var user = schema.users.find(invite.createdBy);
            var valid = !!invite;
            var invitedBy = user && user.name;

            return {
                invitation: [{
                    valid: valid,
                    invitedBy: invitedBy
                }]
            };
        });

        /* Setup ---------------------------------------------------------------- */

        server.post('/authentication/setup', function (_ref3, request) {
            var roles = _ref3.roles;
            var users = _ref3.users;

            var _JSON$parse$setup = _slicedToArray(JSON.parse(request.requestBody).setup, 1);

            var attrs = _JSON$parse$setup[0];

            var role = roles.findBy({ name: 'Owner' });

            // create owner role unless already exists
            if (!role) {
                role = roles.create({ name: 'Owner' });
            }
            attrs.roles = [role];

            if (!(0, _emberUtils.isBlank)(attrs.email)) {
                attrs.slug = attrs.email.split('@')[0].dasherize();
            }

            // NOTE: server does not use the user factory to fill in blank fields
            return users.create(attrs);
        });

        server.get('/authentication/setup/', function () {
            return {
                setup: [{ status: true }]
            };
        });
    }
});
/* eslint-disable camelcase */
define('ghost-admin/mirage/config/configuration', ['exports', 'ember-utils'], function (exports, _emberUtils) {
    exports['default'] = mockConfiguration;

    function mockConfiguration(server) {
        server.get('/configuration/', function (_ref) {
            var db = _ref.db;

            if ((0, _emberUtils.isEmpty)(db.configurations)) {
                server.loadFixtures('configurations');
            }

            return {
                configuration: [db.configurations.find(1)]
            };
        });

        server.get('/configuration/timezones/', function (_ref2) {
            var db = _ref2.db;

            if ((0, _emberUtils.isEmpty)(db.timezones)) {
                server.loadFixtures('timezones');
            }

            return {
                configuration: [{
                    timezones: db.timezones
                }]
            };
        });
    }
});
define('ghost-admin/mirage/config/invites', ['exports', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _emberCliMirage, _ghostAdminMirageUtils) {
    exports['default'] = mockInvites;

    function mockInvites(server) {
        server.get('/invites/', (0, _ghostAdminMirageUtils.paginatedResponse)('invites'));

        server.get('/invites/:id', function (schema, request) {
            var id = request.params.id;

            var invite = schema.invites.find(id);

            return invite || new _emberCliMirage.Response(404, {}, {
                errors: [{
                    errorType: 'NotFoundError',
                    message: 'Invite not found.'
                }]
            });
        });

        server.post('/invites/', function (_ref) {
            var invites = _ref.invites;

            var attrs = this.normalizedRequestAttrs();
            var oldInvite = invites.findBy({ email: attrs.email });

            if (oldInvite) {
                oldInvite.destroy();
            }

            /* eslint-disable camelcase */
            attrs.token = invites.all().models.length + '-token';
            attrs.expires = moment.utc().add(1, 'day').unix();
            attrs.created_at = moment.utc().format();
            attrs.created_by = 1;
            attrs.updated_at = moment.utc().format();
            attrs.updated_by = 1;
            attrs.status = 'sent';
            /* eslint-enable camelcase */

            return invites.create(attrs);
        });

        server.del('/invites/:id/');
    }
});
define('ghost-admin/mirage/config/posts', ['exports', 'ember-cli-mirage', 'ember-utils', 'ghost-admin/mirage/utils', 'ember-string'], function (exports, _emberCliMirage, _emberUtils, _ghostAdminMirageUtils, _emberString) {
    exports['default'] = mockPosts;

    function mockPosts(server) {
        server.post('/posts', function (_ref) {
            var posts = _ref.posts;

            var attrs = this.normalizedRequestAttrs();

            if ((0, _emberUtils.isBlank)(attrs.slug) && !(0, _emberUtils.isBlank)(attrs.title)) {
                attrs.slug = (0, _emberString.dasherize)(attrs.title);
            }

            return posts.create(attrs);
        });

        // TODO: handle author filter
        server.get('/posts/', function (_ref2, _ref3) {
            var posts = _ref2.posts;
            var queryParams = _ref3.queryParams;

            var page = +queryParams.page || 1;
            var limit = +queryParams.limit || 15;
            var status = queryParams.status;
            var staticPages = queryParams.staticPages;

            var query = {};
            var models = undefined;

            if (status && status !== 'all') {
                query.status = status;
            }

            if (staticPages === 'false') {
                query.page = false;
            }

            if (staticPages === 'true') {
                query.page = true;
            }

            models = posts.where(query).models;

            return (0, _ghostAdminMirageUtils.paginateModelArray)('posts', models, page, limit);
        });

        server.get('/posts/:id/', function (_ref4, _ref5) {
            var posts = _ref4.posts;
            var params = _ref5.params;
            var id = params.id;

            var post = posts.find(id);

            return post || new _emberCliMirage.Response(404, {}, {
                errors: [{
                    errorType: 'NotFoundError',
                    message: 'Post not found.'
                }]
            });
        });

        server.put('/posts/:id/');

        server.del('/posts/:id/');
    }
});
define('ghost-admin/mirage/config/roles', ['exports'], function (exports) {
    exports['default'] = mockRoles;

    function mockRoles(server) {
        server.get('/roles/', function (_ref, _ref2) {
            var roles = _ref.roles;
            var queryParams = _ref2.queryParams;

            if (queryParams.permissions === 'assign') {
                return roles.find([1, 2, 3]);
            }

            return roles.all();
        });
    }
});
define('ghost-admin/mirage/config/settings', ['exports'], function (exports) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = mockSettings;

    function mockSettings(server) {
        // These endpoints use the raw database & fixtures without going
        // through the ORM at all (meaning no setting model). This is due
        // to https://github.com/samselikoff/ember-cli-mirage/issues/943
        // as far as can be determined.
        // potential TODO: update once the above issue is fixed? We don't really
        // gain anything from using the ORM for settings so it may not be a good idea
        server.get('/settings/', function (_ref, _ref2) {
            var db = _ref.db;
            var queryParams = _ref2.queryParams;
            var type = queryParams.type;

            var filters = type.split(',');
            var settings = [];

            if (!db.settings) {
                server.loadFixtures('settings');
            }

            filters.forEach(function (type) {
                settings.pushObjects(db.settings.where({ type: type }));
            });

            return {
                settings: settings,
                meta: { filters: { type: type } }
            };
        });

        server.put('/settings/', function (_ref3, _ref4) {
            var db = _ref3.db;
            var requestBody = _ref4.requestBody;

            var newSettings = JSON.parse(requestBody).settings;

            newSettings.forEach(function (newSetting) {
                var key = newSetting.key;

                db.settings.update({ key: key }, newSetting);
            });

            var _db$settings$where = db.settings.where({ key: 'activeTheme' });

            var _db$settings$where2 = _slicedToArray(_db$settings$where, 1);

            var activeTheme = _db$settings$where2[0];

            var _db$settings$where3 = db.settings.where({ key: 'availableThemes' });

            var _db$settings$where32 = _slicedToArray(_db$settings$where3, 1);

            var availableThemes = _db$settings$where32[0];

            availableThemes.value.forEach(function (theme) {
                if (theme.name === activeTheme.value) {
                    theme.active = true;
                } else {
                    theme.active = false;
                }
            });

            db.settings.update({ key: 'availableThemes' }, availableThemes);

            return {
                meta: {},
                settings: db.settings
            };
        });
    }
});
define('ghost-admin/mirage/config/slugs', ['exports', 'ember-string'], function (exports, _emberString) {
    exports['default'] = mockSlugs;

    function mockSlugs(server) {
        server.get('/slugs/post/:slug/', function (schema, request) {
            return {
                slugs: [{ slug: (0, _emberString.dasherize)(decodeURIComponent(request.params.slug)) }]
            };
        });

        server.get('/slugs/user/:slug/', function (schema, request) {
            return {
                slugs: [{ slug: (0, _emberString.dasherize)(decodeURIComponent(request.params.slug)) }]
            };
        });
    }
});
define('ghost-admin/mirage/config/subscribers', ['exports', 'ember-cli-mirage', 'ghost-admin/mirage/utils'], function (exports, _emberCliMirage, _ghostAdminMirageUtils) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = mockSubscribers;

    function mockSubscribers(server) {
        server.get('/subscribers/', (0, _ghostAdminMirageUtils.paginatedResponse)('subscribers'));

        server.post('/subscribers/', function (_ref, request) {
            var subscribers = _ref.subscribers;

            var _JSON$parse$subscribers = _slicedToArray(JSON.parse(request.requestBody).subscribers, 1);

            var attrs = _JSON$parse$subscribers[0];

            var subscriber = subscribers.findBy({ email: attrs.email });

            if (subscriber) {
                return new _emberCliMirage.Response(422, {}, {
                    errors: [{
                        errorType: 'ValidationError',
                        message: 'Email already exists.',
                        property: 'email'
                    }]
                });
            } else {
                attrs.created_at = new Date();
                attrs.created_by = 0;

                return subscribers.create(attrs);
            }
        });

        server.put('/subscribers/:id/');

        server.post('/subscribers/csv/', function () {
            // NB: we get a raw FormData object with no way to inspect it in Chrome
            // until version 50 adds the additional read methods
            // https://developer.mozilla.org/en-US/docs/Web/API/FormData#Browser_compatibility

            server.createList('subscriber', 50);

            return {
                meta: {
                    stats: {
                        imported: 50,
                        duplicates: 3,
                        invalid: 2
                    }
                }
            };
        });

        server.del('/subscribers/:id/');
    }
});
/* eslint-disable camelcase */
define('ghost-admin/mirage/config/tags', ['exports', 'ember-string', 'ember-utils', 'ghost-admin/mirage/utils'], function (exports, _emberString, _emberUtils, _ghostAdminMirageUtils) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = mockTags;

    function mockTags(server) {
        server.post('/tags/', function (_ref, _ref2) {
            var tags = _ref.tags;
            var requestBody = _ref2.requestBody;

            var _JSON$parse$tags = _slicedToArray(JSON.parse(requestBody).tags, 1);

            var attrs = _JSON$parse$tags[0];

            if ((0, _emberUtils.isBlank)(attrs.slug) && !(0, _emberUtils.isBlank)(attrs.name)) {
                attrs.slug = (0, _emberString.dasherize)(attrs.name);
            }

            // NOTE: this does not use the tag factory to fill in blank fields
            return tags.create(attrs);
        });

        server.get('/tags/', (0, _ghostAdminMirageUtils.paginatedResponse)('tags'));

        server.get('/tags/slug/:slug/', function (_ref3, _ref4) {
            var tags = _ref3.tags;
            var slug = _ref4.params.slug;

            // TODO: remove post_count unless requested?
            return tags.findBy({ slug: slug });
        });

        server.put('/tags/:id/');

        server.del('/tags/:id/');
    }
});
define('ghost-admin/mirage/config/themes', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = mockThemes;

    var themeCount = 1;

    function mockThemes(server) {
        server.post('/themes/upload/', function (_ref) {
            var db = _ref.db;

            var _db$settings$where = db.settings.where({ key: 'availableThemes' });

            var _db$settings$where2 = _slicedToArray(_db$settings$where, 1);

            var availableThemes = _db$settings$where2[0];

            // pretender/mirage doesn't currently process FormData so we can't use
            // any info passed in through the request
            var theme = {
                name: 'test-' + themeCount,
                'package': {
                    name: 'Test ' + themeCount,
                    version: '0.1'
                },
                active: false
            };

            themeCount++;

            availableThemes.value.pushObject(theme);
            db.settings.update({ key: 'availableThemes' }, availableThemes);

            return {
                themes: [theme]
            };
        });

        server.del('/themes/:theme/', function (_ref2, _ref3) {
            var db = _ref2.db;
            var params = _ref3.params;

            var _db$settings$where3 = db.settings.where({ key: 'availableThemes' });

            var _db$settings$where32 = _slicedToArray(_db$settings$where3, 1);

            var availableThemes = _db$settings$where32[0];

            availableThemes.value = availableThemes.value.filter(function (theme) {
                return theme.name !== params.theme;
            });

            db.settings.update({ key: 'availableThemes' }, availableThemes);

            return new _emberCliMirage.Response(204, {}, null);
        });
    }
});
define('ghost-admin/mirage/config/users', ['exports'], function (exports) {
    exports['default'] = mockUsers;

    function mockUsers(server) {
        // /users/me = Always return the user with ID=1
        server.get('/users/me/', function (_ref) {
            var users = _ref.users;

            return users.find(1);
        });

        server.get('/users/');

        server.get('/users/slug/:slug/', function (_ref2, _ref3) {
            var users = _ref2.users;
            var params = _ref3.params;
            var queryParams = _ref3.queryParams;

            var user = users.findBy({ slug: params.slug });
            user.postCount = queryParams.include.match(/count\.posts/);
            return user;
        });

        server.get('/users/:id', function (_ref4, _ref5) {
            var users = _ref4.users;
            var params = _ref5.params;
            var queryParams = _ref5.queryParams;

            var user = users.find(params.id);
            user.postCount = queryParams.include.match(/count\.posts/);
            return user;
        });

        server.put('/users/:id/', function (_ref6, _ref7) {
            var users = _ref6.users;
            var params = _ref7.params;
            var id = params.id;

            if (id === 'password') {
                return {
                    password: [{ message: 'Password changed successfully.' }]
                };
            } else {
                var attrs = this.normalizedRequestAttrs();

                return users.find(id).update(attrs);
            }
        });

        server.del('/users/:id/');
    }
});
define('ghost-admin/mirage/factories/invite', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Factory.extend({
        token: function token(i) {
            return i + '-token';
        },
        email: function email(i) {
            return 'invited-user-' + i + '@example.com';
        },
        expires: function expires() {
            return moment.utc().add(1, 'day').unix();
        },
        createdAt: function createdAt() {
            return moment.utc().format();
        },
        createdBy: function createdBy() {
            return 1;
        },
        updatedAt: function updatedAt() {
            return moment.utc().format();
        },
        updatedBy: function updatedBy() {
            return 1;
        },
        status: function status() {
            return 'sent';
        },
        roleId: function roleId() {
            return 1;
        }
    });
});
define('ghost-admin/mirage/factories/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Factory.extend({
        dismissible: true,
        message: 'This is an alert',
        status: 'alert',
        type: 'error'
    });
});
define('ghost-admin/mirage/factories/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Factory.extend({
        uuid: function uuid(i) {
            return 'post-' + i;
        },
        title: function title(i) {
            return 'Post ' + i;
        },
        description: function description(i) {
            return 'Title for post ' + i + '.';
        },
        slug: function slug(i) {
            return 'post-' + i;
        },
        markdown: function markdown(i) {
            return 'Markdown for post ' + i + '.';
        },
        html: function html(i) {
            return '<p>HTML for post ' + i + '.</p>';
        },
        image: function image(i) {
            return '/content/images/2015/10/post-' + i + '.jpg';
        },
        featured: false,
        page: false,
        status: function status(i) {
            return _emberCliMirage.faker.list.cycle('draft', 'published', 'scheduled')(i);
        },
        metaDescription: function metaDescription(i) {
            return 'Meta description for post ' + i + '.';
        },
        metaTitle: function metaTitle(i) {
            return 'Meta Title for post ' + i;
        },
        authorId: 1,
        updatedAt: '2015-10-19T16:25:07.756Z',
        updatedBy: 1,
        publishedAt: '2015-12-19T16:25:07.000Z',
        publishedBy: 1,
        createdAt: '2015-09-11T09:44:29.871Z',
        createdBy: 1,
        tags: []
    });
});
define('ghost-admin/mirage/factories/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Factory.extend({
        createdAt: '2013-11-25T14:48:11.000Z',
        createdBy: 1,
        description: function description(i) {
            return 'Role ' + i;
        },
        name: '',
        updatedAt: '2013-11-25T14:48:11.000Z',
        updatedBy: 1
    });
});
define('ghost-admin/mirage/factories/subscriber', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {

    var randomDate = function randomDate() {
        var start = arguments.length <= 0 || arguments[0] === undefined ? moment().subtract(30, 'days').toDate() : arguments[0];
        var end = arguments.length <= 1 || arguments[1] === undefined ? new Date() : arguments[1];

        return new Date(start.getTime() + Math.random() * (end.getTime() - start.getTime()));
    };

    var statuses = ['pending', 'subscribed'];

    exports['default'] = _emberCliMirage.Factory.extend({
        name: function name() {
            return _emberCliMirage.faker.name.firstName() + ' ' + _emberCliMirage.faker.name.lastName();
        },
        email: _emberCliMirage.faker.internet.email,
        status: function status() {
            return statuses[Math.floor(Math.random() * statuses.length)];
        },
        createdAt: function createdAt() {
            return randomDate();
        },
        updatedAt: null,
        createdBy: 0,
        updatedBy: null,
        unsubscribedAt: null
    });
});
define('ghost-admin/mirage/factories/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Factory.extend({
        createdAt: '2015-09-11T09:44:29.871Z',
        createdBy: 1,
        description: function description(i) {
            return 'Description for tag ' + i + '.';
        },
        visibility: 'public',
        image: function image(i) {
            return '/content/images/2015/10/tag-' + i + '.jpg';
        },
        metaDescription: function metaDescription(i) {
            return 'Meta description for tag ' + i + '.';
        },
        metaTitle: function metaTitle(i) {
            return 'Meta Title for tag ' + i;
        },
        name: function name(i) {
            return 'Tag ' + i;
        },
        parent: null,
        slug: function slug(i) {
            return 'tag-' + i;
        },
        updatedAt: '2015-10-19T16:25:07.756Z',
        updatedBy: 1,
        count: function count() {
            return {
                posts: 1
            };
        }
    });
});
define('ghost-admin/mirage/factories/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Factory.extend({
        accessibility: null,
        bio: null,
        cover: null,
        createdAt: '2015-09-02T13:41:50.000Z',
        createdBy: null,
        email: function email(i) {
            return 'user-' + i + '@example.com';
        },
        image: '//www.gravatar.com/avatar/3ae045bc198a157401827c8455cd7c99?s=250&d=mm&r=x',
        language: 'en_US',
        lastLogin: '2015-11-02T16:12:05.000Z',
        location: null,
        metaDescription: null,
        metaTitle: null,
        name: function name(i) {
            return 'User ' + i;
        },
        slug: function slug(i) {
            return 'user-' + i;
        },
        status: 'active',
        tour: null,
        updatedAt: '2015-11-02T16:12:05.000Z',
        updatedBy: '2015-09-02T13:41:50.000Z',
        website: 'http://example.com',
        roles: []
    });
});
define('ghost-admin/mirage/fixtures/configurations', ['exports'], function (exports) {
    exports['default'] = [{
        blogTitle: 'Test Blog',
        blogUrl: 'http://localhost:7357/',
        clientId: 'ghost-admin',
        clientSecret: '1234ClientSecret',
        fileStorage: 'true',
        // these are valid attrs but we want password auth by default in tests
        // ghostAuthId: '1234GhostAuthId',
        // ghostAuthUrl: 'http://devauth.ghost.org:8080',
        internalTags: 'false',
        publicAPI: 'false',
        routeKeywords: {
            tag: 'tag',
            author: 'author',
            page: 'page',
            preview: 'p',
            'private': 'private'
        },
        useGravatar: 'true'
    }];
});
define('ghost-admin/mirage/fixtures/roles', ['exports'], function (exports) {
    /* eslint-disable camelcase */
    exports['default'] = [{
        id: 1,
        name: 'Administrator',
        description: 'Administrators',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 2,
        name: 'Editor',
        description: 'Editors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 3,
        name: 'Author',
        description: 'Authors',
        created_at: '2015-11-13T16:01:29.131Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.131Z',
        updated_by: 1
    }, {
        id: 4,
        name: 'Owner',
        description: 'Blog Owner',
        created_at: '2015-11-13T16:01:29.132Z',
        created_by: 1,
        updated_at: '2015-11-13T16:01:29.132Z',
        updated_by: 1
    }];
});
define('ghost-admin/mirage/fixtures/settings', ['exports'], function (exports) {
    /* eslint-disable camelcase */
    exports['default'] = [{
        id: 1,
        created_at: '2015-09-11T09:44:30.805Z',
        created_by: 1,
        key: 'title',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.195Z',
        updated_by: 1,
        value: 'Test Blog'
    }, {
        id: 2,
        created_at: '2015-09-11T09:44:30.806Z',
        created_by: 1,
        key: 'description',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.198Z',
        updated_by: 1,
        value: 'Thoughts, stories and ideas.'
    }, {
        id: 3,
        key: 'logo',
        value: '/content/images/2013/Nov/logo.png',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.273Z',
        updated_by: 1
    }, {
        id: 4,
        key: 'cover',
        value: '/content/images/2014/Feb/cover.jpg',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }, {
        id: 5,
        key: 'defaultLang',
        value: 'en_US',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.278Z',
        updated_by: 1
    }, {
        id: 6,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'postsPerPage',
        type: 'blog',
        updated_at: '2015-10-04T16:26:05.211Z',
        updated_by: 1,
        value: '5'
    }, {
        id: 7,
        key: 'forceI18n',
        value: 'true',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.280Z',
        updated_by: 1
    }, {
        id: 8,
        key: 'activeTheme',
        value: 'casper',
        type: 'theme',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.284Z',
        updated_by: 1
    }, {
        id: 9,
        key: 'permalinks',
        value: '/:slug/',
        type: 'blog',
        created_at: '2014-01-14T12:01:51.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.282Z',
        updated_by: 1
    }, {
        id: 10,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'ghost_head',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        value: ''
    }, {
        id: 11,
        created_at: '2015-09-11T09:44:30.809Z',
        created_by: 1,
        key: 'ghost_foot',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.858Z',
        updated_by: 1,
        value: ''
    }, {
        id: 12,
        key: 'labs',
        value: '{"subscribers":true}',
        type: 'blog',
        created_at: '2015-01-12T18:29:01.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.288Z',
        updated_by: 1
    }, {
        id: 13,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'navigation',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: JSON.stringify([{ label: 'Home', url: '/' }, { label: 'About', url: '/about' }])
    }, {
        id: 14,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'isPrivate',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: false
    }, {
        id: 15,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'password',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: ''
    }, {
        id: 16,
        created_at: '2016-05-05T15:04:03.115Z',
        created_by: 1,
        key: 'slack',
        type: 'blog',
        updated_at: '2016-05-05T18:33:09.168Z',
        updated_by: 1,
        value: '[{"url":""}]'
    }, {
        id: 17,
        created_at: '2016-05-05T15:40:12.133Z',
        created_by: 1,
        key: 'facebook',
        type: 'blog',
        updated_at: '2016-05-08T15:20:25.953Z',
        updated_by: 1,
        value: 'test'
    }, {
        id: 18,
        created_at: '2016-05-05T15:40:12.134Z',
        created_by: 1,
        key: 'twitter',
        type: 'blog',
        updated_at: '2016-05-08T15:20:25.954Z',
        updated_by: 1,
        value: '@test'
    }, {
        id: 19,
        created_at: '2015-09-11T09:44:30.810Z',
        created_by: 1,
        key: 'activeTimezone',
        type: 'blog',
        updated_at: '2015-09-23T13:32:49.868Z',
        updated_by: 1,
        value: 'Etc/UTC'
    }, {
        id: 20,
        key: 'availableThemes',
        value: [{
            name: 'casper',
            'package': {
                name: 'Blog',
                version: '1.0'
            },
            active: true
        }, {
            name: 'foo',
            'package': {
                name: 'Foo',
                version: '0.1'
            }
        }, {
            name: 'bar'
        }],
        type: 'theme'
    }, {
        id: 21,
        created_at: '2017-01-09T08:40:59.000Z',
        created_by: 1,
        key: 'amp',
        type: 'blog',
        updated_at: '2017-01-09T08:49:42.991Z',
        updated_by: 1,
        value: 'true'
    }, {
        id: 22,
        key: 'icon',
        value: '/content/images/2014/Feb/favicon.ico',
        type: 'blog',
        created_at: '2013-11-25T14:48:11.000Z',
        created_by: 1,
        updated_at: '2015-10-27T17:39:58.276Z',
        updated_by: 1
    }];
});
define('ghost-admin/mirage/fixtures/timezones', ['exports'], function (exports) {
    exports['default'] = [{
        name: 'Pacific/Pago_Pago',
        label: '(GMT -11:00) Midway Island, Samoa'
    }, {
        name: 'Pacific/Honolulu',
        label: '(GMT -10:00) Hawaii'
    }, {
        name: 'America/Anchorage',
        label: '(GMT -9:00) Alaska'
    }, {
        name: 'America/Tijuana',
        label: '(GMT -8:00) Chihuahua, La Paz, Mazatlan'
    }, {
        name: 'America/Los_Angeles',
        label: '(GMT -8:00) Pacific Time (US & Canada); Tijuana'
    }, {
        name: 'America/Phoenix',
        label: '(GMT -7:00) Arizona'
    }, {
        name: 'America/Denver',
        label: '(GMT -7:00) Mountain Time (US & Canada)'
    }, {
        name: 'America/Costa_Rica',
        label: '(GMT -6:00) Central America'
    }, {
        name: 'America/Chicago',
        label: '(GMT -6:00) Central Time (US & Canada)'
    }, {
        name: 'America/Mexico_City',
        label: '(GMT -6:00) Guadalajara, Mexico City, Monterrey'
    }, {
        name: 'America/Regina',
        label: '(GMT -6:00) Saskatchewan'
    }, {
        name: 'America/Bogota',
        label: '(GMT -5:00) Bogota, Lima, Quito'
    }, {
        name: 'America/New_York',
        label: '(GMT -5:00) Eastern Time (US & Canada)'
    }, {
        name: 'America/Fort_Wayne',
        label: '(GMT -5:00) Indiana (East)'
    }, {
        name: 'America/Caracas',
        label: '(GMT -4:00) Caracas, La Paz'
    }, {
        name: 'America/Halifax',
        label: '(GMT -4:00) Atlantic Time (Canada); Brasilia, Greenland'
    }, {
        name: 'America/Santiago',
        label: '(GMT -4:00) Santiago'
    }, {
        name: 'America/St_Johns',
        label: '(GMT -3:30) Newfoundland'
    }, {
        name: 'America/Argentina/Buenos_Aires',
        label: '(GMT -3:00) Buenos Aires, Georgetown'
    }, {
        name: 'America/Noronha',
        label: '(GMT -2:00) Fernando de Noronha'
    }, {
        name: 'Atlantic/Azores',
        label: '(GMT -1:00) Azores'
    }, {
        name: 'Atlantic/Cape_Verde',
        label: '(GMT -1:00) Cape Verde Is.'
    }, {
        name: 'Etc/UTC',
        label: '(GMT) UTC'
    }, {
        name: 'Africa/Casablanca',
        label: '(GMT +0:00) Casablanca, Monrovia'
    }, {
        name: 'Europe/Dublin',
        label: '(GMT +0:00) Dublin, Edinburgh, London'
    }, {
        name: 'Europe/Amsterdam',
        label: '(GMT +1:00) Amsterdam, Berlin, Rome, Stockholm, Vienna'
    }, {
        name: 'Europe/Prague',
        label: '(GMT +1:00) Belgrade, Bratislava, Budapest, Prague'
    }, {
        name: 'Europe/Paris',
        label: '(GMT +1:00) Brussels, Copenhagen, Madrid, Paris'
    }, {
        name: 'Europe/Warsaw',
        label: '(GMT +1:00) Sarajevo, Skopje, Warsaw, Zagreb'
    }, {
        name: 'Africa/Lagos',
        label: '(GMT +1:00) West Central Africa'
    }, {
        name: 'Europe/Istanbul',
        label: '(GMT +2:00) Athens, Beirut, Bucharest, Istanbul'
    }, {
        name: 'Africa/Cairo',
        label: '(GMT +2:00) Cairo, Egypt'
    }, {
        name: 'Africa/Maputo',
        label: '(GMT +2:00) Harare'
    }, {
        name: 'Europe/Kiev',
        label: '(GMT +2:00) Helsinki, Kiev, Riga, Sofia, Tallinn, Vilnius'
    }, {
        name: 'Asia/Jerusalem',
        label: '(GMT +2:00) Jerusalem'
    }, {
        name: 'Africa/Johannesburg',
        label: '(GMT +2:00) Pretoria'
    }, {
        name: 'Asia/Baghdad',
        label: '(GMT +3:00) Baghdad'
    }, {
        name: 'Asia/Riyadh',
        label: '(GMT +3:00) Kuwait, Nairobi, Riyadh'
    }, {
        name: 'Europe/Moscow',
        label: '(GMT +3:00) Moscow, St. Petersburg, Volgograd'
    }, {
        name: 'Asia/Tehran',
        label: '(GMT +3:30) Tehran'
    }, {
        name: 'Asia/Dubai',
        label: '(GMT +4:00) Abu Dhabi, Muscat'
    }, {
        name: 'Asia/Baku',
        label: '(GMT +4:00) Baku, Tbilisi, Yerevan'
    }, {
        name: 'Asia/Kabul',
        label: '(GMT +4:30) Kabul'
    }, {
        name: 'Asia/Karachi',
        label: '(GMT +5:00) Islamabad, Karachi, Tashkent'
    }, {
        name: 'Asia/Yekaterinburg',
        label: '(GMT +5:00) Yekaterinburg'
    }, {
        name: 'Asia/Kolkata',
        label: '(GMT +5:30) Chennai, Calcutta, Mumbai, New Delhi'
    }, {
        name: 'Asia/Kathmandu',
        label: '(GMT +5:45) Katmandu'
    }, {
        name: 'Asia/Almaty',
        label: '(GMT +6:00) Almaty, Novosibirsk'
    }, {
        name: 'Asia/Dhaka',
        label: '(GMT +6:00) Astana, Dhaka, Sri Jayawardenepura'
    }, {
        name: 'Asia/Rangoon',
        label: '(GMT +6:30) Rangoon'
    }, {
        name: 'Asia/Bangkok',
        label: '(GMT +7:00) Bangkok, Hanoi, Jakarta'
    }, {
        name: 'Asia/Krasnoyarsk',
        label: '(GMT +7:00) Krasnoyarsk'
    }, {
        name: 'Asia/Hong_Kong',
        label: '(GMT +8:00) Beijing, Chongqing, Hong Kong, Urumqi'
    }, {
        name: 'Asia/Irkutsk',
        label: '(GMT +8:00) Irkutsk, Ulaan Bataar'
    }, {
        name: 'Asia/Singapore',
        label: '(GMT +8:00) Kuala Lumpur, Perth, Singapore, Taipei'
    }, {
        name: 'Asia/Tokyo',
        label: '(GMT +9:00) Osaka, Sapporo, Tokyo'
    }, {
        name: 'Asia/Seoul',
        label: '(GMT +9:00) Seoul'
    }, {
        name: 'Asia/Yakutsk',
        label: '(GMT +9:00) Yakutsk'
    }, {
        name: 'Australia/Adelaide',
        label: '(GMT +9:30) Adelaide'
    }, {
        name: 'Australia/Darwin',
        label: '(GMT +9:30) Darwin'
    }, {
        name: 'Australia/Brisbane',
        label: '(GMT +10:00) Brisbane, Guam, Port Moresby'
    }, {
        name: 'Australia/Sydney',
        label: '(GMT +10:00) Canberra, Hobart, Melbourne, Sydney, Vladivostok'
    }, {
        name: 'Asia/Magadan',
        label: '(GMT +11:00) Magadan, Soloman Is., New Caledonia'
    }, {
        name: 'Pacific/Auckland',
        label: '(GMT +12:00) Auckland, Wellington'
    }, {
        name: 'Pacific/Fiji',
        label: '(GMT +12:00) Fiji, Kamchatka, Marshall Is.'
    }, {
        name: 'Pacific/Kwajalein',
        label: '(GMT +12:00) International Date Line West'
    }];
});
define('ghost-admin/mirage/models/invite', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/notification', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/post', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend();
});
define('ghost-admin/mirage/models/role', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/subscriber', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/tag', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
  exports['default'] = _emberCliMirage.Model.extend({});
});
define('ghost-admin/mirage/models/user', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports['default'] = _emberCliMirage.Model.extend({
        // used by the serializer to determine whether
        // or not to include the post count
        postCount: false,

        roles: (0, _emberCliMirage.hasMany)(),
        posts: (0, _emberCliMirage.hasMany)()
    });
});
define('ghost-admin/mirage/scenarios/default', ['exports'], function (exports) {
    exports['default'] = function (server) {
        // Seed your development database using your factories. This
        // data will not be loaded in your tests.

        // server.createList('contact', 10);

        server.createList('subscriber', 125);
        server.createList('tag', 100);
    };
});
define('ghost-admin/mirage/serializers/application', ['exports', 'ember-cli-mirage', 'ember-cli-mirage/utils/inflector', 'ember-string'], function (exports, _emberCliMirage, _emberCliMirageUtilsInflector, _emberString) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberCliMirage.RestSerializer.extend({
        keyForAttribute: function keyForAttribute(attr) {
            return (0, _emberString.underscore)(attr);
        },

        serialize: function serialize(object, request) {
            // Ember expects pluralized responses for the post, user, and invite models,
            // and this shortcut will ensure that those models are pluralized
            if (this.isModel(object) && ['post', 'user', 'invite'].includes(object.modelName)) {
                object = new _emberCliMirage.Collection(object.modelName, [object]);
            }

            var json = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

            if (this.isCollection(object) && object.meta) {
                json.meta = object.meta;
            }

            return json;
        },

        // POST and PUT request send data in pluralized attributes for all models,
        // so we extract it here - this allows #normalizedRequestAttrs to work
        // in route functions
        normalize: function normalize(body, modelName) {
            // sometimes mirage doesn't include a modelName, so we extrapolate it from
            // the first element of Object.keys
            modelName = (0, _emberCliMirageUtilsInflector.pluralize)(modelName) || Object.keys(body)[0];

            var _ref = body[modelName] || [{}];

            var _ref2 = _slicedToArray(_ref, 1);

            var attributes = _ref2[0];

            return { data: { attributes: attributes } };
        }
    });
});
define('ghost-admin/mirage/serializers/user', ['exports', 'ghost-admin/mirage/serializers/application', 'ember-cli-mirage'], function (exports, _ghostAdminMirageSerializersApplication, _emberCliMirage) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _ghostAdminMirageSerializersApplication['default'].extend({
        serialize: function serialize(object, request) {
            if (this.isCollection(object)) {
                return _ghostAdminMirageSerializersApplication['default'].prototype.serialize.apply(this, arguments);
            }

            var _RestSerializer$prototype$serialize$call = _emberCliMirage.RestSerializer.prototype.serialize.call(this, object, request);

            var user = _RestSerializer$prototype$serialize$call.user;

            if (object.postCount) {
                var posts = object.posts.models.length;

                user.count = { posts: posts };
            }

            var roles = _ghostAdminMirageSerializersApplication['default'].prototype.serialize.call(this, object.roles, request);

            var _roles$roles = _slicedToArray(roles.roles, 1);

            var role = _roles$roles[0];

            if (role) {
                user.roles = [role];
            }

            return { users: [user] };
        }
    });
});
define('ghost-admin/mirage/utils', ['exports', 'ember-cli-mirage'], function (exports, _emberCliMirage) {
    exports.paginatedResponse = paginatedResponse;
    exports.paginateModelArray = paginateModelArray;
    exports.maintenanceResponse = maintenanceResponse;
    exports.versionMismatchResponse = versionMismatchResponse;

    function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

    function paginatedResponse(modelName) {
        return function (schema, request) {
            var page = +request.queryParams.page || 1;
            var limit = +request.queryParams.limit || 15;
            var allModels = this.serialize(schema[modelName].all())[modelName];

            return paginateModelArray(modelName, allModels, page, limit);
        };
    }

    function paginateModelArray(modelName, allModels, page, limit) {
        var pages = undefined,
            next = undefined,
            prev = undefined,
            models = undefined;

        if (limit === 'all') {
            pages = 1;
        } else {
            limit = +limit;

            var start = (page - 1) * limit;
            var end = start + limit;

            pages = Math.ceil(allModels.length / limit);
            models = allModels.slice(start, end);

            if (start > 0) {
                prev = page - 1;
            }

            if (end < allModels.length) {
                next = page + 1;
            }
        }

        return _defineProperty({
            meta: {
                pagination: {
                    page: page,
                    limit: limit,
                    pages: pages,
                    total: allModels.length,
                    next: next || null,
                    prev: prev || null
                }
            }
        }, modelName, models || allModels);
    }

    function maintenanceResponse() {
        return new _emberCliMirage.Response(503, {}, {
            errors: [{
                errorType: 'Maintenance'
            }]
        });
    }

    function versionMismatchResponse() {
        return new _emberCliMirage.Response(400, {}, {
            errors: [{
                errorType: 'VersionMismatchError'
            }]
        });
    }
});
/* eslint-disable max-statements-per-line */
define('ghost-admin/mixins/active-link', ['exports', 'ember-cli-active-link-wrapper/mixins/active-link'], function (exports, _emberCliActiveLinkWrapperMixinsActiveLink) {
  exports['default'] = _emberCliActiveLinkWrapperMixinsActiveLink['default'];
});
define('ghost-admin/mixins/body-event-listener', ['exports', 'jquery', 'ember-runloop', 'ember-metal/mixin'], function (exports, _jquery, _emberRunloop, _emberMetalMixin) {

    function K() {
        return this;
    }

    // Code modified from Addepar/ember-widgets
    // https://github.com/Addepar/ember-widgets/blob/master/src/mixins.coffee#L39

    exports['default'] = _emberMetalMixin['default'].create({
        bodyElementSelector: 'html',
        bodyClick: K,

        init: function init() {
            this._super.apply(this, arguments);

            return _emberRunloop['default'].next(this, this._setupDocumentHandlers);
        },

        willDestroy: function willDestroy() {
            this._super.apply(this, arguments);

            return this._removeDocumentHandlers();
        },

        _setupDocumentHandlers: function _setupDocumentHandlers() {
            var _this = this;

            if (this._clickHandler) {
                return;
            }

            this._clickHandler = function () {
                return _this.bodyClick();
            };

            return (0, _jquery['default'])(this.get('bodyElementSelector')).on('click', this._clickHandler);
        },

        _removeDocumentHandlers: function _removeDocumentHandlers() {
            (0, _jquery['default'])(this.get('bodyElementSelector')).off('click', this._clickHandler);
            this._clickHandler = null;
        },

        // http://stackoverflow.com/questions/152975/how-to-detect-a-click-outside-an-element
        click: function click(event) {
            return event.stopPropagation();
        }
    });
});
define('ghost-admin/mixins/current-user-settings', ['exports', 'ember-metal/mixin'], function (exports, _emberMetalMixin) {
    exports['default'] = _emberMetalMixin['default'].create({
        transitionAuthor: function transitionAuthor() {
            var _this = this;

            return function (user) {
                if (user.get('isAuthor')) {
                    return _this.transitionTo('team.user', user);
                }

                return user;
            };
        },

        transitionEditor: function transitionEditor() {
            var _this2 = this;

            return function (user) {
                if (user.get('isEditor')) {
                    return _this2.transitionTo('team');
                }

                return user;
            };
        }
    });
});
define('ghost-admin/mixins/dropdown-mixin', ['exports', 'ember-metal/mixin', 'ember-evented'], function (exports, _emberMetalMixin, _emberEvented) {

    /*
      Dropdowns and their buttons are evented and do not propagate clicks.
    */
    exports['default'] = _emberMetalMixin['default'].create(_emberEvented['default'], {
        classNameBindings: ['isOpen:open:closed'],
        isOpen: false,

        click: function click(event) {
            this._super(event);

            return event.stopPropagation();
        }
    });
});
define('ghost-admin/mixins/editor-base-controller', ['exports', 'ember', 'ember-metal/mixin', 'rsvp', 'ember-computed', 'ember-service/inject', 'ember-controller/inject', 'ember-string', 'ember-metal/observer', 'ember-runloop', 'ember-array/utils', 'ember-utils', 'ember-concurrency', 'ghost-admin/models/post', 'ghost-admin/utils/bound-one-way', 'ghost-admin/services/ajax', 'ember-ajax/errors', 'jquery', 'ghost-admin/utils/ghost-paths'], function (exports, _ember, _emberMetalMixin, _rsvp, _emberComputed, _emberServiceInject, _emberControllerInject, _emberString, _emberMetalObserver, _emberRunloop, _emberArrayUtils, _emberUtils, _emberConcurrency, _ghostAdminModelsPost, _ghostAdminUtilsBoundOneWay, _ghostAdminServicesAjax, _emberAjaxErrors, _jquery, _ghostAdminUtilsGhostPaths) {
    var resolve = _rsvp['default'].resolve;

    // this array will hold properties we need to watch
    // to know if the model has been changed (`controller.hasDirtyAttributes`)
    var watchedProps = ['model.scratch', 'model.titleScratch', 'model.hasDirtyAttributes', 'model.tags.[]'];

    _ghostAdminModelsPost['default'].eachAttribute(function (name) {
        watchedProps.push('model.' + name);
    });

    exports['default'] = _emberMetalMixin['default'].create({
        _autoSaveId: null,
        _timedSaveId: null,
        submitting: false,

        showLeaveEditorModal: false,
        showReAuthenticateModal: false,

        postSettingsMenuController: (0, _emberControllerInject['default'])('post-settings-menu'),
        notifications: (0, _emberServiceInject['default'])(),
        clock: (0, _emberServiceInject['default'])(),
        slugGenerator: (0, _emberServiceInject['default'])(),

        cards: [], // for apps
        atoms: [], // for apps
        toolbar: [], // for apps
        apiRoot: (0, _ghostAdminUtilsGhostPaths['default'])().apiRoot,
        assetPath: (0, _ghostAdminUtilsGhostPaths['default'])().assetRoot,

        init: function init() {
            var _this = this;

            this._super.apply(this, arguments);
            window.onbeforeunload = function () {
                return _this.get('hasDirtyAttributes') ? _this.unloadDirtyMessage() : null;
            };
        },

        shouldFocusTitle: (0, _emberComputed.alias)('model.isNew'),
        shouldFocusEditor: false,

        autoSave: (0, _emberMetalObserver['default'])('model.scratch', function () {
            // Don't save just because we swapped out models
            if (this.get('model.isDraft') && !this.get('model.isNew')) {
                var autoSaveId = undefined,
                    saveOptions = undefined,
                    timedSaveId = undefined;

                saveOptions = {
                    silent: true,
                    backgroundSave: true
                };

                timedSaveId = _emberRunloop['default'].throttle(this, 'send', 'save', saveOptions, 60000, false);
                this._timedSaveId = timedSaveId;

                autoSaveId = _emberRunloop['default'].debounce(this, 'send', 'save', saveOptions, 3000);
                this._autoSaveId = autoSaveId;
            }
        }),

        /**
         * By default, a post will not change its publish state.
         * Only with a user-set value (via setSaveType action)
         * can the post's status change.
         */
        willPublish: (0, _ghostAdminUtilsBoundOneWay['default'])('model.isPublished'),
        willSchedule: (0, _ghostAdminUtilsBoundOneWay['default'])('model.isScheduled'),
        scheduledWillPublish: (0, _ghostAdminUtilsBoundOneWay['default'])('model.isPublished'),

        // set by the editor route and `hasDirtyAttributes`. useful when checking
        // whether the number of tags has changed for `hasDirtyAttributes`.
        previousTagNames: null,

        tagNames: (0, _emberComputed.mapBy)('model.tags', 'name'),

        postOrPage: (0, _emberComputed['default'])('model.page', function () {
            return this.get('model.page') ? 'Page' : 'Post';
        }),

        // countdown timer to show the time left until publish time for a scheduled post
        // starts 15 minutes before scheduled time
        scheduleCountdown: (0, _emberComputed['default'])('model.status', 'clock.second', 'model.publishedAtUTC', 'model.timeScheduled', function () {
            var status = this.get('model.status');
            var publishTime = this.get('model.publishedAtUTC');

            this.get('clock.second');

            if (this.get('model.timeScheduled') && status === 'scheduled' && publishTime.diff(moment.utc(new Date()), 'minutes', true) < 15) {
                return moment(publishTime).fromNow();
            } else {
                return false;
            }
        }),

        // statusFreeze has two tasks:
        // 1. 2 minutes before the scheduled time it will return true to change the button layout in gh-editor-save-button. There will be no
        //    dropdown menu, the save button gets the status 'isDangerous' to turn red and will only have the option to unschedule the post
        // 2. when the scheduled time is reached we use a helper 'scheduledWillPublish' to pretend we're already dealing with a published post.
        //    This will take effect on the save button menu, the workflows and existing conditionals.
        statusFreeze: (0, _emberComputed['default'])('model.status', 'clock.second', 'model.publishedAtUTC', 'model.timeScheduled', function () {
            var status = this.get('model.status');
            var publishTime = this.get('model.publishedAtUTC');

            this.get('clock.second');

            if (this.get('model.timeScheduled') && status === 'scheduled' && publishTime.diff(moment.utc(new Date()), 'minutes', true) < 2) {
                return true;
            } else if (!this.get('model.timeScheduled') && !this.get('scheduledWillPublish') && status === 'scheduled' && publishTime.diff(moment.utc(new Date()), 'hours', true) < 0) {
                // set the helper to true, until the model refreshed
                this.set('scheduledWillPublish', true);
                this.showSaveNotification('scheduled', 'published', false);
                return false;
            } else {
                return false;
            }
        }),

        // compares previousTagNames to tagNames
        tagNamesEqual: function tagNamesEqual() {
            var tagNames = this.get('tagNames') || [];
            var previousTagNames = this.get('previousTagNames') || [];
            var hashCurrent = undefined,
                hashPrevious = undefined;

            // beware! even if they have the same length,
            // that doesn't mean they're the same.
            if (tagNames.length !== previousTagNames.length) {
                return false;
            }

            // instead of comparing with slow, nested for loops,
            // perform join on each array and compare the strings
            hashCurrent = tagNames.join('');
            hashPrevious = previousTagNames.join('');

            return hashCurrent === hashPrevious;
        },

        // a hook created in editor-base-route's setupController
        modelSaved: function modelSaved() {
            var model = this.get('model');

            // safer to updateTags on save in one place
            // rather than in all other places save is called
            model.updateTags();

            // set previousTagNames to current tagNames for hasDirtyAttributes check
            this.set('previousTagNames', this.get('tagNames'));

            // `updateTags` triggers `hasDirtyAttributes => true`.
            // for a saved model it would otherwise be false.

            // if the two "scratch" properties (title and content) match the model, then
            // it's ok to set hasDirtyAttributes to false
            if (model.get('titleScratch') === model.get('title') && JSON.stringify(model.get('scratch')) === JSON.stringify(model.get('mobiledoc'))) {
                this.set('hasDirtyAttributes', false);
            }
        },

        // an ugly hack, but necessary to watch all the model's properties
        // and more, without having to be explicit and do it manually
        hasDirtyAttributes: _emberComputed['default'].apply(_ember['default'], watchedProps.concat({
            get: function get() {
                var model = this.get('model');

                if (!model) {
                    return false;
                }

                // let markdown = model.get('markdown');
                var mobiledoc = model.get('mobiledoc');
                var title = model.get('title');
                var titleScratch = model.get('titleScratch');
                var scratch = this.get('model.scratch');
                var changedAttributes = undefined;

                if (!this.tagNamesEqual()) {
                    return true;
                }

                if (titleScratch !== title) {
                    return true;
                }

                // since `scratch` is not model property, we need to check
                // it explicitly against the model's mobiledoc attribute
                // TODO either deep equals or compare the serialised version - RYAN
                if (mobiledoc !== scratch) {
                    return true;
                }

                // if the Adapter failed to save the model isError will be true
                // and we should consider the model still dirty.
                if (model.get('isError')) {
                    return true;
                }

                // models created on the client always return `hasDirtyAttributes: true`,
                // so we need to see which properties have actually changed.
                if (model.get('isNew')) {
                    changedAttributes = Object.keys(model.changedAttributes());

                    if (changedAttributes.length) {
                        return true;
                    }

                    return false;
                }

                // even though we use the `scratch` prop to show edits,
                // which does *not* change the model's `hasDirtyAttributes` property,
                // `hasDirtyAttributes` will tell us if the other props have changed,
                // as long as the model is not new (model.isNew === false).
                return model.get('hasDirtyAttributes');
            },
            set: function set(key, value) {
                return value;
            }
        })),

        // used on window.onbeforeunload
        unloadDirtyMessage: function unloadDirtyMessage() {
            return '==============================\n\n' + 'Hey there! It looks like you\'re in the middle of writing' + ' something and you haven\'t saved all of your content.' + '\n\nSave before you go!\n\n' + '==============================';
        },

        // TODO: This has to be moved to the I18n localization file.
        // This structure is supposed to be close to the i18n-localization which will be used soon.
        messageMap: {
            errors: {
                post: {
                    published: {
                        published: 'Update failed',
                        draft: 'Saving failed',
                        scheduled: 'Scheduling failed'
                    },
                    draft: {
                        published: 'Publish failed',
                        draft: 'Saving failed',
                        scheduled: 'Scheduling failed'
                    },
                    scheduled: {
                        scheduled: 'Updated failed',
                        draft: 'Unscheduling failed',
                        published: 'Publish failed'
                    }

                }
            },

            success: {
                post: {
                    published: {
                        published: 'Updated.',
                        draft: 'Saved.',
                        scheduled: 'Scheduled.'
                    },
                    draft: {
                        published: 'Published!',
                        draft: 'Saved.',
                        scheduled: 'Scheduled.'
                    },
                    scheduled: {
                        scheduled: 'Updated.',
                        draft: 'Unscheduled.',
                        published: 'Published!'
                    }
                }
            }
        },

        // TODO: Update for new notification click-action API
        showSaveNotification: function showSaveNotification(prevStatus, status, delay) {
            var message = this.messageMap.success.post[prevStatus][status];
            var notifications = this.get('notifications');
            var type = undefined,
                path = undefined;

            if (status === 'published') {
                type = this.get('postOrPage');
                path = this.get('model.absoluteUrl');
            } else {
                type = 'Preview';
                path = this.get('model.previewUrl');
            }

            message += '&nbsp;<a href="' + path + '" target="_blank">View ' + type + '</a>';

            notifications.showNotification(message.htmlSafe(), { delayed: delay });
        },

        showErrorAlert: function showErrorAlert(prevStatus, status, error, delay) {
            var message = this.messageMap.errors.post[prevStatus][status];
            var notifications = this.get('notifications');
            var errorMessage = undefined;

            function isString(str) {
                /* global toString */
                return toString.call(str) === '[object String]';
            }

            if (error && isString(error)) {
                errorMessage = error;
            } else if (error && (0, _emberArrayUtils.isEmberArray)(error)) {
                // This is here because validation errors are returned as an array
                // TODO: remove this once validations are fixed
                errorMessage = error[0];
            } else if (error && error.errors && error.errors[0].message) {
                errorMessage = error.errors[0].message;
            } else {
                errorMessage = 'Unknown Error';
            }

            message += ': ' + errorMessage;
            message = (0, _emberString.htmlSafe)(message);

            notifications.showAlert(message, { type: 'error', delayed: delay, key: 'post.save' });
        },

        updateTitle: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0(newTitle) {
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        this.set('model.titleScratch', newTitle);

                        // if model is not new and title is not '(Untitled)', or model is new and
                        // has a title, don't generate a slug

                        if (!((!this.get('model.isNew') || this.get('model.title')) && newTitle !== '(Untitled)')) {
                            context$1$0.next = 3;
                            break;
                        }

                        return context$1$0.abrupt('return');

                    case 3:
                        context$1$0.next = 5;
                        return (0, _emberConcurrency.timeout)(700);

                    case 5:
                        context$1$0.next = 7;
                        return this.get('generateSlug').perform();

                    case 7:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this);
        })).restartable(),

        generateSlug: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var title, slug;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        title = this.get('model.titleScratch');

                        if (!(title === '(Untitled)' && this.get('model.slug'))) {
                            context$1$0.next = 3;
                            break;
                        }

                        return context$1$0.abrupt('return');

                    case 3:
                        context$1$0.prev = 3;
                        context$1$0.next = 6;
                        return this.get('slugGenerator').generateSlug('post', title);

                    case 6:
                        slug = context$1$0.sent;

                        if (!(0, _emberUtils.isBlank)(slug)) {
                            this.set('model.slug', slug);
                        }
                        context$1$0.next = 13;
                        break;

                    case 10:
                        context$1$0.prev = 10;
                        context$1$0.t0 = context$1$0['catch'](3);

                        // Nothing to do (would be nice to log this somewhere though),
                        // but a rejected promise needs to be handled here so that a resolved
                        // promise is returned.
                        if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(context$1$0.t0)) {
                            this.get('notifications').showAPIError(context$1$0.t0);
                        }

                    case 13:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[3, 10]]);
        })).enqueue(),

        actions: {
            cancelTimers: function cancelTimers() {
                var autoSaveId = this._autoSaveId;
                var timedSaveId = this._timedSaveId;

                if (autoSaveId) {
                    _emberRunloop['default'].cancel(autoSaveId);
                    this._autoSaveId = null;
                }

                if (timedSaveId) {
                    _emberRunloop['default'].cancel(timedSaveId);
                    this._timedSaveId = null;
                }
            },

            save: function save(options) {
                var _this2 = this;

                var prevStatus = this.get('model.status');
                var isNew = this.get('model.isNew');
                var psmController = this.get('postSettingsMenuController');
                var promise = undefined,
                    status = undefined;

                options = options || {};
                this.toggleProperty('submitting');
                if (options.backgroundSave) {
                    // do not allow a post's status to be set to published by a background save
                    status = 'draft';
                } else {
                    if (this.get('scheduledWillPublish')) {
                        status = !this.get('willSchedule') && !this.get('willPublish') ? 'draft' : 'published';
                    } else {
                        if (this.get('willPublish') && !this.get('model.isScheduled') && !this.get('statusFreeze')) {
                            status = 'published';
                        } else if (this.get('willSchedule') && !this.get('model.isPublished') && !this.get('statusFreeze')) {
                            status = 'scheduled';
                        } else {
                            status = 'draft';
                        }
                    }
                }

                this.send('cancelTimers');

                // Set the properties that are indirected
                // set mobiledoc equal to what's in the editor, minus the image markers.
                this.set('model.mobiledoc', this.get('model.scratch'));
                this.set('model.status', status);

                // Set a default title
                if (!this.get('model.titleScratch').trim()) {
                    this.set('model.titleScratch', '(Untitled)');
                }

                this.set('model.title', this.get('model.titleScratch'));
                this.set('model.metaTitle', psmController.get('metaTitleScratch'));
                this.set('model.metaDescription', psmController.get('metaDescriptionScratch'));

                if (!this.get('model.slug')) {
                    this.get('updateTitle').cancelAll();

                    promise = this.get('generateSlug').perform();
                }

                return resolve(promise).then(function () {
                    return _this2.get('model').save(options).then(function (model) {
                        if (!options.silent) {
                            _this2.showSaveNotification(prevStatus, model.get('status'), isNew ? true : false);
                        }

                        _this2.toggleProperty('submitting');

                        // reset the helper CP back to false after saving and refetching the new model
                        // which is published by the scheduler process on the server now
                        if (_this2.get('scheduledWillPublish')) {
                            _this2.set('scheduledWillPublish', false);
                        }
                        return model;
                    });
                })['catch'](function (error) {
                    // re-throw if we have a general server error
                    if (error && !(0, _emberAjaxErrors.isInvalidError)(error)) {
                        _this2.toggleProperty('submitting');
                        _this2.send('error', error);
                        return;
                    }

                    if (!options.silent) {
                        error = error || _this2.get('model.errors.messages');
                        _this2.showErrorAlert(prevStatus, _this2.get('model.status'), error);
                    }

                    _this2.set('model.status', prevStatus);

                    _this2.toggleProperty('submitting');
                    return _this2.get('model');
                });
            },

            setSaveType: function setSaveType(newType) {
                if (newType === 'publish') {
                    this.set('willPublish', true);
                    this.set('willSchedule', false);
                } else if (newType === 'draft') {
                    this.set('willPublish', false);
                    this.set('willSchedule', false);
                } else if (newType === 'schedule') {
                    this.set('willSchedule', true);
                    this.set('willPublish', false);
                }
            },

            autoSaveNew: function autoSaveNew() {
                if (this.get('model.isNew')) {
                    this.send('save', { silent: true, backgroundSave: true });
                }
            },

            toggleLeaveEditorModal: function toggleLeaveEditorModal(transition) {
                this.set('leaveEditorTransition', transition);
                this.toggleProperty('showLeaveEditorModal');
            },

            leaveEditor: function leaveEditor() {
                var transition = this.get('leaveEditorTransition');
                var model = this.get('model');

                if (!transition) {
                    this.get('notifications').showAlert('Sorry, there was an error in the application. Please let the Ghost team know what happened.', { type: 'error' });
                    return;
                }

                // definitely want to clear the data store and post of any unsaved, client-generated tags
                model.updateTags();

                if (model.get('isNew')) {
                    // the user doesn't want to save the new, unsaved post, so delete it.
                    model.deleteRecord();
                } else {
                    // roll back changes on model props
                    model.rollbackAttributes();
                }

                // setting hasDirtyAttributes to false here allows willTransition on the editor route to succeed
                this.set('hasDirtyAttributes', false);

                // since the transition is now certain to complete, we can unset window.onbeforeunload here
                window.onbeforeunload = null;

                return transition.retry();
            },

            updateTitle: function updateTitle() {
                var currentTitle = this.model.get('title');
                var newTitle = this.model.get('titleScratch').trim();

                if (currentTitle === newTitle) {
                    return;
                }

                if (this.get('model.isDraft') && !this.get('model.isNew')) {
                    // this is preferrable to setting hasDirtyAttributes to false manually
                    this.model.set('title', newTitle);

                    this.send('save', {
                        silent: true,
                        backgroundSave: true
                    });
                }
            },

            toggleReAuthenticateModal: function toggleReAuthenticateModal() {
                this.toggleProperty('showReAuthenticateModal');
            },

            titleKeyDown: function titleKeyDown(event) {
                if (event.keyCode === 13 || event.keyCode === 40) {
                    // if the enter key or down key are pressed then focus on the editor
                    (0, _jquery['default'])('.__mobiledoc-editor').focus();
                }
            }
        }
    });
});

// debounce for 700 milliseconds

// Only set an "untitled" slug once per post
define('ghost-admin/mixins/editor-base-route', ['exports', 'jquery', 'ember-metal/mixin', 'rsvp', 'ember-runloop', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/mixins/style-body', 'ghost-admin/utils/ctrl-or-cmd'], function (exports, _jquery, _emberMetalMixin, _rsvp, _emberRunloop, _ghostAdminMixinsShortcutsRoute, _ghostAdminMixinsStyleBody, _ghostAdminUtilsCtrlOrCmd) {

    var generalShortcuts = {};
    generalShortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+alt+p'] = 'publish';

    exports['default'] = _emberMetalMixin['default'].create(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsShortcutsRoute['default'], {
        classNames: ['editor'],

        shortcuts: generalShortcuts,

        actions: {
            save: function save() {
                var selectedElement = (0, _jquery['default'])(document.activeElement);

                if (selectedElement.is('input[type="text"]')) {
                    selectedElement.trigger('focusout');
                }

                _emberRunloop['default'].scheduleOnce('actions', this, function () {
                    this.get('controller').send('save');
                });
            },

            publish: function publish() {
                var controller = this.get('controller');

                controller.send('setSaveType', 'publish');
                controller.send('save');
            },

            willTransition: function willTransition(transition) {
                var controller = this.get('controller');
                var scratch = controller.get('model.scratch');
                var controllerIsDirty = controller.get('hasDirtyAttributes');
                var model = controller.get('model');
                var state = model.getProperties('isDeleted', 'isSaving', 'hasDirtyAttributes', 'isNew');
                var deletedWithoutChanges = undefined,
                    fromNewToEdit = undefined;

                if (this.get('upgradeStatus.isRequired')) {
                    return this._super.apply(this, arguments);
                }

                // if a save is in-flight we don't know whether or not it's safe to leave
                // so we abort the transition and retry after the save has completed.
                if (state.isSaving) {
                    transition.abort();
                    return _emberRunloop['default'].later(this, function () {
                        _rsvp['default'].resolve(controller.get('lastPromise')).then(function () {
                            transition.retry();
                        });
                    }, 100);
                }

                fromNewToEdit = this.get('routeName') === 'editor.new' && transition.targetName === 'editor.edit' && transition.intent.contexts && transition.intent.contexts[0] && transition.intent.contexts[0].id === model.get('id');

                deletedWithoutChanges = state.isDeleted && (state.isSaving || !state.hasDirtyAttributes);

                if (!fromNewToEdit && !deletedWithoutChanges && controllerIsDirty) {
                    transition.abort();
                    controller.send('toggleLeaveEditorModal', transition);
                    return;
                }

                // The controller may hold model state that will be lost in the transition,
                // so we need to apply it now.
                if (fromNewToEdit && controllerIsDirty) {
                    if (scratch !== model.get('mobiledoc')) {
                        model.set('mobiledoc', scratch);
                    }
                }

                if (state.isNew) {
                    model.deleteRecord();
                }

                // since the transition is now certain to complete..
                window.onbeforeunload = null;

                // remove model-related listeners created in editor-base-route
                this.detachModelHooks(controller, model);
            }
        },

        renderTemplate: function renderTemplate(controller, model) {
            this._super(controller, model);

            this.render('post-settings-menu', {
                model: model,
                into: 'application',
                outlet: 'settings-menu'
            });
        },

        attachModelHooks: function attachModelHooks(controller, model) {
            // this will allow us to track when the model is saved and update the controller
            // so that we can be sure controller.hasDirtyAttributes is correct, without having to update the
            // controller on each instance of `model.save()`.
            //
            // another reason we can't do this on `model.save().then()` is because the post-settings-menu
            // also saves the model, and passing messages is difficult because we have two
            // types of editor controllers, and the PSM also exists on the posts.post route.
            //
            // The reason we can't just keep this functionality in the editor controller is
            // because we need to remove these handlers on `willTransition` in the editor route.
            model.on('didCreate', controller, controller.get('modelSaved'));
            model.on('didUpdate', controller, controller.get('modelSaved'));
        },

        detachModelHooks: function detachModelHooks(controller, model) {
            model.off('didCreate', controller, controller.get('modelSaved'));
            model.off('didUpdate', controller, controller.get('modelSaved'));
        },

        setupController: function setupController(controller, model) {
            var tags = model.get('tags');

            model.set('scratch', model.get('mobiledoc'));
            model.set('titleScratch', model.get('title'));

            this._super.apply(this, arguments);

            if (tags) {
                // used to check if anything has changed in the editor
                controller.set('previousTagNames', tags.mapBy('name'));
            } else {
                controller.set('previousTagNames', []);
            }

            // attach model-related listeners created in editor-base-route
            this.attachModelHooks(controller, model);
        }
    });
});
define('ghost-admin/mixins/infinite-scroll', ['exports', 'ember-metal/mixin', 'ember-runloop'], function (exports, _emberMetalMixin, _emberRunloop) {
    exports['default'] = _emberMetalMixin['default'].create({
        isLoading: false,
        triggerPoint: 100,

        /**
         * Determines if we are past a scroll point where we need to fetch the next page
         */
        _checkScroll: function _checkScroll() {
            var element = this.get('element');
            var triggerPoint = this.get('triggerPoint');
            var isLoading = this.get('isLoading');

            // If we haven't passed our threshold or we are already fetching content, exit
            if (isLoading || element.scrollTop + element.clientHeight + triggerPoint <= element.scrollHeight) {
                return;
            }

            this.sendAction('fetch');
        },

        didInsertElement: function didInsertElement() {
            this._super.apply(this, arguments);

            var el = this.get('element');

            el.onscroll = _emberRunloop['default'].bind(this, this._checkScroll);

            // run on load, on the offchance that the initial load
            // did not fill the view.
            this._checkScroll();
        },

        willDestroyElement: function willDestroyElement() {
            this._super.apply(this, arguments);

            // turn off the scroll handler
            this.get('element').onscroll = null;
        }
    });
});
define('ghost-admin/mixins/pagination', ['exports', 'ember-metal/mixin', 'ember-platform', 'ember-computed', 'rsvp', 'ember-service/inject'], function (exports, _emberMetalMixin, _emberPlatform, _emberComputed, _rsvp, _emberServiceInject) {

    var defaultPaginationSettings = {
        page: 1,
        limit: 15
    };

    exports['default'] = _emberMetalMixin['default'].create({
        notifications: (0, _emberServiceInject['default'])(),

        paginationModel: null,
        paginationSettings: null,

        // add a hook so that routes/controllers can do something with the meta data
        paginationMeta: (0, _emberComputed['default'])({
            get: function get() {
                return this._paginationMeta;
            },
            set: function set(key, value) {
                if (this.didReceivePaginationMeta) {
                    this.didReceivePaginationMeta(value);
                }
                this._paginationMeta = value;
                return value;
            }
        }),

        init: function init() {
            // don't merge defaults if paginationSettings is a CP
            if (!this.paginationSettings.isDescriptor) {
                var paginationSettings = this.get('paginationSettings');
                var settings = (0, _emberPlatform.assign)({}, defaultPaginationSettings, paginationSettings);

                this.set('paginationSettings', settings);
            }

            this.set('paginationMeta', {});

            this._super.apply(this, arguments);
        },

        reportLoadError: function reportLoadError(error) {
            this.get('notifications').showAPIError(error, { key: 'pagination.load.failed' });
        },

        loadFirstPage: function loadFirstPage(transition) {
            var _this = this;

            var paginationSettings = this.get('paginationSettings');
            var modelName = this.get('paginationModel');

            this.set('paginationSettings.page', 1);

            this.set('isLoading', true);

            return this.get('store').query(modelName, paginationSettings).then(function (results) {
                _this.set('paginationMeta', results.meta);
                return results;
            })['catch'](function (error) {
                // if we have a transition we're executing in a route hook so we
                // want to throw in order to trigger the global error handler
                if (transition) {
                    throw error;
                } else {
                    _this.reportLoadError(error);
                }
            })['finally'](function () {
                _this.set('isLoading', false);
            });
        },

        actions: {
            loadFirstPage: function loadFirstPage() {
                return this.loadFirstPage();
            },

            /**
             * Loads the next paginated page of posts into the ember-data store. Will cause the posts list UI to update.
             * @return
             */
            loadNextPage: function loadNextPage() {
                var _this2 = this;

                var store = this.get('store');
                var modelName = this.get('paginationModel');
                var metadata = this.get('paginationMeta');
                var nextPage = metadata.pagination && metadata.pagination.next;
                var paginationSettings = this.get('paginationSettings');

                if (nextPage && !this.get('isLoading')) {
                    this.set('isLoading', true);
                    this.set('paginationSettings.page', nextPage);

                    return store.query(modelName, paginationSettings).then(function (results) {
                        _this2.set('paginationMeta', results.meta);
                        return results;
                    })['catch'](function (error) {
                        _this2.reportLoadError(error);
                    })['finally'](function () {
                        _this2.set('isLoading', false);
                    });
                } else {
                    return _rsvp['default'].resolve([]);
                }
            },

            resetPagination: function resetPagination() {
                this.set('paginationSettings.page', 1);
            }
        }
    });
});
define('ghost-admin/mixins/settings-menu-controller', ['exports', 'ember-metal/mixin', 'ember-computed', 'ember-controller/inject'], function (exports, _emberMetalMixin, _emberComputed, _emberControllerInject) {
    exports['default'] = _emberMetalMixin['default'].create({
        application: (0, _emberControllerInject['default'])(),

        isViewingSubview: (0, _emberComputed['default'])('application.showSettingsMenu', {
            get: function get() {
                return false;
            },
            set: function set(key, value) {
                // Not viewing a subview if we can't even see the PSM
                if (!this.get('application.showSettingsMenu')) {
                    return false;
                }
                return value;
            }
        }),

        actions: {
            showSubview: function showSubview() {
                this.set('isViewingSubview', true);
            },

            closeSubview: function closeSubview() {
                this.set('isViewingSubview', false);
            }
        }
    });
});
define('ghost-admin/mixins/settings-save', ['exports', 'ember-metal/mixin'], function (exports, _emberMetalMixin) {
    exports['default'] = _emberMetalMixin['default'].create({
        submitting: false,

        actions: {
            save: function save() {
                var _this = this;

                this.set('submitting', true);

                this.save()['finally'](function () {
                    _this.set('submitting', false);
                });
            }
        }
    });
});
define('ghost-admin/mixins/shortcuts-route', ['exports', 'ember-metal/mixin', 'ghost-admin/mixins/shortcuts'], function (exports, _emberMetalMixin, _ghostAdminMixinsShortcuts) {

    /**
     * Only routes can implement shortcuts.
     * If you need to trigger actions on the controller,
     * simply call them with `this.get('controller').send('action')`.
     *
     * To implement shortcuts, add this mixin to your `extend()`,
     * and implement a `shortcuts` hash.
     * In this hash, keys are shortcut combinations and values are route action names.
     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
     *
     * ```javascript
     * shortcuts: {
     *     'ctrl+s, command+s': 'save'
     * }
     * ```
     * For more complex actions, shortcuts can instead have their value
     * be an object like {action, options}
     * ```javascript
     * shortcuts: {
     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
     * }
     * ```
     * You can set the scope of your shortcut by passing a scope property.
     * ```javascript
     * shortcuts : {
     *   'enter': {action : 'confirmModal', scope: 'modal'}
     * }
     * ```
     * If you don't specify a scope, we use a default scope called "default".
     * To have all your shortcut work in all scopes, give it the scope "all".
     * Find out more at the keymaster docs
     */
    exports['default'] = _emberMetalMixin['default'].create(_ghostAdminMixinsShortcuts['default'], {
        activate: function activate() {
            this._super.apply(this, arguments);
            this.registerShortcuts();
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.removeShortcuts();
        }
    });
});
define('ghost-admin/mixins/shortcuts', ['exports', 'ember-metal/mixin', 'ember-runloop', 'ember-utils'], function (exports, _emberMetalMixin, _emberRunloop, _emberUtils) {

    // Configure KeyMaster to respond to all shortcuts,
    // even inside of
    // input, textarea, and select.
    key.filter = function () {
        return true;
    };

    key.setScope('default');
    /**
     * Only routes can implement shortcuts.
     * If you need to trigger actions on the controller,
     * simply call them with `this.get('controller').send('action')`.
     *
     * To implement shortcuts, add this mixin to your `extend()`,
     * and implement a `shortcuts` hash.
     * In this hash, keys are shortcut combinations and values are route action names.
     *  (see [keymaster docs](https://github.com/madrobby/keymaster/blob/master/README.markdown)),
     *
     * ```javascript
     * shortcuts: {
     *     'ctrl+s, command+s': 'save'
     * }
     * ```
     * For more complex actions, shortcuts can instead have their value
     * be an object like {action, options}
     * ```javascript
     * shortcuts: {
     *      'ctrl+k': {action: 'markdownShortcut', options: 'createLink'}
     * }
     * ```
     * You can set the scope of your shortcut by passing a scope property.
     * ```javascript
     * shortcuts : {
     *   'enter': {action : 'confirmModal', scope: 'modal'}
     * }
     * ```
     * If you don't specify a scope, we use a default scope called "default".
     * To have all your shortcut work in all scopes, give it the scope "all".
     * Find out more at the keymaster docs
     */
    exports['default'] = _emberMetalMixin['default'].create({
        registerShortcuts: function registerShortcuts() {
            var _this = this;

            var shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(function (shortcut) {
                var scope = shortcuts[shortcut].scope || 'default';
                var action = shortcuts[shortcut];
                var options = undefined;

                if ((0, _emberUtils.typeOf)(action) !== 'string') {
                    options = action.options;
                    action = action.action;
                }

                key(shortcut, scope, function (event) {
                    // stop things like ctrl+s from actually opening a save dialogue
                    event.preventDefault();
                    (0, _emberRunloop['default'])(_this, function () {
                        this.send(action, options);
                    });
                });
            });
        },

        removeShortcuts: function removeShortcuts() {
            var shortcuts = this.get('shortcuts');

            Object.keys(shortcuts).forEach(function (shortcut) {
                var scope = shortcuts[shortcut].scope || 'default';
                key.unbind(shortcut, scope);
            });
        }
    });
});
/* global key */
define('ghost-admin/mixins/slug-url', ['exports', 'ember-metal/mixin', 'ember-utils'], function (exports, _emberMetalMixin, _emberUtils) {
    exports['default'] = _emberMetalMixin['default'].create({
        buildURL: function buildURL(_modelName, _id, _snapshot, _requestType, query) {
            var url = this._super.apply(this, arguments);

            if (query && !(0, _emberUtils.isBlank)(query.slug)) {
                url += 'slug/' + query.slug + '/';
                delete query.slug;
            }

            return url;
        }
    });
});
define('ghost-admin/mixins/style-body', ['exports', 'jquery', 'ember-metal/mixin', 'ember-runloop'], function (exports, _jquery, _emberMetalMixin, _emberRunloop) {

    // mixin used for routes that need to set a css className on the body tag
    exports['default'] = _emberMetalMixin['default'].create({
        activate: function activate() {
            var cssClasses = this.get('classNames');

            this._super.apply(this, arguments);

            if (cssClasses) {
                _emberRunloop['default'].schedule('afterRender', null, function () {
                    cssClasses.forEach(function (curClass) {
                        (0, _jquery['default'])('body').addClass(curClass);
                    });
                });
            }
        },

        deactivate: function deactivate() {
            var cssClasses = this.get('classNames');

            this._super.apply(this, arguments);

            _emberRunloop['default'].schedule('afterRender', null, function () {
                cssClasses.forEach(function (curClass) {
                    (0, _jquery['default'])('body').removeClass(curClass);
                });
            });
        }
    });
});
define('ghost-admin/mixins/text-input', ['exports', 'ember-metal/mixin'], function (exports, _emberMetalMixin) {
    exports['default'] = _emberMetalMixin['default'].create({
        selectOnClick: false,
        stopEnterKeyDownPropagation: false,

        click: function click(event) {
            if (this.get('selectOnClick')) {
                event.currentTarget.select();
            }
        },

        keyDown: function keyDown(event) {
            // stop event propagation when pressing "enter"
            // most useful in the case when undesired (global) keyboard shortcuts are getting triggered while interacting
            // with this particular input element.
            if (this.get('stopEnterKeyDownPropagation') && event.keyCode === 13) {
                event.stopPropagation();

                return true;
            }
        }
    });
});
define('ghost-admin/mixins/validation-engine', ['exports', 'ember-metal/mixin', 'rsvp', 'ember-array/utils', 'ember-data', 'ember-data/model', 'ghost-admin/validators/invite-user', 'ghost-admin/validators/nav-item', 'ghost-admin/validators/post', 'ghost-admin/validators/reset', 'ghost-admin/validators/setting', 'ghost-admin/validators/setup', 'ghost-admin/validators/signin', 'ghost-admin/validators/signup', 'ghost-admin/validators/slack-integration', 'ghost-admin/validators/subscriber', 'ghost-admin/validators/tag-settings', 'ghost-admin/validators/user', 'ghost-admin/utils/validator-extensions'], function (exports, _emberMetalMixin, _rsvp, _emberArrayUtils, _emberData, _emberDataModel, _ghostAdminValidatorsInviteUser, _ghostAdminValidatorsNavItem, _ghostAdminValidatorsPost, _ghostAdminValidatorsReset, _ghostAdminValidatorsSetting, _ghostAdminValidatorsSetup, _ghostAdminValidatorsSignin, _ghostAdminValidatorsSignup, _ghostAdminValidatorsSlackIntegration, _ghostAdminValidatorsSubscriber, _ghostAdminValidatorsTagSettings, _ghostAdminValidatorsUser, _ghostAdminUtilsValidatorExtensions) {
    var Errors = _emberData['default'].Errors;

    // our extensions to the validator library
    _ghostAdminUtilsValidatorExtensions['default'].init();

    /**
    * The class that gets this mixin will receive these properties and functions.
    * It will be able to validate any properties on itself (or the model it passes to validate())
    * with the use of a declared validator.
    */
    exports['default'] = _emberMetalMixin['default'].create({
        // these validators can be passed a model to validate when the class that
        // mixes in the ValidationEngine declares a validationType equal to a key on this object.
        // the model is either passed in via `this.validate({ model: object })`
        // or by calling `this.validate()` without the model property.
        // in that case the model will be the class that the ValidationEngine
        // was mixed into, i.e. the controller or Ember Data model.
        validators: {
            inviteUser: _ghostAdminValidatorsInviteUser['default'],
            navItem: _ghostAdminValidatorsNavItem['default'],
            post: _ghostAdminValidatorsPost['default'],
            reset: _ghostAdminValidatorsReset['default'],
            setting: _ghostAdminValidatorsSetting['default'],
            setup: _ghostAdminValidatorsSetup['default'],
            signin: _ghostAdminValidatorsSignin['default'],
            signup: _ghostAdminValidatorsSignup['default'],
            slackIntegration: _ghostAdminValidatorsSlackIntegration['default'],
            subscriber: _ghostAdminValidatorsSubscriber['default'],
            tag: _ghostAdminValidatorsTagSettings['default'],
            user: _ghostAdminValidatorsUser['default']
        },

        // This adds the Errors object to the validation engine, and shouldn't affect
        // ember-data models because they essentially use the same thing
        errors: null,

        // Store whether a property has been validated yet, so that we know whether or not
        // to show error / success validation for a field
        hasValidated: null,

        init: function init() {
            this._super.apply(this, arguments);
            this.set('errors', Errors.create());
            this.set('hasValidated', (0, _emberArrayUtils.A)());
        },

        /**
        * Passes the model to the validator specified by validationType.
        * Returns a promise that will resolve if validation succeeds, and reject if not.
        * Some options can be specified:
        *
        * `model: Object` - you can specify the model to be validated, rather than pass the default value of `this`,
        *                   the class that mixes in this mixin.
        *
        * `property: String` - you can specify a specific property to validate. If
        * 					   no property is specified, the entire model will be
        * 					   validated
        */
        validate: function validate(opts) {
            var model = this;
            var hasValidated = undefined,
                type = undefined,
                validator = undefined;

            opts = opts || {};

            if (opts.model) {
                model = opts.model;
            } else if (this instanceof _emberDataModel['default']) {
                model = this;
            } else if (this.get('model')) {
                model = this.get('model');
            }

            type = this.get('validationType') || model.get('validationType');
            validator = this.get('validators.' + type) || model.get('validators.' + type);
            hasValidated = this.get('hasValidated');

            opts.validationType = type;

            return new _rsvp['default'].Promise(function (resolve, reject) {
                var passed = undefined;

                if (!type || !validator) {
                    return reject(['The validator specified, "' + type + '", did not exist!']);
                }

                if (opts.property) {
                    // If property isn't in `hasValidated`, add it to mark that this field can show a validation result
                    hasValidated.addObject(opts.property);
                    model.get('errors').remove(opts.property);
                } else {
                    model.get('errors').clear();
                }

                passed = validator.check(model, opts.property);

                return passed ? resolve() : reject();
            });
        },

        /**
        * The primary goal of this method is to override the `save` method on Ember Data models.
        * This allows us to run validation before actually trying to save the model to the server.
        * You can supply options to be passed into the `validate` method, since the ED `save` method takes no options.
        */
        save: function save(options) {
            var _this = this;

            var _super = this._super;

            options = options || {};
            options.wasSave = true;

            // model.destroyRecord() calls model.save() behind the scenes.
            // in that case, we don't need validation checks or error propagation,
            // because the model itself is being destroyed.
            if (this.get('isDeleted')) {
                return this._super.apply(this, arguments);
            }

            // If validation fails, reject with validation errors.
            // If save to the server fails, reject with server response.
            return this.validate(options).then(function () {
                return _super.call(_this, options);
            })['catch'](function (result) {
                // server save failed or validator type doesn't exist
                if (result && !(0, _emberArrayUtils.isEmberArray)(result)) {
                    throw result;
                }

                return _rsvp['default'].reject(result);
            });
        },

        actions: {
            validate: function validate(property) {
                this.validate({ property: property });
            }
        }
    });
});
define('ghost-admin/mixins/validation-state', ['exports', 'ember-metal/mixin', 'ember-utils', 'ember-array/utils', 'ember-metal/observer', 'ember-runloop'], function (exports, _emberMetalMixin, _emberUtils, _emberArrayUtils, _emberMetalObserver, _emberRunloop) {
    exports['default'] = _emberMetalMixin['default'].create({

        errors: null,
        property: '',
        hasValidated: (0, _emberArrayUtils.A)(),

        hasError: false,

        setHasError: function setHasError() {
            var property = this.get('property');
            var errors = this.get('errors');
            var hasValidated = this.get('hasValidated');

            // if we aren't looking at a specific property we always want an error class
            if (!property && errors && !errors.get('isEmpty')) {
                this.set('hasError', true);
                return;
            }

            // If we haven't yet validated this field, there is no validation class needed
            if (!hasValidated || !hasValidated.includes(property)) {
                this.set('hasError', false);
                return;
            }

            if (errors && !(0, _emberUtils.isEmpty)(errors.errorsFor(property))) {
                this.set('hasError', true);
                return;
            }

            this.set('hasError', false);
        },

        hasErrorObserver: (0, _emberMetalObserver['default'])('errors.[]', 'property', 'hasValidated.[]', function () {
            _emberRunloop['default'].once(this, 'setHasError');
            // this.setHasError();
        }).on('init')

    });
});
define('ghost-admin/models/invite', ['exports', 'ember-data/model', 'ember-data/attr', 'ember-data/relationships', 'ember-service/inject'], function (exports, _emberDataModel, _emberDataAttr, _emberDataRelationships, _emberServiceInject) {
    exports['default'] = _emberDataModel['default'].extend({
        token: (0, _emberDataAttr['default'])('string'),
        email: (0, _emberDataAttr['default'])('string'),
        expires: (0, _emberDataAttr['default'])('number'),
        createdAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdBy: (0, _emberDataAttr['default'])('number'),
        updatedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        updatedBy: (0, _emberDataAttr['default'])('number'),
        status: (0, _emberDataAttr['default'])('string'),
        role: (0, _emberDataRelationships.belongsTo)('role', { async: false }),

        ajax: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),

        resend: function resend() {
            var fullInviteData = this.toJSON();

            var inviteData = {
                email: fullInviteData.email,
                role_id: fullInviteData.role
            };

            var inviteUrl = this.get('ghostPaths.url').api('invites');

            return this.get('ajax').post(inviteUrl, {
                data: JSON.stringify({ invites: [inviteData] }),
                contentType: 'application/json'
            });
        }
    });
});
/* eslint camelcase: [2, {properties: "never"}] */
define('ghost-admin/models/navigation-item', ['exports', 'ember-computed', 'ember-utils', 'ember-object', 'ghost-admin/mixins/validation-engine'], function (exports, _emberComputed, _emberUtils, _emberObject, _ghostAdminMixinsValidationEngine) {
    exports['default'] = _emberObject['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        label: '',
        url: '',
        isNew: false,

        validationType: 'navItem',

        isComplete: (0, _emberComputed['default'])('label', 'url', function () {
            var _getProperties = this.getProperties('label', 'url');

            var label = _getProperties.label;
            var url = _getProperties.url;

            return !(0, _emberUtils.isBlank)(label) && !(0, _emberUtils.isBlank)(url);
        }),

        isBlank: (0, _emberComputed['default'])('label', 'url', function () {
            var _getProperties2 = this.getProperties('label', 'url');

            var label = _getProperties2.label;
            var url = _getProperties2.url;

            return (0, _emberUtils.isBlank)(label) && (0, _emberUtils.isBlank)(url);
        })
    });
});
define('ghost-admin/models/notification', ['exports', 'ember-data/model', 'ember-data/attr'], function (exports, _emberDataModel, _emberDataAttr) {
    exports['default'] = _emberDataModel['default'].extend({
        dismissible: (0, _emberDataAttr['default'])('boolean'),
        status: (0, _emberDataAttr['default'])('string'),
        type: (0, _emberDataAttr['default'])('string'),
        message: (0, _emberDataAttr['default'])('string'),
        key: (0, _emberDataAttr['default'])('string')
    });
});
define('ghost-admin/models/post', ['exports', 'ember', 'ember-computed', 'ember-service/inject', 'ember-data/model', 'ember-data/attr', 'ember-data/relationships', 'ghost-admin/mixins/validation-engine', 'ghost-admin/components/ghost-editor'], function (exports, _ember, _emberComputed, _emberServiceInject, _emberDataModel, _emberDataAttr, _emberDataRelationships, _ghostAdminMixinsValidationEngine, _ghostAdminComponentsGhostEditor) {
    // a blank mobile doc

    // ember-cli-shims doesn't export these so we must get them manually
    var Comparable = _ember['default'].Comparable;
    var _compare = _ember['default'].compare;

    function statusCompare(postA, postB) {
        var status1 = postA.get('status');
        var status2 = postB.get('status');

        // if any of those is empty
        if (!status1 && !status2) {
            return 0;
        }

        if (!status1 && status2) {
            return -1;
        }

        if (!status2 && status1) {
            return 1;
        }

        // We have to make sure, that scheduled posts will be listed first
        // after that, draft and published will be sorted alphabetically and don't need
        // any manual comparison.

        if (status1 === 'scheduled' && (status2 === 'draft' || status2 === 'published')) {
            return -1;
        }

        if (status2 === 'scheduled' && (status1 === 'draft' || status1 === 'published')) {
            return 1;
        }

        return _compare(status1.valueOf(), status2.valueOf());
    }

    function publishedAtCompare(postA, postB) {
        var published1 = postA.get('publishedAtUTC');
        var published2 = postB.get('publishedAtUTC');

        if (!published1 && !published2) {
            return 0;
        }

        if (!published1 && published2) {
            return -1;
        }

        if (!published2 && published1) {
            return 1;
        }

        return _compare(published1.valueOf(), published2.valueOf());
    }

    exports['default'] = _emberDataModel['default'].extend(Comparable, _ghostAdminMixinsValidationEngine['default'], {
        validationType: 'post',

        uuid: (0, _emberDataAttr['default'])('string'),
        title: (0, _emberDataAttr['default'])('string', { defaultValue: '' }),
        slug: (0, _emberDataAttr['default'])('string'),
        markdown: (0, _emberDataAttr['default'])('string', { defaultValue: '' }),
        mobiledoc: (0, _emberDataAttr['default'])('json-string', { defaultValue: function defaultValue() {
                return _ghostAdminComponentsGhostEditor.BLANK_DOC;
            } }),
        html: (0, _emberDataAttr['default'])('string'),
        image: (0, _emberDataAttr['default'])('string'),
        featured: (0, _emberDataAttr['default'])('boolean', { defaultValue: false }),
        page: (0, _emberDataAttr['default'])('boolean', { defaultValue: false }),
        status: (0, _emberDataAttr['default'])('string', { defaultValue: 'draft' }),
        language: (0, _emberDataAttr['default'])('string', { defaultValue: 'en_US' }),
        metaTitle: (0, _emberDataAttr['default'])('string'),
        metaDescription: (0, _emberDataAttr['default'])('string'),
        author: (0, _emberDataRelationships.belongsTo)('user', { async: true }),
        authorId: (0, _emberDataAttr['default'])('string'),
        updatedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        updatedBy: (0, _emberDataAttr['default'])(),
        publishedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        publishedBy: (0, _emberDataRelationships.belongsTo)('user', { async: true }),
        createdAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdBy: (0, _emberDataAttr['default'])(),
        tags: (0, _emberDataRelationships.hasMany)('tag', {
            embedded: 'always',
            async: false
        }),
        url: (0, _emberDataAttr['default'])('string'),

        config: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),
        timeZone: (0, _emberServiceInject['default'])(),
        clock: (0, _emberServiceInject['default'])(),

        absoluteUrl: (0, _emberComputed['default'])('url', 'ghostPaths.url', 'config.blogUrl', function () {
            var blogUrl = this.get('config.blogUrl');
            var postUrl = this.get('url');
            return this.get('ghostPaths.url').join(blogUrl, postUrl);
        }),

        previewUrl: (0, _emberComputed['default'])('uuid', 'ghostPaths.url', 'config.blogUrl', 'config.routeKeywords.preview', function () {
            var blogUrl = this.get('config.blogUrl');
            var uuid = this.get('uuid');
            var previewKeyword = this.get('config.routeKeywords.preview');
            // New posts don't have a preview
            if (!uuid) {
                return '';
            }
            return this.get('ghostPaths.url').join(blogUrl, previewKeyword, uuid);
        }),

        scratch: null,
        titleScratch: null,

        // Computed post properties

        isPublished: (0, _emberComputed.equal)('status', 'published'),
        isDraft: (0, _emberComputed.equal)('status', 'draft'),
        internalTags: (0, _emberComputed.filterBy)('tags', 'isInternal', true),
        isScheduled: (0, _emberComputed.equal)('status', 'scheduled'),

        // TODO: move this into gh-posts-list-item component
        // Checks every second, if we reached the scheduled date
        timeScheduled: (0, _emberComputed['default'])('publishedAtUTC', 'clock.second', function () {
            var publishedAtUTC = this.get('publishedAtUTC') || moment.utc(new Date());
            this.get('clock.second');

            return publishedAtUTC.diff(moment.utc(new Date()), 'hours', true) > 0 ? true : false;
        }),

        // remove client-generated tags, which have `id: null`.
        // Ember Data won't recognize/update them automatically
        // when returned from the server with ids.
        // https://github.com/emberjs/data/issues/1829
        updateTags: function updateTags() {
            var tags = this.get('tags');
            var oldTags = tags.filterBy('id', null);

            tags.removeObjects(oldTags);
            oldTags.invoke('deleteRecord');
        },

        isAuthoredByUser: function isAuthoredByUser(user) {
            return user.get('id') === this.get('authorId');
        },

        // a custom sort function is needed in order to sort the posts list the same way the server would:
        //     status: scheduled, draft, published
        //     publishedAt: DESC
        //     updatedAt: DESC
        //     id: DESC
        compare: function compare(postA, postB) {
            var updated1 = postA.get('updatedAtUTC');
            var updated2 = postB.get('updatedAtUTC');
            var idResult = undefined,
                publishedAtResult = undefined,
                statusResult = undefined,
                updatedAtResult = undefined;

            // when `updatedAt` is undefined, the model is still
            // being written to with the results from the server
            if (postA.get('isNew') || !updated1) {
                return -1;
            }

            if (postB.get('isNew') || !updated2) {
                return 1;
            }

            // TODO: revisit the ID sorting because we no longer have auto-incrementing IDs
            idResult = _compare(postA.get('id'), postB.get('id'));
            statusResult = statusCompare(postA, postB);
            updatedAtResult = _compare(updated1.valueOf(), updated2.valueOf());
            publishedAtResult = publishedAtCompare(postA, postB);

            if (statusResult === 0) {
                if (publishedAtResult === 0) {
                    if (updatedAtResult === 0) {
                        // This should be DESC
                        return idResult * -1;
                    }
                    // This should be DESC
                    return updatedAtResult * -1;
                }
                // This should be DESC
                return publishedAtResult * -1;
            }

            return statusResult;
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/models/role', ['exports', 'ember-computed', 'ember-data/model', 'ember-data/attr'], function (exports, _emberComputed, _emberDataModel, _emberDataAttr) {
    exports['default'] = _emberDataModel['default'].extend({
        name: (0, _emberDataAttr['default'])('string'),
        description: (0, _emberDataAttr['default'])('string'),
        createdAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        updatedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdBy: (0, _emberDataAttr['default'])(),
        updatedBy: (0, _emberDataAttr['default'])(),

        lowerCaseName: (0, _emberComputed['default'])('name', function () {
            return this.get('name').toLocaleLowerCase();
        })
    });
});
/* eslint-disable camelcase */
define('ghost-admin/models/setting', ['exports', 'ember-data/model', 'ember-data/attr', 'ghost-admin/mixins/validation-engine'], function (exports, _emberDataModel, _emberDataAttr, _ghostAdminMixinsValidationEngine) {
    exports['default'] = _emberDataModel['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        validationType: 'setting',

        title: (0, _emberDataAttr['default'])('string'),
        description: (0, _emberDataAttr['default'])('string'),
        logo: (0, _emberDataAttr['default'])('string'),
        cover: (0, _emberDataAttr['default'])('string'),
        icon: (0, _emberDataAttr['default'])('string'),
        defaultLang: (0, _emberDataAttr['default'])('string'),
        postsPerPage: (0, _emberDataAttr['default'])('number'),
        forceI18n: (0, _emberDataAttr['default'])('boolean'),
        permalinks: (0, _emberDataAttr['default'])('string'),
        activeTheme: (0, _emberDataAttr['default'])('string'),
        availableThemes: (0, _emberDataAttr['default'])(),
        activeTimezone: (0, _emberDataAttr['default'])('string', { defaultValue: 'Etc/UTC' }),
        ghost_head: (0, _emberDataAttr['default'])('string'),
        ghost_foot: (0, _emberDataAttr['default'])('string'),
        facebook: (0, _emberDataAttr['default'])('facebook-url-user'),
        twitter: (0, _emberDataAttr['default'])('twitter-url-user'),
        labs: (0, _emberDataAttr['default'])('string'),
        navigation: (0, _emberDataAttr['default'])('navigation-settings'),
        isPrivate: (0, _emberDataAttr['default'])('boolean'),
        password: (0, _emberDataAttr['default'])('string'),
        slack: (0, _emberDataAttr['default'])('slack-settings'),
        amp: (0, _emberDataAttr['default'])('boolean')
    });
});
/* eslint-disable camelcase */
define('ghost-admin/models/slack-integration', ['exports', 'ember-computed', 'ember-utils', 'ember-object', 'ghost-admin/mixins/validation-engine'], function (exports, _emberComputed, _emberUtils, _emberObject, _ghostAdminMixinsValidationEngine) {
    exports['default'] = _emberObject['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        // values entered here will act as defaults
        url: '',

        validationType: 'slackIntegration',

        isActive: (0, _emberComputed['default'])('url', function () {
            var url = this.get('url');
            return !(0, _emberUtils.isBlank)(url);
        })
    });
});
define('ghost-admin/models/subscriber', ['exports', 'ember-data/model', 'ember-data/attr', 'ember-data/relationships', 'ghost-admin/mixins/validation-engine'], function (exports, _emberDataModel, _emberDataAttr, _emberDataRelationships, _ghostAdminMixinsValidationEngine) {
    exports['default'] = _emberDataModel['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        validationType: 'subscriber',

        name: (0, _emberDataAttr['default'])('string'),
        email: (0, _emberDataAttr['default'])('string'),
        status: (0, _emberDataAttr['default'])('string'),
        subscribedUrl: (0, _emberDataAttr['default'])('string'),
        subscribedReferrer: (0, _emberDataAttr['default'])('string'),
        unsubscribedUrl: (0, _emberDataAttr['default'])('string'),
        unsubscribedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        updatedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdBy: (0, _emberDataAttr['default'])('number'),
        updatedBy: (0, _emberDataAttr['default'])('number'),

        post: (0, _emberDataRelationships.belongsTo)('post')
    });
});
define('ghost-admin/models/tag', ['exports', 'ember-computed', 'ember-metal/observer', 'ember-service/inject', 'ember-metal/utils', 'ember-data/model', 'ember-data/attr', 'ghost-admin/mixins/validation-engine'], function (exports, _emberComputed, _emberMetalObserver, _emberServiceInject, _emberMetalUtils, _emberDataModel, _emberDataAttr, _ghostAdminMixinsValidationEngine) {
    exports['default'] = _emberDataModel['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        validationType: 'tag',

        name: (0, _emberDataAttr['default'])('string'),
        slug: (0, _emberDataAttr['default'])('string'),
        description: (0, _emberDataAttr['default'])('string'),
        parent: (0, _emberDataAttr['default'])(),
        metaTitle: (0, _emberDataAttr['default'])('string'),
        metaDescription: (0, _emberDataAttr['default'])('string'),
        image: (0, _emberDataAttr['default'])('string'),
        visibility: (0, _emberDataAttr['default'])('string', { defaultValue: 'public' }),
        createdAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        updatedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdBy: (0, _emberDataAttr['default'])(),
        updatedBy: (0, _emberDataAttr['default'])(),
        count: (0, _emberDataAttr['default'])('raw'),

        isInternal: (0, _emberComputed.equal)('visibility', 'internal'),
        isPublic: (0, _emberComputed.equal)('visibility', 'public'),

        feature: (0, _emberServiceInject['default'])(),

        // HACK: ugly hack to main compatibility with selectize as used in the
        // PSM tags input
        // TODO: remove once we've switched over to EPS for the tags input
        uuid: (0, _emberComputed['default'])(function () {
            return (0, _emberMetalUtils.guidFor)(this);
        }),

        setVisibility: function setVisibility() {
            var internalRegex = /^#.?/;
            this.set('visibility', internalRegex.test(this.get('name')) ? 'internal' : 'public');
        },

        save: function save() {
            if (this.get('changedAttributes.name') && !this.get('isDeleted')) {
                this.setVisibility();
            }
            return this._super.apply(this, arguments);
        },

        setVisibilityOnNew: (0, _emberMetalObserver['default'])('isNew', 'isSaving', 'name', function () {
            if (this.get('isNew') && !this.get('isSaving')) {
                this.setVisibility();
            }
        })
    });
});
/* eslint-disable camelcase */
define('ghost-admin/models/user', ['exports', 'ember-data/model', 'ember-data/attr', 'ember-data/relationships', 'ember-computed', 'ember-service/inject', 'ember-concurrency', 'ghost-admin/mixins/validation-engine'], function (exports, _emberDataModel, _emberDataAttr, _emberDataRelationships, _emberComputed, _emberServiceInject, _emberConcurrency, _ghostAdminMixinsValidationEngine) {
    exports['default'] = _emberDataModel['default'].extend(_ghostAdminMixinsValidationEngine['default'], {
        validationType: 'user',

        name: (0, _emberDataAttr['default'])('string'),
        slug: (0, _emberDataAttr['default'])('string'),
        email: (0, _emberDataAttr['default'])('string'),
        image: (0, _emberDataAttr['default'])('string'),
        cover: (0, _emberDataAttr['default'])('string'),
        bio: (0, _emberDataAttr['default'])('string'),
        website: (0, _emberDataAttr['default'])('string'),
        location: (0, _emberDataAttr['default'])('string'),
        accessibility: (0, _emberDataAttr['default'])('string'),
        status: (0, _emberDataAttr['default'])('string'),
        language: (0, _emberDataAttr['default'])('string', { defaultValue: 'en_US' }),
        metaTitle: (0, _emberDataAttr['default'])('string'),
        metaDescription: (0, _emberDataAttr['default'])('string'),
        lastLoginUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        createdBy: (0, _emberDataAttr['default'])('number'),
        updatedAtUTC: (0, _emberDataAttr['default'])('moment-utc'),
        updatedBy: (0, _emberDataAttr['default'])('number'),
        roles: (0, _emberDataRelationships.hasMany)('role', {
            embedded: 'always',
            async: false
        }),
        count: (0, _emberDataAttr['default'])('raw'),
        facebook: (0, _emberDataAttr['default'])('facebook-url-user'),
        twitter: (0, _emberDataAttr['default'])('twitter-url-user'),

        ghostPaths: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        // TODO: Once client-side permissions are in place,
        // remove the hard role check.
        isAuthor: (0, _emberComputed.equal)('role.name', 'Author'),
        isEditor: (0, _emberComputed.equal)('role.name', 'Editor'),
        isAdmin: (0, _emberComputed.equal)('role.name', 'Administrator'),
        isOwner: (0, _emberComputed.equal)('role.name', 'Owner'),

        isLoggedIn: (0, _emberComputed['default'])('id', 'session.user.id', function () {
            return this.get('id') === this.get('session.user.id');
        }),

        active: (0, _emberComputed['default'])('status', function () {
            return ['active', 'warn-1', 'warn-2', 'warn-3', 'warn-4', 'locked'].indexOf(this.get('status')) > -1;
        }),

        role: (0, _emberComputed['default'])('roles', {
            get: function get() {
                return this.get('roles.firstObject');
            },
            set: function set(key, value) {
                // Only one role per user, so remove any old data.
                this.get('roles').clear();
                this.get('roles').pushObject(value);

                return value;
            }
        }),

        saveNewPassword: (0, _emberConcurrency.task)(regeneratorRuntime.mark(function callee$0$0() {
            var validation, url;
            return regeneratorRuntime.wrap(function callee$0$0$(context$1$0) {
                while (1) switch (context$1$0.prev = context$1$0.next) {
                    case 0:
                        validation = this.get('isLoggedIn') ? 'ownPasswordChange' : 'passwordChange';
                        context$1$0.prev = 1;
                        context$1$0.next = 4;
                        return this.validate({ property: validation });

                    case 4:
                        context$1$0.next = 9;
                        break;

                    case 6:
                        context$1$0.prev = 6;
                        context$1$0.t0 = context$1$0['catch'](1);
                        return context$1$0.abrupt('return');

                    case 9:
                        context$1$0.prev = 9;
                        url = this.get('ghostPaths.url').api('users', 'password');
                        context$1$0.next = 13;
                        return this.get('ajax').put(url, {
                            data: {
                                password: [{
                                    user_id: this.get('id'),
                                    oldPassword: this.get('password'),
                                    newPassword: this.get('newPassword'),
                                    ne2Password: this.get('ne2Password')
                                }]
                            }
                        });

                    case 13:

                        this.setProperties({
                            password: '',
                            newPassword: '',
                            ne2Password: ''
                        });

                        this.get('notifications').showNotification('Password updated.', { type: 'success', key: 'user.change-password.success' });

                        // clear errors manually for ne2password because validation
                        // engine only clears the "validated proeprty"
                        // TODO: clean up once we have a better validations library
                        this.get('errors').remove('ne2Password');
                        context$1$0.next = 21;
                        break;

                    case 18:
                        context$1$0.prev = 18;
                        context$1$0.t1 = context$1$0['catch'](9);

                        this.get('notifications').showAPIError(context$1$0.t1, { key: 'user.change-password' });

                    case 21:
                    case 'end':
                        return context$1$0.stop();
                }
            }, callee$0$0, this, [[1, 6], [9, 18]]);
        })).drop()
    });
});
/* eslint-disable camelcase */

// validation error, don't do anything
define("ghost-admin/renderer", ["exports"], function (exports) {});
define('ghost-admin/resolver', ['exports', 'ember-resolver'], function (exports, _emberResolver) {
  exports['default'] = _emberResolver['default'];
});
define('ghost-admin/router', ['exports', 'ember-router', 'ember-service/inject', 'ember-evented/on', 'ghost-admin/utils/ghost-paths', 'ghost-admin/utils/document-title', 'ghost-admin/config/environment'], function (exports, _emberRouter, _emberServiceInject, _emberEventedOn, _ghostAdminUtilsGhostPaths, _ghostAdminUtilsDocumentTitle, _ghostAdminConfigEnvironment) {

    var GhostRouter = _emberRouter['default'].extend({
        location: _ghostAdminConfigEnvironment['default'].locationType, // use HTML5 History API instead of hash-tag based URLs
        rootURL: (0, _ghostAdminUtilsGhostPaths['default'])().adminRoot, // admin interface lives under sub-directory /ghost

        notifications: (0, _emberServiceInject['default'])(),

        displayDelayedNotifications: (0, _emberEventedOn['default'])('didTransition', function () {
            this.get('notifications').displayDelayed();
        })
    });

    (0, _ghostAdminUtilsDocumentTitle['default'])();

    GhostRouter.map(function () {
        this.route('setup', function () {
            this.route('one');
            this.route('two');
            this.route('three');
        });

        this.route('signin');
        this.route('signout');
        this.route('signup', { path: '/signup/:token' });
        this.route('reset', { path: '/reset/:token' });
        this.route('about', { path: '/about' });

        this.route('posts', { path: '/' }, function () {});

        this.route('editor', function () {
            this.route('new', { path: '' });
            this.route('edit', { path: ':post_id' });
        });

        this.route('team', { path: '/team' }, function () {
            this.route('user', { path: ':user_slug' });
        });

        this.route('settings.general', { path: '/settings/general' }, function () {
            this.route('uploadtheme');
        });
        this.route('settings.tags', { path: '/settings/tags' }, function () {
            this.route('tag', { path: ':tag_slug' });
            this.route('new');
        });
        this.route('settings.labs', { path: '/settings/labs' });
        this.route('settings.code-injection', { path: '/settings/code-injection' });
        this.route('settings.navigation', { path: '/settings/navigation' });
        this.route('settings.apps', { path: '/settings/apps' }, function () {
            this.route('slack', { path: 'slack' });
            this.route('amp', { path: 'amp' });
        });

        this.route('subscribers', function () {
            this.route('new');
            this.route('import');
        });

        this.route('error404', { path: '/*path' });
    });

    exports['default'] = GhostRouter;
});
define('ghost-admin/routes/about', ['exports', 'ember-service/inject', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _emberServiceInject, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsStyleBody) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], {
        titleToken: 'About',

        classNames: ['view-about'],

        ghostPaths: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        cachedConfig: false,

        model: function model() {
            var _this = this;

            var cachedConfig = this.get('cachedConfig');
            var configUrl = this.get('ghostPaths.url').api('configuration', 'about');

            if (cachedConfig) {
                return cachedConfig;
            }

            return this.get('ajax').request(configUrl).then(function (configurationResponse) {
                var _configurationResponse$configuration = _slicedToArray(configurationResponse.configuration, 1);

                var cachedConfig = _configurationResponse$configuration[0];

                _this.set('cachedConfig', cachedConfig);

                return cachedConfig;
            });
        }
    });
});
define('ghost-admin/routes/application', ['exports', 'ember-route', 'ember-string', 'ember-service/inject', 'ember-runloop', 'ember-array/utils', 'ember-simple-auth/configuration', 'ember-simple-auth/mixins/application-route-mixin', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/utils/ctrl-or-cmd', 'ghost-admin/utils/window-proxy'], function (exports, _emberRoute, _emberString, _emberServiceInject, _emberRunloop, _emberArrayUtils, _emberSimpleAuthConfiguration, _emberSimpleAuthMixinsApplicationRouteMixin, _ghostAdminMixinsShortcutsRoute, _ghostAdminUtilsCtrlOrCmd, _ghostAdminUtilsWindowProxy) {

    function K() {
        return this;
    }

    var shortcuts = {};

    shortcuts.esc = { action: 'closeMenus', scope: 'all' };
    shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+s'] = { action: 'save', scope: 'all' };

    exports['default'] = _emberRoute['default'].extend(_emberSimpleAuthMixinsApplicationRouteMixin['default'], _ghostAdminMixinsShortcutsRoute['default'], {
        shortcuts: shortcuts,

        routeAfterAuthentication: 'posts',

        config: (0, _emberServiceInject['default'])(),
        feature: (0, _emberServiceInject['default'])(),
        dropdown: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        upgradeNotification: (0, _emberServiceInject['default'])(),

        beforeModel: function beforeModel() {
            return this.get('config').fetch();
        },

        afterModel: function afterModel(model, transition) {
            this._super.apply(this, arguments);

            if (this.get('session.isAuthenticated')) {
                this.set('appLoadTransition', transition);
                transition.send('loadServerNotifications');
                transition.send('checkForOutdatedDesktopApp');

                // trigger a background refresh of the access token to enable
                // "infinite" sessions. We also trigger a logout if the refresh
                // token is invalid to prevent attackers with only the access token
                // from loading the admin
                var session = this.get('session.session');
                var authenticator = session._lookupAuthenticator(session.authenticator);
                if (authenticator && authenticator.onOnline) {
                    authenticator.onOnline();
                }

                // return the feature loading promise so that we block until settings
                // are loaded in order for synchronous access everywhere
                return this.get('feature').fetch();
            }
        },

        title: function title(tokens) {
            return tokens.join(' - ') + ' - ' + this.get('config.blogTitle');
        },

        sessionAuthenticated: function sessionAuthenticated() {
            var _this = this;

            if (this.get('session.skipAuthSuccessHandler')) {
                return;
            }

            // standard ESA post-sign-in redirect
            this._super.apply(this, arguments);

            // trigger post-sign-in background behaviour
            this.get('session.user').then(function (user) {
                _this.send('signedIn', user);
            });
        },

        sessionInvalidated: function sessionInvalidated() {
            var transition = this.get('appLoadTransition');

            if (transition) {
                transition.send('authorizationFailed');
            } else {
                _emberRunloop['default'].scheduleOnce('routerTransitions', this, function () {
                    this.send('authorizationFailed');
                });
            }
        },

        actions: {
            openMobileMenu: function openMobileMenu() {
                this.controller.set('showMobileMenu', true);
            },

            openSettingsMenu: function openSettingsMenu() {
                this.controller.set('showSettingsMenu', true);
            },

            closeMenus: function closeMenus() {
                this.get('dropdown').closeDropdowns();
                this.controller.setProperties({
                    showSettingsMenu: false,
                    showMobileMenu: false
                });
            },

            didTransition: function didTransition() {
                this.set('appLoadTransition', null);
                this.send('closeMenus');
            },

            signedIn: function signedIn() {
                this.get('notifications').clearAll();
                this.send('loadServerNotifications', true);
            },

            invalidateSession: function invalidateSession() {
                var _this2 = this;

                this.get('session').invalidate()['catch'](function (error) {
                    _this2.get('notifications').showAlert(error.message, { type: 'error', key: 'session.invalidate.failed' });
                });
            },

            authorizationFailed: function authorizationFailed() {
                _ghostAdminUtilsWindowProxy['default'].replaceLocation(_emberSimpleAuthConfiguration['default'].baseURL);
            },

            loadServerNotifications: function loadServerNotifications(isDelayed) {
                var _this3 = this;

                if (this.get('session.isAuthenticated')) {
                    this.get('session.user').then(function (user) {
                        if (!user.get('isAuthor') && !user.get('isEditor')) {
                            _this3.store.findAll('notification', { reload: true }).then(function (serverNotifications) {
                                serverNotifications.forEach(function (notification) {
                                    if (notification.get('type') === 'upgrade') {
                                        _this3.get('upgradeNotification').set('content', notification.get('message'));
                                    } else {
                                        _this3.get('notifications').handleNotification(notification, isDelayed);
                                    }
                                });
                            });
                        }
                    });
                }
            },

            checkForOutdatedDesktopApp: function checkForOutdatedDesktopApp() {
                // Check if the user is running an older version of Ghost Desktop
                // that needs to be manually updated
                // (yes, the desktop team is deeply ashamed of these lines 😢)
                var ua = navigator && navigator.userAgent ? navigator.userAgent : null;

                if (ua && ua.includes && ua.includes('ghost-desktop')) {
                    var updateCheck = /ghost-desktop\/0\.((5\.0)|((4|2)\.0)|((3\.)(0|1)))/;
                    var link = '<a href="https://dev.ghost.org/ghost-desktop-manual-update" target="_blank">click here</a>';
                    var msg = 'Your version of Ghost Desktop needs to be manually updated. Please ' + link + ' to get started.';

                    if (updateCheck.test(ua)) {
                        this.get('notifications').showAlert((0, _emberString.htmlSafe)(msg), {
                            type: 'warn',
                            key: 'desktop.manual.upgrade'
                        });
                    }
                }
            },

            toggleMarkdownHelpModal: function toggleMarkdownHelpModal() {
                this.get('controller').toggleProperty('showMarkdownHelpModal');
            },

            // noop default for unhandled save (used from shortcuts)
            save: K,

            error: function error(_error, transition) {
                if (_error && (0, _emberArrayUtils.isEmberArray)(_error.errors)) {
                    switch (_error.errors[0].errorType) {
                        case 'NotFoundError':
                            {
                                if (transition) {
                                    transition.abort();
                                }

                                var routeInfo = transition.handlerInfos[transition.handlerInfos.length - 1];
                                var router = this.get('router');
                                var params = [];

                                var _iteratorNormalCompletion = true;
                                var _didIteratorError = false;
                                var _iteratorError = undefined;

                                try {
                                    for (var _iterator = Object.keys(routeInfo.params)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                                        var key = _step.value;

                                        params.push(routeInfo.params[key]);
                                    }
                                } catch (err) {
                                    _didIteratorError = true;
                                    _iteratorError = err;
                                } finally {
                                    try {
                                        if (!_iteratorNormalCompletion && _iterator['return']) {
                                            _iterator['return']();
                                        }
                                    } finally {
                                        if (_didIteratorError) {
                                            throw _iteratorError;
                                        }
                                    }
                                }

                                return this.transitionTo('error404', router.generate.apply(router, [routeInfo.name].concat(params)).replace('/ghost/', '').replace(/^\//g, ''));
                            }
                        case 'VersionMismatchError':
                            {
                                if (transition) {
                                    transition.abort();
                                }

                                this.get('upgradeStatus').requireUpgrade();
                                return false;
                            }
                        case 'Maintenance':
                            {
                                if (transition) {
                                    transition.abort();
                                }

                                this.get('upgradeStatus').maintenanceAlert();
                                return false;
                            }
                        default:
                            {
                                this.get('notifications').showAPIError(_error);
                                // don't show the 500 page if we weren't navigating
                                if (!transition) {
                                    return false;
                                }
                            }
                    }
                }

                // fallback to 500 error page
                return true;
            }
        }
    });
});
define('ghost-admin/routes/authenticated', ['exports', 'ember-route', 'ember-simple-auth/mixins/authenticated-route-mixin'], function (exports, _emberRoute, _emberSimpleAuthMixinsAuthenticatedRouteMixin) {
    exports['default'] = _emberRoute['default'].extend(_emberSimpleAuthMixinsAuthenticatedRouteMixin['default'], {
        authenticationRoute: 'signin'
    });
});
define('ghost-admin/routes/editor/edit', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/editor-base-route'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsEditorBaseRoute) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsEditorBaseRoute['default'], {
        titleToken: 'Editor',

        beforeModel: function beforeModel(transition) {
            this.set('_transitionedFromNew', transition.data.fromNew);

            this._super.apply(this, arguments);
        },

        model: function model(params) {
            var _this = this;

            /* eslint-disable camelcase */
            var query = {
                id: params.post_id,
                status: 'all',
                staticPages: 'all'
            };
            /* eslint-enable camelcase */

            return this.store.query('post', query).then(function (records) {
                var post = records.get('firstObject');

                if (post) {
                    return post;
                }

                return _this.replaceWith('posts.index');
            });
        },

        afterModel: function afterModel(post) {
            var _this2 = this;

            this._super.apply(this, arguments);

            return this.get('session.user').then(function (user) {
                if (user.get('isAuthor') && !post.isAuthoredByUser(user)) {
                    return _this2.replaceWith('posts.index');
                }
            });
        },

        setupController: function setupController(controller) {
            this._super.apply(this, arguments);
            controller.set('shouldFocusEditor', this.get('_transitionedFromNew'));
        },

        actions: {
            authorizationFailed: function authorizationFailed() {
                this.get('controller').send('toggleReAuthenticateModal');
            },

            redirectToContentScreen: function redirectToContentScreen() {
                this.transitionTo('posts');
            }
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/routes/editor/index', ['exports', 'ember-route'], function (exports, _emberRoute) {
    exports['default'] = _emberRoute['default'].extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            this.transitionTo('editor.new');
        }
    });
});
define('ghost-admin/routes/editor/new', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/editor-base-route'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsEditorBaseRoute) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsEditorBaseRoute['default'], {
        titleToken: 'Editor',

        model: function model() {
            var _this = this;

            return this.get('session.user').then(function (user) {
                return _this.store.createRecord('post', {
                    author: user
                });
            });
        },

        renderTemplate: function renderTemplate(controller, model) {
            this.render('editor/edit', {
                controller: controller,
                model: model
            });

            this.render('post-settings-menu', {
                model: model,
                into: 'application',
                outlet: 'settings-menu'
            });
        },

        setupController: function setupController() {
            var psm = this.controllerFor('post-settings-menu');

            // make sure there are no titleObserver functions hanging around
            // from previous posts
            psm.removeObserver('titleScratch', psm, 'titleObserver');

            // Ensure that the PSM Publish Date selector resets
            psm.send('resetPubDate');

            this._super.apply(this, arguments);
        },

        actions: {
            willTransition: function willTransition(transition) {
                // decorate the transition object so the editor.edit route
                // knows this was the previous active route
                transition.data.fromNew = true;

                this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost-admin/routes/error404', ['exports', 'ember'], function (exports, _ember) {
    var Route = _ember['default'].Route;
    exports['default'] = Route.extend({
        controllerName: 'error',
        templateName: 'error',
        titleToken: 'Error',

        model: function model() {
            return {
                status: 404
            };
        }
    });
});
define('ghost-admin/routes/posts', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _ghostAdminRoutesAuthenticated) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend({
        titleToken: 'Content'
    });
});
define('ghost-admin/routes/posts/index', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/shortcuts-route', 'ember-infinity/mixins/route', 'ember-computed', 'ember-platform', 'jquery'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsShortcutsRoute, _emberInfinityMixinsRoute, _emberComputed, _emberPlatform, _jquery) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_emberInfinityMixinsRoute['default'], _ghostAdminMixinsShortcutsRoute['default'], {

        perPage: 30,
        perPageParam: 'limit',
        totalPagesParam: 'meta.pagination.pages',

        _type: null,
        _selectedPostIndex: null,

        model: function model(params) {
            var _this = this;

            this.set('_type', params.type);
            var filterSettings = this.get('filterSettings');

            return this.get('session.user').then(function (user) {
                if (user.get('isAuthor')) {
                    filterSettings.filter = filterSettings.filter ? filterSettings.filter + '+author:' + user.get('slug') : 'author:' + user.get('slug');
                }

                var perPage = _this.get('perPage');
                var paginationSettings = (0, _emberPlatform.assign)({ perPage: perPage, startingPage: 1 }, filterSettings);

                return _this.infinityModel('post', paginationSettings);
            });
        },

        filterSettings: (0, _emberComputed['default'])('_type', function () {
            var type = this.get('_type');
            var status = 'all';
            var staticPages = 'all';

            switch (type) {
                case 'draft':
                    status = 'draft';
                    staticPages = false;
                    break;
                case 'published':
                    status = 'published';
                    staticPages = false;
                    break;
                case 'scheduled':
                    status = 'scheduled';
                    staticPages = false;
                    break;
                case 'page':
                    staticPages = true;
                    break;
            }

            return {
                status: status,
                staticPages: staticPages
            };
        }),

        stepThroughPosts: function stepThroughPosts(step) {
            var currentPost = this.get('controller.selectedPost');
            var posts = this.get('controller.model');
            var length = posts.get('length');
            var newPosition = undefined;

            // when the currentPost is deleted we won't be able to use indexOf.
            // we keep track of the index locally so we can select next after deletion
            if (this._selectedPostIndex !== null && length) {
                newPosition = this._selectedPostIndex + step;
            } else {
                newPosition = posts.indexOf(currentPost) + step;
            }

            // if we are on the first or last item
            // just do nothing (desired behavior is to not
            // loop around)
            if (newPosition >= length) {
                return;
            } else if (newPosition < 0) {
                return;
            }

            this._selectedPostIndex = newPosition;
            this.set('controller.selectedPost', posts.objectAt(newPosition));
        },

        shortcuts: {
            'up, k': 'moveUp',
            'down, j': 'moveDown',
            'enter': 'editPost',
            'c': 'newPost',
            'command+backspace, ctrl+backspace': 'deletePost'
        },

        resetController: function resetController() {
            this.set('controller.selectedPost', null);
            this.set('controller.showDeletePostModal', false);
        },

        actions: {
            willTransition: function willTransition() {
                this._selectedPostIndex = null;

                if (this.get('controller')) {
                    this.resetController();
                }
            },

            queryParamsDidChange: function queryParamsDidChange() {
                // on direct page load controller won't exist so we want to
                // avoid a double transition
                if (this.get('controller')) {
                    this.refresh();
                }

                // scroll back to the top
                (0, _jquery['default'])('.content-list').scrollTop(0);
            },

            newPost: function newPost() {
                this.transitionTo('editor.new');
            },

            moveUp: function moveUp() {
                this.stepThroughPosts(-1);
            },

            moveDown: function moveDown() {
                this.stepThroughPosts(1);
            },

            editPost: function editPost() {
                var selectedPost = this.get('controller.selectedPost');

                if (selectedPost) {
                    this.transitionTo('editor.edit', selectedPost.get('id'));
                }
            },

            deletePost: function deletePost() {
                this.get('controller').send('toggleDeletePostModal');
            },

            onPostDeletion: function onPostDeletion() {
                // select next post (re-select the current index)
                this.stepThroughPosts(0);
            }
        }
    });
});
define('ghost-admin/routes/reset', ['exports', 'ember-route', 'ember-service/inject', 'ember-simple-auth/mixins/unauthenticated-route-mixin', 'ghost-admin/mixins/style-body'], function (exports, _emberRoute, _emberServiceInject, _emberSimpleAuthMixinsUnauthenticatedRouteMixin, _ghostAdminMixinsStyleBody) {
    exports['default'] = _emberRoute['default'].extend(_ghostAdminMixinsStyleBody['default'], _emberSimpleAuthMixinsUnauthenticatedRouteMixin['default'], {
        classNames: ['ghost-reset'],

        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),

        beforeModel: function beforeModel() {
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You can\'t reset your password while you\'re signed in.', { type: 'warn', delayed: true, key: 'password.reset.signed-in' });
            }

            this._super.apply(this, arguments);
        },

        setupController: function setupController(controller, params) {
            controller.token = params.token;
        },

        // Clear out any sensitive information
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.controller.clearData();
        }
    });
});
define('ghost-admin/routes/settings/apps', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Apps',

        classNames: ['settings-view-apps'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme,private' }).then(function (records) {
                return records.get('firstObject');
            });
        }
    });
});
define('ghost-admin/routes/settings/apps/amp', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Apps - AMP',

        classNames: ['settings-view-apps-amp'],

        model: function model() {
            return this.modelFor('settings.apps').get('amp');
        },

        setupController: function setupController(controller) {
            this._super.apply(this, arguments);

            controller.set('settings', this.modelFor('settings.apps'));
        }
    });
});
define('ghost-admin/routes/settings/apps/slack', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Apps - Slack',

        classNames: ['settings-view-apps-slack'],

        model: function model() {
            return this.modelFor('settings.apps').get('slack.firstObject');
        },

        setupController: function setupController(controller) {
            this._super.apply(this, arguments);

            controller.set('settings', this.modelFor('settings.apps'));
        }
    });
});
define('ghost-admin/routes/settings/code-injection', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Code injection',
        classNames: ['settings-view-code'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme,private' }).then(function (records) {
                return records.get('firstObject');
            });
        },

        actions: {
            save: function save() {
                this.get('controller').send('save');
            }
        }
    });
});
define('ghost-admin/routes/settings/general', ['exports', 'rsvp', 'ember-service/inject', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _rsvp, _emberServiceInject, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - General',

        classNames: ['settings-view-general'],

        config: (0, _emberServiceInject['default'])(),

        // TODO: replace with a synchronous settings service
        querySettings: function querySettings() {
            return this.store.queryRecord('setting', { type: 'blog,theme,private' });
        },

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return _rsvp['default'].hash({
                settings: this.querySettings(),
                availableTimezones: this.get('config.availableTimezones')
            });
        },

        setupController: function setupController(controller, models) {
            controller.set('model', models.settings);
            controller.set('availableTimezones', models.availableTimezones);
        },

        actions: {
            save: function save() {
                return this.get('controller').send('save');
            },

            reloadSettings: function reloadSettings() {
                var _this = this;

                return this.querySettings(function (settings) {
                    _this.set('controller.model', settings);
                });
            },

            activateTheme: function activateTheme(theme) {
                return this.get('controller').send('setTheme', theme);
            }
        }
    });
});
define('ghost-admin/routes/settings/general/uploadtheme', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _ghostAdminRoutesAuthenticated) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend({

        model: function model() {
            return this.modelFor('settings.general').settings.get('availableThemes');
        },

        actions: {
            cancel: function cancel() {
                this.transitionTo('settings.general');
            }
        }
    });
});
define('ghost-admin/routes/settings/labs', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body', 'ghost-admin/mixins/current-user-settings'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsStyleBody, _ghostAdminMixinsCurrentUserSettings) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Labs',

        classNames: ['settings'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor()).then(this.transitionEditor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme,private' }).then(function (records) {
                return records.get('firstObject');
            });
        }
    });
});
define('ghost-admin/routes/settings/navigation', ['exports', 'jquery', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _jquery, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Settings - Navigation',

        classNames: ['settings-view-navigation'],

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            return this.get('session.user').then(this.transitionAuthor());
        },

        model: function model() {
            return this.store.query('setting', { type: 'blog,theme,private' }).then(function (records) {
                return records.get('firstObject');
            });
        },

        setupController: function setupController() {
            this._super.apply(this, arguments);
            this.get('controller').send('reset');
        },

        actions: {
            save: function save() {
                // since shortcuts are run on the route, we have to signal to the components
                // on the page that we're about to save.
                (0, _jquery['default'])('.page-actions .gh-btn-blue').focus();

                this.get('controller').send('save');
            },

            willTransition: function willTransition() {
                // reset the model so that our CPs re-calc and unsaved changes aren't
                // persisted across transitions
                this.set('controller.model', null);
                return this._super.apply(this, arguments);
            }
        }
    });
});
define('ghost-admin/routes/settings/tags', ['exports', 'jquery', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/shortcuts-route', 'ghost-admin/mixins/pagination'], function (exports, _jquery, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsShortcutsRoute, _ghostAdminMixinsPagination) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsCurrentUserSettings['default'], _ghostAdminMixinsPagination['default'], _ghostAdminMixinsShortcutsRoute['default'], {
        titleToken: 'Settings - Tags',

        paginationModel: 'tag',
        paginationSettings: {
            include: 'count.posts',
            limit: 15
        },

        shortcuts: {
            'up, k': 'moveUp',
            'down, j': 'moveDown',
            left: 'focusList',
            right: 'focusContent',
            c: 'newTag'
        },

        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);

            return this.get('session.user').then(this.transitionAuthor());
        },

        model: function model(params, transition) {
            var _this = this;

            return this.loadFirstPage(transition).then(function () {
                return _this.store.filter('tag', function (tag) {
                    return !tag.get('isNew');
                });
            });
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.send('resetShortcutsScope');
            this.send('resetPagination');
        },

        stepThroughTags: function stepThroughTags(step) {
            var currentTag = this.modelFor('settings.tags.tag');
            var tags = this.get('controller.tags');
            var length = tags.get('length');

            if (currentTag && length) {
                var newPosition = tags.indexOf(currentTag) + step;

                if (newPosition >= length) {
                    return;
                } else if (newPosition < 0) {
                    return;
                }

                this.transitionTo('settings.tags.tag', tags.objectAt(newPosition));
            }
        },

        scrollContent: function scrollContent(amount) {
            var content = (0, _jquery['default'])('.tag-settings-pane');
            var scrolled = content.scrollTop();

            content.scrollTop(scrolled + 50 * amount);
        },

        actions: {
            moveUp: function moveUp() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(-1);
                } else {
                    this.stepThroughTags(-1);
                }
            },

            moveDown: function moveDown() {
                if (this.controller.get('tagContentFocused')) {
                    this.scrollContent(1);
                } else {
                    this.stepThroughTags(1);
                }
            },

            focusList: function focusList() {
                this.set('controller.keyboardFocus', 'tagList');
            },

            focusContent: function focusContent() {
                this.set('controller.keyboardFocus', 'tagContent');
            },

            newTag: function newTag() {
                this.transitionTo('settings.tags.new');
            },

            resetShortcutsScope: function resetShortcutsScope() {
                key.setScope('default');
            }
        }
    });
});
/* global key */
define('ghost-admin/routes/settings/tags/index', ['exports', 'ember-service/inject', 'ghost-admin/routes/authenticated'], function (exports, _emberServiceInject, _ghostAdminRoutesAuthenticated) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend({
        mediaQueries: (0, _emberServiceInject['default'])(),

        beforeModel: function beforeModel() {
            var firstTag = this.modelFor('settings.tags').get('firstObject');

            this._super.apply(this, arguments);

            if (firstTag && !this.get('mediaQueries.maxWidth600')) {
                this.transitionTo('settings.tags.tag', firstTag);
            }
        }
    });
});
define('ghost-admin/routes/settings/tags/new', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _ghostAdminRoutesAuthenticated) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend({

        controllerName: 'settings.tags.tag',

        model: function model() {
            return this.store.createRecord('tag');
        },

        renderTemplate: function renderTemplate() {
            this.render('settings.tags.tag');
        },

        // reset the model so that mobile screens react to an empty selectedTag
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.set('controller.model', null);
        }

    });
});
define('ghost-admin/routes/settings/tags/tag', ['exports', 'ghost-admin/routes/authenticated'], function (exports, _ghostAdminRoutesAuthenticated) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend({

        model: function model(params) {
            return this.store.queryRecord('tag', { slug: params.tag_slug });
        },

        serialize: function serialize(model) {
            return { tag_slug: model.get('slug') };
        },

        // reset the model so that mobile screens react to an empty selectedTag
        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.set('controller.model', null);
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/routes/setup', ['exports', 'ember-route', 'ember-service/inject', 'ghost-admin/mixins/style-body'], function (exports, _emberRoute, _emberServiceInject, _ghostAdminMixinsStyleBody) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberRoute['default'].extend(_ghostAdminMixinsStyleBody['default'], {
        titleToken: 'Setup',

        classNames: ['ghost-setup'],

        ghostPaths: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),

        // use the beforeModel hook to check to see whether or not setup has been
        // previously completed.  If it has, stop the transition into the setup page.
        beforeModel: function beforeModel() {
            var _this = this;

            this._super.apply(this, arguments);

            // with OAuth auth users are authenticated on step 2 so we
            // can't use the session.isAuthenticated shortcut
            if (!this.get('config.ghostOAuth') && this.get('session.isAuthenticated')) {
                this.transitionTo('posts');
                return;
            }

            var authUrl = this.get('ghostPaths.url').api('authentication', 'setup');

            // check the state of the setup process via the API
            return this.get('ajax').request(authUrl).then(function (result) {
                var _result$setup = _slicedToArray(result.setup, 1);

                var setup = _result$setup[0];

                if (setup.status) {
                    return _this.transitionTo('signin');
                } else {
                    var controller = _this.controllerFor('setup/two');
                    if (setup.title) {
                        controller.set('blogTitle', setup.title.replace(/&apos;/gim, '\''));
                    }

                    if (setup.name) {
                        controller.set('name', setup.name.replace(/&apos;/gim, '\''));
                    }

                    if (setup.email) {
                        controller.set('email', setup.email);
                    }
                }
            });
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);
            this.controllerFor('setup/two').set('password', '');
        }
    });
});
define('ghost-admin/routes/setup/index', ['exports', 'ember-route'], function (exports, _emberRoute) {
    exports['default'] = _emberRoute['default'].extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            this.transitionTo('setup.one');
        }
    });
});
define('ghost-admin/routes/setup/one', ['exports', 'ember', 'ember-route', 'ember-service/inject', 'ember-object', 'ember-runloop', 'ember-ajax/services/ajax'], function (exports, _ember, _emberRoute, _emberServiceInject, _emberObject, _emberRunloop, _emberAjaxServicesAjax) {

    // ember-cli-shims doesn't export Ember.testing
    var testing = _ember['default'].testing;

    var DownloadCountPoller = _emberObject['default'].extend({
        url: null,
        count: '',
        runId: null,

        ajax: _emberAjaxServicesAjax['default'].create(),
        notifications: (0, _emberServiceInject['default'])(),

        init: function init() {
            this._super.apply(this, arguments);
            this.downloadCounter();
            this.poll();
        },

        poll: function poll() {
            var interval = testing ? 20 : 2000;
            var runId = _emberRunloop['default'].later(this, function () {
                this.downloadCounter();
                if (!testing) {
                    this.poll();
                }
            }, interval);

            this.set('runId', runId);
        },

        downloadCounter: function downloadCounter() {
            var _this = this;

            this.get('ajax').request(this.get('url')).then(function (data) {
                var pattern = /(-?\d+)(\d{3})/;
                var count = data.count.toString();

                while (pattern.test(count)) {
                    count = count.replace(pattern, '$1,$2');
                }

                _this.set('count', count);
            })['catch'](function (error) {
                _this.set('count', '');
                _this.get('notifications').showAPIError(error);
            });
        }
    });

    exports['default'] = _emberRoute['default'].extend({
        ghostPaths: (0, _emberServiceInject['default'])(),

        model: function model() {
            return DownloadCountPoller.create({ url: this.get('ghostPaths.count') });
        },

        resetController: function resetController(controller, isExiting) {
            if (isExiting) {
                _emberRunloop['default'].cancel(controller.get('model.runId'));
                controller.set('model', null);
            }
        }
    });
});
define('ghost-admin/routes/setup/three', ['exports', 'ember-route'], function (exports, _emberRoute) {
    exports['default'] = _emberRoute['default'].extend({
        beforeModel: function beforeModel() {
            this._super.apply(this, arguments);
            if (!this.controllerFor('setup.two').get('blogCreated')) {
                this.transitionTo('setup.two');
            }
        }
    });
});
define('ghost-admin/routes/setup/two', ['exports', 'ember-route', 'ember-service/inject', 'ghost-admin/services/ajax'], function (exports, _emberRoute, _emberServiceInject, _ghostAdminServicesAjax) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    exports['default'] = _emberRoute['default'].extend({

        session: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        actions: {
            // TODO: reduce duplication with setup/signin/signup routes
            authenticateWithGhostOrg: function authenticateWithGhostOrg() {
                var _this = this;

                var authStrategy = 'authenticator:oauth2-ghost';

                this.toggleProperty('controller.loggingIn');
                this.set('controller.flowErrors', '');

                return this.get('torii').open('ghost-oauth2', { type: 'setup' }).then(function (authentication) {
                    return _this.send('authenticate', authStrategy, [authentication]);
                })['catch'](function () {
                    _this.toggleProperty('controller.loggingIn');
                    _this.set('controller.flowErrors', 'Authentication with Ghost.org denied or failed');
                });
            },

            authenticate: function authenticate(strategy, authentication) {
                var _get,
                    _this2 = this;

                // we don't want to redirect after sign-in during setup
                this.set('session.skipAuthSuccessHandler', true);

                // Authentication transitions to posts.index, we can leave spinner running unless there is an error
                return (_get = this.get('session')).authenticate.apply(_get, [strategy].concat(_toConsumableArray(authentication))).then(function () {
                    _this2.get('controller.errors').remove('session');
                })['catch'](function (error) {
                    if (error && error.errors) {
                        if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)) {
                            return _this2.get('notifications').showAPIError(error);
                        }

                        error.errors.forEach(function (err) {
                            err.message = err.message.htmlSafe();
                        });

                        _this2.set('controller.flowErrors', error.errors[0].message.string);
                    } else {
                        // Connection errors don't return proper status message, only req.body
                        _this2.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                    }
                })['finally'](function () {
                    _this2.toggleProperty('controller.loggingIn');
                });
            }
        }
    });
});
define('ghost-admin/routes/signin', ['exports', 'ember-route', 'ember-service/inject', 'ember-object', 'ghost-admin/mixins/style-body', 'ember-data', 'ghost-admin/services/ajax', 'ember-simple-auth/mixins/unauthenticated-route-mixin'], function (exports, _emberRoute, _emberServiceInject, _emberObject, _ghostAdminMixinsStyleBody, _emberData, _ghostAdminServicesAjax, _emberSimpleAuthMixinsUnauthenticatedRouteMixin) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    var Errors = _emberData['default'].Errors;
    exports['default'] = _emberRoute['default'].extend(_emberSimpleAuthMixinsUnauthenticatedRouteMixin['default'], _ghostAdminMixinsStyleBody['default'], {
        titleToken: 'Sign In',

        classNames: ['ghost-login'],

        session: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        routeIfAlreadyAuthenticated: 'posts',

        model: function model() {
            return _emberObject['default'].create({
                identification: '',
                password: '',
                errors: Errors.create()
            });
        },

        // the deactivate hook is called after a route has been exited.
        deactivate: function deactivate() {
            var controller = this.controllerFor('signin');

            this._super.apply(this, arguments);

            // clear the properties that hold the credentials when we're no longer on the signin screen
            controller.set('model.identification', '');
            controller.set('model.password', '');
        },

        actions: {
            authenticateWithGhostOrg: function authenticateWithGhostOrg() {
                var _this = this;

                var authStrategy = 'authenticator:oauth2-ghost';

                this.toggleProperty('controller.loggingIn');
                this.set('controller.flowErrors', '');

                return this.get('torii').open('ghost-oauth2', { type: 'signin' }).then(function (authentication) {
                    _this.send('authenticate', authStrategy, [authentication]);
                })['catch'](function () {
                    _this.toggleProperty('controller.loggingIn');
                    _this.set('controller.flowErrors', 'Authentication with Ghost.org denied or failed');
                });
            },

            authenticate: function authenticate(strategy, authentication) {
                var _get,
                    _this2 = this;

                // Authentication transitions to posts.index, we can leave spinner running unless there is an error
                return (_get = this.get('session')).authenticate.apply(_get, [strategy].concat(_toConsumableArray(authentication)))['catch'](function (error) {
                    _this2.toggleProperty('controller.loggingIn');

                    if (error && error.errors) {
                        // we don't get back an ember-data/ember-ajax error object
                        // back so we need to pass in a null status in order to
                        // test against the payload
                        if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(error)) {
                            return _this2.get('notifications').showAPIError(error);
                        }

                        error.errors.forEach(function (err) {
                            err.message = err.message.htmlSafe();
                        });

                        _this2.set('controller.flowErrors', error.errors[0].message.string);

                        if (error.errors[0].message.string.match(/user with that email/)) {
                            _this2.get('controller.model.errors').add('identification', '');
                        }

                        if (error.errors[0].message.string.match(/password is incorrect/)) {
                            _this2.get('controller.model.errors').add('password', '');
                        }
                    } else {
                        // Connection errors don't return proper status message, only req.body
                        _this2.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                    }
                });
            }
        }
    });
});
define('ghost-admin/routes/signout', ['exports', 'ember', 'ember-service/inject', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/style-body'], function (exports, _ember, _emberServiceInject, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsStyleBody) {

    // ember-cli-shims doesn't export canInvoke
    var canInvoke = _ember['default'].canInvoke;
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], {
        titleToken: 'Sign Out',

        classNames: ['ghost-signout'],

        notifications: (0, _emberServiceInject['default'])(),

        afterModel: function afterModel(model, transition) {
            this.get('notifications').clearAll();
            if (canInvoke(transition, 'send')) {
                transition.send('invalidateSession');
            } else {
                this.send('invalidateSession');
            }
        }
    });
});
define('ghost-admin/routes/signup', ['exports', 'ember-route', 'rsvp', 'ember-service/inject', 'ember-object', 'ember-platform', 'ghost-admin/services/ajax', 'ember-data', 'ember-simple-auth/mixins/unauthenticated-route-mixin', 'ghost-admin/mixins/style-body'], function (exports, _emberRoute, _rsvp, _emberServiceInject, _emberObject, _emberPlatform, _ghostAdminServicesAjax, _emberData, _emberSimpleAuthMixinsUnauthenticatedRouteMixin, _ghostAdminMixinsStyleBody) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    var Promise = _rsvp['default'].Promise;
    var Errors = _emberData['default'].Errors;
    exports['default'] = _emberRoute['default'].extend(_ghostAdminMixinsStyleBody['default'], _emberSimpleAuthMixinsUnauthenticatedRouteMixin['default'], {
        classNames: ['ghost-signup'],

        ghostPaths: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),
        session: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        beforeModel: function beforeModel() {
            if (this.get('session.isAuthenticated')) {
                this.get('notifications').showAlert('You need to sign out to register as a new user.', { type: 'warn', delayed: true, key: 'signup.create.already-authenticated' });
            }

            this._super.apply(this, arguments);
        },

        model: function model(params) {
            var _this = this;

            var model = _emberObject['default'].create();
            var re = /^(?:[A-Za-z0-9_\-]{4})*(?:[A-Za-z0-9_\-]{2}|[A-Za-z0-9_\-]{3})?$/;
            var email = undefined,
                tokenText = undefined;

            return new Promise(function (resolve) {
                if (!re.test(params.token)) {
                    _this.get('notifications').showAlert('Invalid token.', { type: 'error', delayed: true, key: 'signup.create.invalid-token' });

                    return resolve(_this.transitionTo('signin'));
                }

                tokenText = atob(params.token);
                email = tokenText.split('|')[1];

                model.set('email', email);
                model.set('token', params.token);
                model.set('errors', Errors.create());

                var authUrl = _this.get('ghostPaths.url').api('authentication', 'invitation');

                return _this.get('ajax').request(authUrl, {
                    dataType: 'json',
                    data: {
                        email: email
                    }
                }).then(function (response) {
                    if (response && response.invitation && response.invitation[0].valid === false) {
                        _this.get('notifications').showAlert('The invitation does not exist or is no longer valid.', { type: 'warn', delayed: true, key: 'signup.create.invalid-invitation' });

                        return resolve(_this.transitionTo('signin'));
                    }

                    model.set('invitedBy', response.invitation[0].invitedBy);

                    resolve(model);
                })['catch'](function () {
                    resolve(model);
                });
            });
        },

        deactivate: function deactivate() {
            this._super.apply(this, arguments);

            // clear the properties that hold the sensitive data from the controller
            this.controllerFor('signup').setProperties({ email: '', password: '', token: '' });
        },

        actions: {
            authenticateWithGhostOrg: function authenticateWithGhostOrg() {
                var _this2 = this;

                var authStrategy = 'authenticator:oauth2-ghost';
                var inviteToken = this.get('controller.model.token');
                var email = this.get('controller.model.email');

                this.toggleProperty('controller.loggingIn');
                this.set('controller.flowErrors', '');

                this.get('torii').open('ghost-oauth2', { email: email, type: 'invite' }).then(function (authentication) {
                    var _authentication = (0, _emberPlatform.assign)({}, authentication, { inviteToken: inviteToken });
                    _this2.send('authenticate', authStrategy, [_authentication]);
                })['catch'](function () {
                    _this2.toggleProperty('controller.loggingIn');
                    _this2.set('controller.flowErrors', 'Authentication with Ghost.org denied or failed');
                });
            },

            // TODO: this is duplicated with the signin route - maybe extract into a mixin?
            authenticate: function authenticate(strategy, authentication) {
                var _get,
                    _this3 = this;

                // Authentication transitions to posts.index, we can leave spinner running unless there is an error
                (_get = this.get('session')).authenticate.apply(_get, [strategy].concat(_toConsumableArray(authentication)))['catch'](function (error) {
                    _this3.toggleProperty('controller.loggingIn');

                    if (error && error.errors) {
                        // we don't get back an ember-data/ember-ajax error object
                        // back so we need to pass in a null status in order to
                        // test against the payload
                        if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(null, error)) {
                            var versionMismatchError = new _ghostAdminServicesAjax.VersionMismatchError(error);
                            return _this3.get('notifications').showAPIError(versionMismatchError);
                        }

                        error.errors.forEach(function (err) {
                            err.message = err.message.htmlSafe();
                        });

                        _this3.set('controller.flowErrors', error.errors[0].message.string);

                        if (error.errors[0].message.string.match(/user with that email/)) {
                            _this3.get('controller.model.errors').add('identification', '');
                        }

                        if (error.errors[0].message.string.match(/password is incorrect/)) {
                            _this3.get('controller.model.errors').add('password', '');
                        }
                    } else {
                        // Connection errors don't return proper status message, only req.body
                        _this3.get('notifications').showAlert('There was a problem on the server.', { type: 'error', key: 'session.authenticate.failed' });
                    }
                });
            }
        }
    });
});
define('ghost-admin/routes/subscribers', ['exports', 'rsvp', 'ember-service/inject', 'ghost-admin/routes/authenticated'], function (exports, _rsvp, _emberServiceInject, _ghostAdminRoutesAuthenticated) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend({
        titleToken: 'Subscribers',

        feature: (0, _emberServiceInject['default'])(),

        // redirect if subscribers is disabled or user isn't owner/admin
        beforeModel: function beforeModel() {
            var _this = this;

            this._super.apply(this, arguments);
            var promises = {
                user: this.get('session.user'),
                subscribers: this.get('feature.subscribers')
            };

            return _rsvp['default'].hash(promises).then(function (hash) {
                var user = hash.user;
                var subscribers = hash.subscribers;

                if (!subscribers || !(user.get('isOwner') || user.get('isAdmin'))) {
                    return _this.transitionTo('posts');
                }
            });
        },

        setupController: function setupController(controller) {
            this._super.apply(this, arguments);
            controller.initializeTable();
            controller.send('loadFirstPage');
        },

        resetController: function resetController(controller, isExiting) {
            this._super.apply(this, arguments);
            if (isExiting) {
                controller.set('order', 'created_at');
                controller.set('direction', 'desc');
            }
        },

        actions: {
            addSubscriber: function addSubscriber(subscriber) {
                this.get('controller').send('addSubscriber', subscriber);
            },

            reset: function reset() {
                this.get('controller').send('reset');
            }
        }
    });
});
define('ghost-admin/routes/subscribers/import', ['exports', 'ember-route'], function (exports, _emberRoute) {
    exports['default'] = _emberRoute['default'].extend({
        actions: {
            cancel: function cancel() {
                this.transitionTo('subscribers');
            }
        }
    });
});
define('ghost-admin/routes/subscribers/new', ['exports', 'ember-route'], function (exports, _emberRoute) {
    exports['default'] = _emberRoute['default'].extend({
        model: function model() {
            return this.get('store').createRecord('subscriber');
        },

        deactivate: function deactivate() {
            var subscriber = this.controller.get('model');

            this._super.apply(this, arguments);

            if (subscriber.get('isNew')) {
                this.rollbackModel();
            }
        },

        rollbackModel: function rollbackModel() {
            var subscriber = this.controller.get('model');
            subscriber.rollbackAttributes();
        },

        actions: {
            save: function save() {
                var _this = this;

                var subscriber = this.controller.get('model');
                return subscriber.save().then(function (saved) {
                    _this.send('addSubscriber', saved);
                    return saved;
                });
            },

            cancel: function cancel() {
                this.rollbackModel();
                this.transitionTo('subscribers');
            }
        }
    });
});
define('ghost-admin/routes/team/index', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/pagination', 'ghost-admin/mixins/style-body', 'rsvp', 'ember-utils'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsPagination, _ghostAdminMixinsStyleBody, _rsvp, _emberUtils) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], _ghostAdminMixinsPagination['default'], {
        titleToken: 'Team',

        classNames: ['view-team'],

        paginationModel: 'user',
        paginationSettings: {
            status: 'all',
            limit: 20
        },

        model: function model() {
            var _this = this;

            return this.get('session.user').then(function (user) {
                var modelPromises = {
                    users: _this.loadFirstPage().then(function () {
                        return _this.store.filter('user', function (user) {
                            return !user.get('isNew') && !(0, _emberUtils.isBlank)(user.get('status'));
                        });
                    })
                };

                // authors do not have permission to hit the invites endpoint
                if (!user.get('isAuthor')) {
                    modelPromises.invites = _this.store.query('invite', { limit: 'all' }).then(function () {
                        return _this.store.filter('invite', function (invite) {
                            return !invite.get('isNew');
                        });
                    });
                }

                // we need to load the roles into ember cache
                // invites return role_id only and we do not offer a /role/:id endpoint
                modelPromises.roles = _this.get('store').query('role', {}).then(function (roles) {
                    return roles;
                });

                return _rsvp['default'].hash(modelPromises);
            });
        },

        setupController: function setupController(controller, models) {
            controller.setProperties(models);
        },

        actions: {
            reload: function reload() {
                this.refresh();
            }
        }
    });
});
define('ghost-admin/routes/team/user', ['exports', 'ghost-admin/routes/authenticated', 'ghost-admin/mixins/current-user-settings', 'ghost-admin/mixins/style-body'], function (exports, _ghostAdminRoutesAuthenticated, _ghostAdminMixinsCurrentUserSettings, _ghostAdminMixinsStyleBody) {
    exports['default'] = _ghostAdminRoutesAuthenticated['default'].extend(_ghostAdminMixinsStyleBody['default'], _ghostAdminMixinsCurrentUserSettings['default'], {
        titleToken: 'Team - User',

        classNames: ['team-view-user'],

        model: function model(params) {
            return this.store.queryRecord('user', { slug: params.user_slug, include: 'count.posts' });
        },

        serialize: function serialize(model) {
            return { user_slug: model.get('slug') };
        },

        afterModel: function afterModel(user) {
            var _this = this;

            this._super.apply(this, arguments);

            return this.get('session.user').then(function (currentUser) {
                var isOwnProfile = user.get('id') === currentUser.get('id');
                var isAuthor = currentUser.get('isAuthor');
                var isEditor = currentUser.get('isEditor');

                if (isAuthor && !isOwnProfile) {
                    _this.transitionTo('team.user', currentUser);
                } else if (isEditor && !isOwnProfile && !user.get('isAuthor')) {
                    _this.transitionTo('team');
                }
            });
        },

        deactivate: function deactivate() {
            var model = this.modelFor('team.user');

            // we want to revert any unsaved changes on exit
            if (model && model.get('hasDirtyAttributes')) {
                model.rollbackAttributes();
            }

            model.get('errors').clear();

            this._super.apply(this, arguments);
        },

        actions: {
            didTransition: function didTransition() {
                this.modelFor('team.user').get('errors').clear();
            },

            save: function save() {
                this.get('controller.save').perform();
            }
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/serializers/application', ['exports', 'ember', 'ember-string', 'ember-data/serializers/rest'], function (exports, _ember, _emberString, _emberDataSerializersRest) {
    var pluralize = _ember['default'].String.pluralize;
    exports['default'] = _emberDataSerializersRest['default'].extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            // Our API expects an id on the posted object
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);

            hash[root] = [data];
        },

        keyForAttribute: function keyForAttribute(attr) {
            return (0, _emberString.decamelize)(attr);
        }
    });
});
define('ghost-admin/serializers/invite', ['exports', 'ghost-admin/serializers/application'], function (exports, _ghostAdminSerializersApplication) {
    exports['default'] = _ghostAdminSerializersApplication['default'].extend({
        attrs: {
            role: { key: 'role_id' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/notification', ['exports', 'ghost-admin/serializers/application'], function (exports, _ghostAdminSerializersApplication) {
    exports['default'] = _ghostAdminSerializersApplication['default'].extend({
        attrs: {
            key: { key: 'location' }
        }
    });
});
define('ghost-admin/serializers/post', ['exports', 'ember', 'ghost-admin/serializers/application', 'ember-data/serializers/embedded-records-mixin'], function (exports, _ember, _ghostAdminSerializersApplication, _emberDataSerializersEmbeddedRecordsMixin) {
    var pluralize = _ember['default'].String.pluralize;
    exports['default'] = _ghostAdminSerializersApplication['default'].extend(_emberDataSerializersEmbeddedRecordsMixin['default'], {
        // settings for the EmbeddedRecordsMixin.
        attrs: {
            tags: { embedded: 'always' },
            publishedAtUTC: { key: 'published_at' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        normalize: function normalize(model, hash, prop) {
            // this is to enable us to still access the raw authorId
            // without requiring an extra get request (since it is an
            // async relationship).
            if ((prop === 'post' || prop === 'posts') && hash.author !== undefined) {
                hash.author_id = hash.author;
            }

            return this._super.apply(this, arguments);
        },

        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload) {
            var root = this.keyForAttribute(primaryModelClass.modelName);
            var pluralizedRoot = pluralize(primaryModelClass.modelName);

            if (payload[pluralizedRoot]) {
                payload[root] = payload[pluralizedRoot][0];
                delete payload[pluralizedRoot];
            }

            return this._super.apply(this, arguments);
        },

        normalizeArrayResponse: function normalizeArrayResponse() {
            return this._super.apply(this, arguments);
        },

        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            options = options || {};
            options.includeId = true;

            // We have a plural root in the API
            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Properties that exist on the model but we don't want sent in the payload

            delete data.uuid;
            delete data.html;
            // Inserted locally as a convenience.
            delete data.author_id;
            // Read-only virtual property.
            delete data.url;

            hash[root] = [data];
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/serializers/role', ['exports', 'ghost-admin/serializers/application'], function (exports, _ghostAdminSerializersApplication) {
    exports['default'] = _ghostAdminSerializersApplication['default'].extend({
        attrs: {
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/setting', ['exports', 'ember', 'ghost-admin/serializers/application'], function (exports, _ember, _ghostAdminSerializersApplication) {
    var pluralize = _ember['default'].String.pluralize;
    exports['default'] = _ghostAdminSerializersApplication['default'].extend({
        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            // Settings API does not want ids
            options = options || {};
            options.includeId = false;

            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);
            var payload = [];

            delete data.id;

            Object.keys(data).forEach(function (k) {
                payload.push({ key: k, value: data[k] });
            });

            hash[root] = payload;
        },

        normalizeArrayResponse: function normalizeArrayResponse(store, primaryModelClass, _payload, id, requestType) {
            var payload = { settings: [this._extractObjectFromArrayPayload(_payload)] };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },

        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, _payload, id, requestType) {
            var payload = { setting: this._extractObjectFromArrayPayload(_payload) };
            return this._super(store, primaryModelClass, payload, id, requestType);
        },

        keyForAttribute: function keyForAttribute(attr) {
            return attr;
        },

        _extractObjectFromArrayPayload: function _extractObjectFromArrayPayload(_payload) {
            var payload = { id: '0' };

            _payload.settings.forEach(function (setting) {
                payload[setting.key] = setting.value;
            });

            return payload;
        }
    });
});
define('ghost-admin/serializers/subscriber', ['exports', 'ghost-admin/serializers/application'], function (exports, _ghostAdminSerializersApplication) {
    exports['default'] = _ghostAdminSerializersApplication['default'].extend({
        attrs: {
            unsubscribedAtUTC: { key: 'unsubscribed_at' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        }
    });
});
define('ghost-admin/serializers/tag', ['exports', 'ember', 'ghost-admin/serializers/application'], function (exports, _ember, _ghostAdminSerializersApplication) {
    var pluralize = _ember['default'].String.pluralize;
    exports['default'] = _ghostAdminSerializersApplication['default'].extend({
        attrs: {
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        serializeIntoHash: function serializeIntoHash(hash, type, record, options) {
            options = options || {};
            options.includeId = true;

            var root = pluralize(type.modelName);
            var data = this.serialize(record, options);

            // Properties that exist on the model but we don't want sent in the payload

            delete data.count;

            hash[root] = [data];
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/serializers/user', ['exports', 'ember', 'ghost-admin/serializers/application', 'ember-data/serializers/embedded-records-mixin'], function (exports, _ember, _ghostAdminSerializersApplication, _emberDataSerializersEmbeddedRecordsMixin) {
    var pluralize = _ember['default'].String.pluralize;
    exports['default'] = _ghostAdminSerializersApplication['default'].extend(_emberDataSerializersEmbeddedRecordsMixin['default'], {
        attrs: {
            roles: { embedded: 'always' },
            lastLoginUTC: { key: 'last_login' },
            createdAtUTC: { key: 'created_at' },
            updatedAtUTC: { key: 'updated_at' }
        },

        extractSingle: function extractSingle(store, primaryType, payload) {
            var root = this.keyForAttribute(primaryType.modelName);
            var pluralizedRoot = pluralize(primaryType.modelName);

            payload[root] = payload[pluralizedRoot][0];
            delete payload[pluralizedRoot];

            return this._super.apply(this, arguments);
        },

        normalizeSingleResponse: function normalizeSingleResponse(store, primaryModelClass, payload) {
            var root = this.keyForAttribute(primaryModelClass.modelName);
            var pluralizedRoot = pluralize(primaryModelClass.modelName);

            if (payload[pluralizedRoot]) {
                payload[root] = payload[pluralizedRoot][0];
                delete payload[pluralizedRoot];
            }

            return this._super.apply(this, arguments);
        }
    });
});
define('ghost-admin/services/ajax', ['exports', 'ember-metal/get', 'ember-computed', 'ember-service/inject', 'ember-array/utils', 'ember-utils', 'ember-ajax/services/ajax', 'ember-ajax/errors', 'ghost-admin/config/environment'], function (exports, _emberMetalGet, _emberComputed, _emberServiceInject, _emberArrayUtils, _emberUtils, _emberAjaxServicesAjax, _emberAjaxErrors, _ghostAdminConfigEnvironment) {
    exports.VersionMismatchError = VersionMismatchError;
    exports.isVersionMismatchError = _isVersionMismatchError;
    exports.ServerUnreachableError = ServerUnreachableError;
    exports.isServerUnreachableError = _isServerUnreachableError;
    exports.RequestEntityTooLargeError = RequestEntityTooLargeError;
    exports.isRequestEntityTooLargeError = _isRequestEntityTooLargeError;
    exports.UnsupportedMediaTypeError = UnsupportedMediaTypeError;
    exports.isUnsupportedMediaTypeError = _isUnsupportedMediaTypeError;
    exports.MaintenanceError = MaintenanceError;
    exports.isMaintenanceError = _isMaintenanceError;
    exports.ThemeValidationError = ThemeValidationError;
    exports.isThemeValidationError = _isThemeValidationError;

    var JSONContentType = 'application/json';

    function isJSONContentType(header) {
        if (!header || (0, _emberUtils.isNone)(header)) {
            return false;
        }
        return header.indexOf(JSONContentType) === 0;
    }

    /* Version mismatch error */

    function VersionMismatchError(errors) {
        _emberAjaxErrors.AjaxError.call(this, errors, 'API server is running a newer version of Ghost, please upgrade.');
    }

    VersionMismatchError.prototype = Object.create(_emberAjaxErrors.AjaxError.prototype);

    function _isVersionMismatchError(errorOrStatus, payload) {
        if ((0, _emberAjaxErrors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof VersionMismatchError;
        } else {
            return (0, _emberMetalGet['default'])(payload || {}, 'errors.firstObject.errorType') === 'VersionMismatchError';
        }
    }

    /* Request entity too large error */

    function ServerUnreachableError(errors) {
        _emberAjaxErrors.AjaxError.call(this, errors, 'Server was unreachable');
    }

    ServerUnreachableError.prototype = Object.create(_emberAjaxErrors.AjaxError.prototype);

    function _isServerUnreachableError(error) {
        if ((0, _emberAjaxErrors.isAjaxError)(error)) {
            return error instanceof ServerUnreachableError;
        } else {
            return error === 0 || error === '0';
        }
    }

    function RequestEntityTooLargeError(errors) {
        _emberAjaxErrors.AjaxError.call(this, errors, 'Request is larger than the maximum file size the server allows');
    }

    RequestEntityTooLargeError.prototype = Object.create(_emberAjaxErrors.AjaxError.prototype);

    function _isRequestEntityTooLargeError(errorOrStatus) {
        if ((0, _emberAjaxErrors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof RequestEntityTooLargeError;
        } else {
            return errorOrStatus === 413;
        }
    }

    /* Unsupported media type error */

    function UnsupportedMediaTypeError(errors) {
        _emberAjaxErrors.AjaxError.call(this, errors, 'Request contains an unknown or unsupported file type.');
    }

    UnsupportedMediaTypeError.prototype = Object.create(_emberAjaxErrors.AjaxError.prototype);

    function _isUnsupportedMediaTypeError(errorOrStatus) {
        if ((0, _emberAjaxErrors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof UnsupportedMediaTypeError;
        } else {
            return errorOrStatus === 415;
        }
    }

    /* Maintenance error */

    function MaintenanceError(errors) {
        _emberAjaxErrors.AjaxError.call(this, errors, 'Ghost is currently undergoing maintenance, please wait a moment then retry.');
    }

    MaintenanceError.prototype = Object.create(_emberAjaxErrors.AjaxError.prototype);

    function _isMaintenanceError(errorOrStatus) {
        if ((0, _emberAjaxErrors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof MaintenanceError;
        } else {
            return errorOrStatus === 503;
        }
    }

    /* Theme validation error */

    function ThemeValidationError(errors) {
        _emberAjaxErrors.AjaxError.call(this, errors, 'Theme is not compatible or contains errors.');
    }

    ThemeValidationError.prototype = Object.create(_emberAjaxErrors.AjaxError.prototype);

    function _isThemeValidationError(errorOrStatus, payload) {
        if ((0, _emberAjaxErrors.isAjaxError)(errorOrStatus)) {
            return errorOrStatus instanceof ThemeValidationError;
        } else {
            return (0, _emberMetalGet['default'])(payload || {}, 'errors.firstObject.errorType') === 'ThemeValidationError';
        }
    }

    /* end: custom error types */

    var ajaxService = _emberAjaxServicesAjax['default'].extend({
        session: (0, _emberServiceInject['default'])(),

        headers: (0, _emberComputed['default'])('session.isAuthenticated', function () {
            var session = this.get('session');
            var headers = {};

            headers['X-Ghost-Version'] = _ghostAdminConfigEnvironment['default'].APP.version;

            if (session.get('isAuthenticated')) {
                session.authorize('authorizer:oauth2', function (headerName, headerValue) {
                    headers[headerName] = headerValue;
                });
            }

            return headers;
        }).volatile(),

        // ember-ajax recognises `application/vnd.api+json` as a JSON-API request
        // and formats appropriately, we want to handle `application/json` the same
        _makeRequest: function _makeRequest(hash) {
            var _this = this;

            var isAuthenticated = this.get('session.isAuthenticated');
            var isGhostRequest = hash.url.indexOf('/ghost/api/') !== -1;
            var isTokenRequest = isGhostRequest && hash.url.match(/authentication\/(?:token|ghost)/);
            var tokenExpiry = this.get('session.authenticated.expires_at');
            var isTokenExpired = tokenExpiry < new Date().getTime();

            if (isJSONContentType(hash.contentType) && hash.type !== 'GET') {
                if (typeof hash.data === 'object') {
                    hash.data = JSON.stringify(hash.data);
                }
            }

            // we can get into a situation where the app is left open without a
            // network connection and the token subsequently expires, this will
            // result in the next network request returning a 401 and killing the
            // session. This is an attempt to detect that and restore the session
            // using the stored refresh token before continuing with the request
            //
            // TODO:
            // - this might be quite blunt, if we have a lot of requests at once
            //   we probably want to queue the requests until the restore completes
            // BUG:
            // - the original caller gets a rejected promise with `undefined` instead
            //   of the AjaxError object when session restore fails. This isn't a
            //   huge deal because the session will be invalidated and app reloaded
            //   but it would be nice to be consistent
            if (isAuthenticated && isGhostRequest && !isTokenRequest && isTokenExpired) {
                return this.get('session').restore().then(function () {
                    return _this._makeRequest(hash);
                });
            }

            return this._super.apply(this, arguments);
        },

        handleResponse: function handleResponse(status, headers, payload) {
            if (this.isVersionMismatchError(status, headers, payload)) {
                return new VersionMismatchError(payload.errors);
            } else if (this.isServerUnreachableError(status, headers, payload)) {
                return new ServerUnreachableError(payload.errors);
            } else if (this.isRequestEntityTooLargeError(status, headers, payload)) {
                return new RequestEntityTooLargeError(payload.errors);
            } else if (this.isUnsupportedMediaTypeError(status, headers, payload)) {
                return new UnsupportedMediaTypeError(payload.errors);
            } else if (this.isMaintenanceError(status, headers, payload)) {
                return new MaintenanceError(payload.errors);
            } else if (this.isThemeValidationError(status, headers, payload)) {
                return new ThemeValidationError(payload.errors);
            }

            // TODO: we may want to check that we are hitting our own API before
            // logging the user out due to a 401 response
            if (this.isUnauthorizedError(status, headers, payload) && this.get('session.isAuthenticated')) {
                this.get('session').invalidate();
            }

            return this._super.apply(this, arguments);
        },

        normalizeErrorResponse: function normalizeErrorResponse(status, headers, payload) {
            if (payload && typeof payload === 'object') {
                var errors = payload.error || payload.errors || payload.message || undefined;

                if (errors) {
                    if (!(0, _emberArrayUtils.isEmberArray)(errors)) {
                        errors = [errors];
                    }

                    payload.errors = errors.map(function (error) {
                        if (typeof error === 'string') {
                            return { message: error };
                        } else {
                            return error;
                        }
                    });
                }
            }

            return this._super(status, headers, payload);
        },

        isVersionMismatchError: function isVersionMismatchError(status, headers, payload) {
            return _isVersionMismatchError(status, payload);
        },

        isServerUnreachableError: function isServerUnreachableError(status) {
            return _isServerUnreachableError(status);
        },

        isRequestEntityTooLargeError: function isRequestEntityTooLargeError(status) {
            return _isRequestEntityTooLargeError(status);
        },

        isUnsupportedMediaTypeError: function isUnsupportedMediaTypeError(status) {
            return _isUnsupportedMediaTypeError(status);
        },

        isMaintenanceError: function isMaintenanceError(status, headers, payload) {
            return _isMaintenanceError(status, payload);
        },

        isThemeValidationError: function isThemeValidationError(status, headers, payload) {
            return _isThemeValidationError(status, payload);
        }
    });

    // we need to reopen so that internal methods use the correct contentType
    ajaxService.reopen({
        contentType: 'application/json; charset=UTF-8'
    });

    exports['default'] = ajaxService;
});
define('ghost-admin/services/clock', ['exports', 'ember', 'ember-service', 'ember-runloop'], function (exports, _ember, _emberService, _emberRunloop) {

    // ember-cli-shims doesn't export Ember.testing
    var testing = _ember['default'].testing;

    var ONE_SECOND = 1000;

    // Creates a clock service to run intervals.

    exports['default'] = _emberService['default'].extend({
        second: null,
        minute: null,
        hour: null,

        init: function init() {
            this.tick();
        },

        tick: function tick() {
            var _this = this;

            var now = moment().utc();

            this.setProperties({
                second: now.seconds(),
                minute: now.minutes(),
                hour: now.hours()
            });

            if (!testing) {
                _emberRunloop['default'].later(function () {
                    _this.tick();
                }, ONE_SECOND);
            }
        }

    });
});
define('ghost-admin/services/config', ['exports', 'ember', 'ember-service', 'ember-computed', 'ember-service/inject', 'ember-utils'], function (exports, _ember, _emberService, _emberComputed, _emberServiceInject, _emberUtils) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    // ember-cli-shims doesn't export _ProxyMixin ot testing
    var _ProxyMixin = _ember['default']._ProxyMixin;
    exports['default'] = _emberService['default'].extend(_ProxyMixin, {
        ajax: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),

        content: {},

        fetch: function fetch() {
            var _this = this;

            var configUrl = this.get('ghostPaths.url').api('configuration');

            return this.get('ajax').request(configUrl).then(function (config) {
                // normalize blogUrl to non-trailing-slash

                var _config$configuration = _slicedToArray(config.configuration, 1);

                var blogUrl = _config$configuration[0].blogUrl;

                config.configuration[0].blogUrl = blogUrl.replace(/\/$/, '');

                _this.set('content', config.configuration[0]);
            });
        },

        availableTimezones: (0, _emberComputed['default'])(function () {
            var timezonesUrl = this.get('ghostPaths.url').api('configuration', 'timezones');

            return this.get('ajax').request(timezonesUrl).then(function (configTimezones) {
                var _configTimezones$configuration = _slicedToArray(configTimezones.configuration, 1);

                var timezonesObj = _configTimezones$configuration[0];

                timezonesObj = timezonesObj.timezones;

                return timezonesObj;
            });
        }),

        ghostOAuth: (0, _emberComputed['default'])('ghostAuthId', function () {
            return !(0, _emberUtils.isBlank)(this.get('ghostAuthId'));
        })
    });
});
define('ghost-admin/services/cookies', ['exports', 'ember-cookies/services/cookies'], function (exports, _emberCookiesServicesCookies) {
  exports['default'] = _emberCookiesServicesCookies['default'];
});
define('ghost-admin/services/dropdown', ['exports', 'ember-service', 'ember-evented', 'ghost-admin/mixins/body-event-listener'], function (exports, _emberService, _emberEvented, _ghostAdminMixinsBodyEventListener) {
    exports['default'] = _emberService['default'].extend(_emberEvented['default'], _ghostAdminMixinsBodyEventListener['default'], {
        bodyClick: function bodyClick() {
            this.closeDropdowns();
        },

        closeDropdowns: function closeDropdowns() {
            this.trigger('close');
        },

        toggleDropdown: function toggleDropdown(dropdownName, dropdownButton) {
            this.trigger('toggle', { target: dropdownName, button: dropdownButton });
        }
    });
});

// This is used by the dropdown initializer (and subsequently popovers) to manage closing & toggling
define('ghost-admin/services/ember-load-config', ['exports', 'ember-load/services/ember-load-config', 'ghost-admin/config/environment'], function (exports, _emberLoadServicesEmberLoadConfig, _ghostAdminConfigEnvironment) {
  var userConfig = _ghostAdminConfigEnvironment['default']['ember-load'] || {};

  exports['default'] = _emberLoadServicesEmberLoadConfig['default'].extend({
    loadingIndicatorClass: userConfig.loadingIndicatorClass
  });
});
define('ghost-admin/services/event-bus', ['exports', 'ember-service', 'ember-evented'], function (exports, _emberService, _emberEvented) {
    exports['default'] = _emberService['default'].extend(_emberEvented['default'], {
        publish: function publish() {
            return this.trigger.apply(this, arguments);
        },
        subscribe: function subscribe() {
            return this.on.apply(this, arguments);
        },
        unsubscribe: function unsubscribe() {
            return this.off.apply(this, arguments);
        }
    });
});
define('ghost-admin/services/feature', ['exports', 'ember', 'ember-service', 'ember-computed', 'ember-service/inject', 'ember-metal/set'], function (exports, _ember, _emberService, _emberComputed, _emberServiceInject, _emberMetalSet) {
    exports.feature = feature;

    // ember-cli-shims doesn't export Error
    var EmberError = _ember['default'].Error;

    function feature(name) {
        return (0, _emberComputed['default'])('config.' + name, 'labs.' + name, {
            get: function get() {
                if (this.get('config.' + name)) {
                    return this.get('config.' + name);
                }

                return this.get('labs.' + name) || false;
            },
            set: function set(key, value) {
                this.update(key, value);
                return value;
            }
        });
    }

    exports['default'] = _emberService['default'].extend({
        store: (0, _emberServiceInject['default'])(),
        config: (0, _emberServiceInject['default'])(),
        notifications: (0, _emberServiceInject['default'])(),

        publicAPI: feature('publicAPI'),
        subscribers: feature('subscribers'),

        _settings: null,

        labs: (0, _emberComputed['default'])('_settings.labs', function () {
            var labs = this.get('_settings.labs');

            try {
                return JSON.parse(labs) || {};
            } catch (e) {
                return {};
            }
        }),

        fetch: function fetch() {
            var _this = this;

            return this.get('store').queryRecord('setting', { type: 'blog,theme,private' }).then(function (settings) {
                _this.set('_settings', settings);
                return true;
            });
        },

        update: function update(key, value) {
            var _this2 = this;

            var settings = this.get('_settings');
            var labs = this.get('labs');

            // set the new labs key value
            (0, _emberMetalSet['default'])(labs, key, value);
            // update the 'labs' key of the settings model
            settings.set('labs', JSON.stringify(labs));

            return settings.save().then(function () {
                // return the labs key value that we get from the server
                _this2.notifyPropertyChange('labs');
                return _this2.get('labs.' + key);
            })['catch'](function (error) {
                settings.rollbackAttributes();
                _this2.notifyPropertyChange('labs');

                // we'll always have an errors object unless we hit a
                // validation error
                if (!error) {
                    throw new EmberError('Validation of the feature service settings model failed when updating labs.');
                }

                _this2.get('notifications').showAPIError(error);

                return _this2.get('labs.' + key);
            });
        }
    });
});
define('ghost-admin/services/ghost-paths', ['exports', 'ember', 'ember-service', 'ghost-admin/utils/ghost-paths'], function (exports, _ember, _emberService, _ghostAdminUtilsGhostPaths) {

    // ember-cli-shims doesn't export _ProxyMixin
    var _ProxyMixin = _ember['default']._ProxyMixin;
    exports['default'] = _emberService['default'].extend(_ProxyMixin, {
        content: (0, _ghostAdminUtilsGhostPaths['default'])()
    });
});
define('ghost-admin/services/lazy-loader', ['exports', 'jquery', 'ember', 'rsvp', 'ember-service', 'ember-service/inject'], function (exports, _jquery, _ember, _rsvp, _emberService, _emberServiceInject) {
    var testing = _ember['default'].testing;
    exports['default'] = _emberService['default'].extend({
        ajax: (0, _emberServiceInject['default'])(),
        ghostPaths: (0, _emberServiceInject['default'])(),

        // This is needed so we can disable it in unit tests
        testing: testing,

        scriptPromises: {},

        loadScript: function loadScript(key, url) {
            if (this.get('testing')) {
                return _rsvp['default'].resolve();
            }

            if (this.get('scriptPromises.' + key)) {
                // Script is already loaded/in the process of being loaded,
                // so return that promise
                return this.get('scriptPromises.' + key);
            }

            var ajax = this.get('ajax');
            var adminRoot = this.get('ghostPaths.adminRoot');

            var scriptPromise = ajax.request('' + adminRoot + url, {
                dataType: 'script',
                cache: true
            });

            this.set('scriptPromises.' + key, scriptPromise);

            return scriptPromise;
        },

        loadStyle: function loadStyle(key, url) {
            if (this.get('testing')) {
                return _rsvp['default'].resolve();
            }

            if (!(0, _jquery['default'])('#' + key + '-styles').length) {
                var $style = (0, _jquery['default'])('<link rel="stylesheet" id="' + key + '-styles" />');
                $style.attr('href', '' + this.get('ghostPaths.adminRoot') + url);
                (0, _jquery['default'])('head').append($style);
            }
        }
    });
});
define("ghost-admin/services/liquid-fire-transitions", ["exports", "liquid-fire/action", "liquid-fire/running-transition", "liquid-fire/transition-map", "ember-weakmap"], function (exports, _liquidFireAction, _liquidFireRunningTransition, _liquidFireTransitionMap, _emberWeakmap) {

  var wormholeActionMap = new _emberWeakmap["default"]();

  exports["default"] = _liquidFireTransitionMap["default"].extend({
    transitionFor: function transitionFor(conditions) {
      if (conditions.matchContext && conditions.matchContext.helperName === 'liquid-wormhole' || conditions.helperName === 'liquid-wormhole') {

        var versions = conditions.versions;

        conditions.versions = versions.map(function (version) {
          return version.value || version;
        });
        conditions.parentElement = conditions.parentElement.find('.liquid-wormhole-element');
        conditions.firstTime = 'no';

        var rule = this.constraintsFor(conditions).bestMatch(conditions);
        var action = undefined;

        if (rule) {
          if (wormholeActionMap.has(rule)) {
            action = wormholeActionMap.get(rule);
          } else {
            action = new _liquidFireAction["default"]('wormhole', [{ use: rule.use }]);
            action.validateHandler(this);

            wormholeActionMap.set(rule, action);
          }
        } else {
          action = this.defaultAction();
        }

        return new _liquidFireRunningTransition["default"](this, versions, action);
      } else {
        return this._super(conditions);
      }
    }
  });
});
define('ghost-admin/services/liquid-wormhole', ['exports', 'liquid-wormhole/services/liquid-wormhole'], function (exports, _liquidWormholeServicesLiquidWormhole) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidWormholeServicesLiquidWormhole['default'];
    }
  });
});
define('ghost-admin/services/media-queries', ['exports', 'ember-service', 'ember-runloop'], function (exports, _emberService, _emberRunloop) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var MEDIA_QUERIES = {
        maxWidth600: '(max-width: 600px)',
        isMobile: '(max-width: 800px)',
        maxWidth900: '(max-width: 900px)',
        maxWidth1000: '(max-width: 1000px)'
    };

    exports['default'] = _emberService['default'].extend({
        init: function init() {
            this._super.apply(this, arguments);
            this._handlers = [];
            this.loadQueries(MEDIA_QUERIES);
        },

        loadQueries: function loadQueries(queries) {
            var _this = this;

            Object.keys(queries).forEach(function (key) {
                _this.loadQuery(key, queries[key]);
            });
        },

        loadQuery: function loadQuery(key, queryString) {
            var _this2 = this;

            var query = window.matchMedia(queryString);

            this.set(key, query.matches);

            var handler = _emberRunloop['default'].bind(this, function () {
                var lastValue = _this2.get(key);
                var newValue = query.matches;
                if (lastValue !== newValue) {
                    _this2.set(key, query.matches);
                }
            });
            query.addListener(handler);
            this._handlers.push([query, handler]);
        },

        willDestroy: function willDestroy() {
            this._handlers.forEach(function (_ref) {
                var _ref2 = _slicedToArray(_ref, 2);

                var query = _ref2[0];
                var handler = _ref2[1];

                query.removeListener(handler);
            });
            this._super.apply(this, arguments);
        }

    });
});
define('ghost-admin/services/notifications', ['exports', 'ember-service', 'ember-computed', 'ember-array/utils', 'ember-metal/get', 'ember-metal/set', 'ember-service/inject', 'ember-utils', 'ember-string', 'ghost-admin/services/ajax'], function (exports, _emberService, _emberComputed, _emberArrayUtils, _emberMetalGet, _emberMetalSet, _emberServiceInject, _emberUtils, _emberString, _ghostAdminServicesAjax) {

    // Notification keys take the form of "noun.verb.message", eg:
    //
    // "invite.resend.api-error"
    // "user.invite.already-invited"
    //
    // The "noun.verb" part will be used as the "key base" in duplicate checks
    // to avoid stacking of multiple error messages whilst leaving enough
    // specificity to re-use keys for i18n lookups

    exports['default'] = _emberService['default'].extend({
        delayedNotifications: (0, _emberArrayUtils.A)(),
        content: (0, _emberArrayUtils.A)(),

        upgradeStatus: (0, _emberServiceInject['default'])(),

        alerts: (0, _emberComputed.filter)('content', function (notification) {
            var status = (0, _emberMetalGet['default'])(notification, 'status');
            return status === 'alert';
        }),

        notifications: (0, _emberComputed.filter)('content', function (notification) {
            var status = (0, _emberMetalGet['default'])(notification, 'status');
            return status === 'notification';
        }),

        handleNotification: function handleNotification(message, delayed) {
            // If this is an alert message from the server, treat it as html safe
            if (typeof message.toJSON === 'function' && message.get('status') === 'alert') {
                message.set('message', message.get('message').htmlSafe());
            }

            if (!(0, _emberMetalGet['default'])(message, 'status')) {
                (0, _emberMetalSet['default'])(message, 'status', 'notification');
            }

            // close existing duplicate alerts/notifications to avoid stacking
            if ((0, _emberMetalGet['default'])(message, 'key')) {
                this._removeItems((0, _emberMetalGet['default'])(message, 'status'), (0, _emberMetalGet['default'])(message, 'key'));
            }

            if (!delayed) {
                this.get('content').pushObject(message);
            } else {
                this.get('delayedNotifications').pushObject(message);
            }
        },

        showAlert: function showAlert(message, options) {
            options = options || {};

            this.handleNotification({
                message: message,
                status: 'alert',
                type: options.type,
                key: options.key
            }, options.delayed);
        },

        showNotification: function showNotification(message, options) {
            options = options || {};

            if (!options.doNotCloseNotifications) {
                this.closeNotifications();
            } else {
                // TODO: this should be removed along with showErrors
                options.key = undefined;
            }

            this.handleNotification({
                message: message,
                status: 'notification',
                type: options.type,
                key: options.key
            }, options.delayed);
        },

        showAPIError: function showAPIError(resp, options) {
            var _this = this;

            // handle "global" errors
            if ((0, _ghostAdminServicesAjax.isVersionMismatchError)(resp)) {
                return this.get('upgradeStatus').requireUpgrade();
            } else if ((0, _ghostAdminServicesAjax.isMaintenanceError)(resp)) {
                return this.get('upgradeStatus').maintenanceAlert();
            }

            // loop over ember-ajax errors object
            if (resp && (0, _emberArrayUtils.isEmberArray)(resp.errors)) {
                return resp.errors.forEach(function (error) {
                    _this._showAPIError(error, options);
                });
            }

            this._showAPIError(resp, options);
        },

        _showAPIError: function _showAPIError(resp, options) {
            options = options || {};
            options.type = options.type || 'error';

            // if possible use the title to get a unique key
            // - we only show one alert for each key so if we get multiple errors
            //   only the last one will be shown
            if (!options.key && !(0, _emberUtils.isBlank)((0, _emberMetalGet['default'])(resp, 'title'))) {
                options.key = (0, _emberString.dasherize)((0, _emberMetalGet['default'])(resp, 'title'));
            }
            options.key = ['api-error', options.key].compact().join('.');

            var msg = options.defaultErrorText || 'There was a problem on the server, please try again.';

            if (resp instanceof String) {
                msg = resp;
            } else if (!(0, _emberUtils.isBlank)((0, _emberMetalGet['default'])(resp, 'detail'))) {
                msg = resp.detail;
            } else if (!(0, _emberUtils.isBlank)((0, _emberMetalGet['default'])(resp, 'message'))) {
                msg = resp.message;
            }

            this.showAlert(msg, options);
        },

        displayDelayed: function displayDelayed() {
            var _this2 = this;

            this.delayedNotifications.forEach(function (message) {
                _this2.get('content').pushObject(message);
            });
            this.delayedNotifications = [];
        },

        closeNotification: function closeNotification(notification) {
            var content = this.get('content');

            if (typeof notification.toJSON === 'function') {
                notification.deleteRecord();
                notification.save()['finally'](function () {
                    content.removeObject(notification);
                });
            } else {
                content.removeObject(notification);
            }
        },

        closeNotifications: function closeNotifications(key) {
            this._removeItems('notification', key);
        },

        closeAlerts: function closeAlerts(key) {
            this._removeItems('alert', key);
        },

        clearAll: function clearAll() {
            this.get('content').clear();
        },

        _removeItems: function _removeItems(status, key) {
            var _this3 = this;

            if (key) {
                (function () {
                    var keyBase = _this3._getKeyBase(key);
                    // TODO: keys should only have . special char but we should
                    // probably use a better regexp escaping function/polyfill
                    var escapedKeyBase = keyBase.replace('.', '\\.');
                    var keyRegex = new RegExp('^' + escapedKeyBase);

                    _this3.set('content', _this3.get('content').reject(function (item) {
                        var itemKey = (0, _emberMetalGet['default'])(item, 'key');
                        var itemStatus = (0, _emberMetalGet['default'])(item, 'status');

                        return itemStatus === status && itemKey && itemKey.match(keyRegex);
                    }));
                })();
            } else {
                this.set('content', this.get('content').rejectBy('status', status));
            }
        },

        // take a key and return the first two elements, eg:
        // "invite.revoke.failed" => "invite.revoke"
        _getKeyBase: function _getKeyBase(key) {
            return key.split('.').slice(0, 2).join('.');
        }
    });
});
define('ghost-admin/services/popup', ['exports', 'torii/services/popup'], function (exports, _toriiServicesPopup) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _toriiServicesPopup['default'];
    }
  });
});
define('ghost-admin/services/resize-detector', ['exports', 'ember-element-resize-detector/services/resize-detector'], function (exports, _emberElementResizeDetectorServicesResizeDetector) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberElementResizeDetectorServicesResizeDetector['default'];
    }
  });
});
define('ghost-admin/services/session', ['exports', 'ember-computed', 'ember-service/inject', 'ember-simple-auth/services/session'], function (exports, _emberComputed, _emberServiceInject, _emberSimpleAuthServicesSession) {
    exports['default'] = _emberSimpleAuthServicesSession['default'].extend({
        store: (0, _emberServiceInject['default'])(),
        feature: (0, _emberServiceInject['default'])(),

        user: (0, _emberComputed['default'])(function () {
            return this.get('store').queryRecord('user', { id: 'me' });
        }),

        authenticate: function authenticate() {
            var _this = this;

            return this._super.apply(this, arguments).then(function (authResult) {
                return _this.get('feature').fetch().then(function () {
                    return authResult;
                });
            });
        }
    });
});
define('ghost-admin/services/slug-generator', ['exports', 'ember-service', 'rsvp', 'ember-service/inject'], function (exports, _emberService, _rsvp, _emberServiceInject) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    var resolve = _rsvp['default'].resolve;
    exports['default'] = _emberService['default'].extend({
        ghostPaths: (0, _emberServiceInject['default'])(),
        ajax: (0, _emberServiceInject['default'])(),

        generateSlug: function generateSlug(slugType, textToSlugify) {
            var url = undefined;

            if (!textToSlugify) {
                return resolve('');
            }

            url = this.get('ghostPaths.url').api('slugs', slugType, encodeURIComponent(textToSlugify));

            return this.get('ajax').request(url).then(function (response) {
                var _response$slugs = _slicedToArray(response.slugs, 1);

                var firstSlug = _response$slugs[0];
                var slug = firstSlug.slug;

                return slug;
            });
        }
    });
});
define('ghost-admin/services/text-measurer', ['exports', 'ember-text-measurer/services/text-measurer'], function (exports, _emberTextMeasurerServicesTextMeasurer) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _emberTextMeasurerServicesTextMeasurer['default'];
    }
  });
});
define('ghost-admin/services/time-zone', ['exports', 'ember-service', 'ember-computed', 'ember-service/inject'], function (exports, _emberService, _emberComputed, _emberServiceInject) {
    exports['default'] = _emberService['default'].extend({
        store: (0, _emberServiceInject['default'])(),

        _parseTimezones: function _parseTimezones(settings) {
            var activeTimezone = settings.get('activeTimezone');
            return activeTimezone;
        },

        _settings: (0, _emberComputed['default'])(function () {
            var store = this.get('store');
            return store.queryRecord('setting', { type: 'blog,theme,private' });
        }),

        blogTimezone: (0, _emberComputed['default'])('_settings.activeTimezone', function () {
            var _this = this;

            return this.get('_settings').then(function (settings) {
                return _this._parseTimezones(settings);
            });
        })

    });
});
define('ghost-admin/services/torii-session', ['exports', 'torii/services/session'], function (exports, _toriiServicesSession) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _toriiServicesSession['default'];
    }
  });
});
define('ghost-admin/services/torii', ['exports', 'torii/services/torii'], function (exports, _toriiServicesTorii) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _toriiServicesTorii['default'];
    }
  });
});
define('ghost-admin/services/upgrade-notification', ['exports', 'ember-service'], function (exports, _emberService) {
    exports['default'] = _emberService['default'].extend({
        content: ''
    });
});
define('ghost-admin/services/upgrade-status', ['exports', 'ember-service', 'ember-service/inject'], function (exports, _emberService, _emberServiceInject) {
    exports['default'] = _emberService['default'].extend({
        isRequired: false,

        notifications: (0, _emberServiceInject['default'])(),

        maintenanceAlert: function maintenanceAlert() {
            this.get('notifications').showAlert('Sorry, Ghost is currently undergoing maintenance, please wait a moment then try again.', { type: 'error', key: 'api-error.under-maintenance' });
        },

        requireUpgrade: function requireUpgrade() {
            this.set('isRequired', true);
            this.get('notifications').showAlert('Ghost has been upgraded, please copy any unsaved data and refresh the page to continue.', { type: 'error', key: 'api-error.upgrade-required' });
        }
    });
});
define('ghost-admin/session-stores/application', ['exports', 'ember-simple-auth/session-stores/adaptive', 'ghost-admin/utils/ghost-paths'], function (exports, _emberSimpleAuthSessionStoresAdaptive, _ghostAdminUtilsGhostPaths) {

    var paths = (0, _ghostAdminUtilsGhostPaths['default'])();
    var keyName = 'ghost' + (paths.subdir.indexOf('/') === 0 ? '-' + paths.subdir.substr(1) : '') + ':session';

    exports['default'] = _emberSimpleAuthSessionStoresAdaptive['default'].extend({
        localStorageKey: keyName,
        cookieName: keyName
    });
});
define("ghost-admin/templates/-contributors", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Tn4Yjrst", "block": "{\"statements\":[[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/JohnONolan\"],[\"static-attr\",\"title\",\"JohnONolan\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/JohnONolan.jpeg\"]]],[\"static-attr\",\"alt\",\"JohnONolan\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/ErisDS\"],[\"static-attr\",\"title\",\"ErisDS\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/ErisDS.jpeg\"]]],[\"static-attr\",\"alt\",\"ErisDS\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/sebgie\"],[\"static-attr\",\"title\",\"sebgie\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/sebgie.png\"]]],[\"static-attr\",\"alt\",\"sebgie\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/frantzypants\"],[\"static-attr\",\"title\",\"frantzypants\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/frantzypants.jpeg\"]]],[\"static-attr\",\"alt\",\"frantzypants\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/cobbspur\"],[\"static-attr\",\"title\",\"cobbspur\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/cobbspur.jpeg\"]]],[\"static-attr\",\"alt\",\"cobbspur\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/kevinansfield\"],[\"static-attr\",\"title\",\"kevinansfield\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/kevinansfield.jpeg\"]]],[\"static-attr\",\"alt\",\"kevinansfield\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/GeorginaLusby\"],[\"static-attr\",\"title\",\"GeorginaLusby\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/GeorginaLusby.jpeg\"]]],[\"static-attr\",\"alt\",\"GeorginaLusby\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/AileenCGN\"],[\"static-attr\",\"title\",\"AileenCGN\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/AileenCGN.jpeg\"]]],[\"static-attr\",\"alt\",\"AileenCGN\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/kirrg001\"],[\"static-attr\",\"title\",\"kirrg001\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/kirrg001.jpeg\"]]],[\"static-attr\",\"alt\",\"kirrg001\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/disordinary\"],[\"static-attr\",\"title\",\"disordinary\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/disordinary.jpeg\"]]],[\"static-attr\",\"alt\",\"disordinary\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/acburdine\"],[\"static-attr\",\"title\",\"acburdine\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/acburdine.jpeg\"]]],[\"static-attr\",\"alt\",\"acburdine\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/dbalders\"],[\"static-attr\",\"title\",\"dbalders\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/dbalders.jpeg\"]]],[\"static-attr\",\"alt\",\"dbalders\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/felixrieseberg\"],[\"static-attr\",\"title\",\"felixrieseberg\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/felixrieseberg.jpeg\"]]],[\"static-attr\",\"alt\",\"felixrieseberg\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/jaswilli\"],[\"static-attr\",\"title\",\"jaswilli\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/jaswilli.jpeg\"]]],[\"static-attr\",\"alt\",\"jaswilli\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/halfdan\"],[\"static-attr\",\"title\",\"halfdan\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/halfdan.jpeg\"]]],[\"static-attr\",\"alt\",\"halfdan\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/kevinkucharczyk\"],[\"static-attr\",\"title\",\"kevinkucharczyk\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/kevinkucharczyk.jpeg\"]]],[\"static-attr\",\"alt\",\"kevinkucharczyk\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/mixonic\"],[\"static-attr\",\"title\",\"mixonic\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/mixonic.png\"]]],[\"static-attr\",\"alt\",\"mixonic\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/rwjblue\"],[\"static-attr\",\"title\",\"rwjblue\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/rwjblue.jpeg\"]]],[\"static-attr\",\"alt\",\"rwjblue\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/tgriesser\"],[\"static-attr\",\"title\",\"tgriesser\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/tgriesser.png\"]]],[\"static-attr\",\"alt\",\"tgriesser\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"article\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/bnookala\"],[\"static-attr\",\"title\",\"bnookala\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/contributors\"],null],\"/bnookala.jpeg\"]]],[\"static-attr\",\"alt\",\"bnookala\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/-contributors.hbs" } });
});
define("ghost-admin/templates/-import-errors", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "kNyxvPdO", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"importErrors\"]]],null,1]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"error\",\"message\"]],false],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"error\"]},{\"statements\":[[\"open-element\",\"table\",[]],[\"static-attr\",\"class\",\"table\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"importErrors\"]]],null,0],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/-import-errors.hbs" } });
});
define("ghost-admin/templates/-posts-header", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "qDmPvT8b", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Your stories\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"block\",[\"link-to\"],[\"editor.new\"],[[\"class\",\"data-test-new-post-button\"],[\"gh-btn gh-btn-green\",true]],10],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"gh-contentfilter\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"active-link\"],null,null,9],[\"block\",[\"active-link\"],null,null,7],[\"block\",[\"active-link\"],null,null,5],[\"block\",[\"active-link\"],null,null,3],[\"block\",[\"active-link\"],null,null,1],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Pages\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"block\",[\"link-to\"],[\"posts.index\",[\"helper\",[\"query-params\"],null,[[\"type\"],[\"page\"]]]],[[\"data-test-pages-filter-link\"],[true]],0],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Scheduled\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"block\",[\"link-to\"],[\"posts.index\",[\"helper\",[\"query-params\"],null,[[\"type\"],[\"scheduled\"]]]],[[\"data-test-scheduled-filter-link\"],[true]],2],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Published\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"block\",[\"link-to\"],[\"posts.index\",[\"helper\",[\"query-params\"],null,[[\"type\"],[\"published\"]]]],[[\"data-test-published-filter-link\"],[true]],4],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Drafts\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"block\",[\"link-to\"],[\"posts.index\",[\"helper\",[\"query-params\"],null,[[\"type\"],[\"draft\"]]]],[[\"data-test-drafts-filter-link\"],[true]],6],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"All\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"block\",[\"link-to\"],[\"posts.index\",[\"helper\",[\"query-params\"],null,[[\"type\"],[null]]]],[[\"data-test-all-filter-link\"],[true]],8],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"New story\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/-posts-header.hbs" } });
});
define("ghost-admin/templates/-user-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "82EKoQ0/", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid-cell\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"link-to\"],[\"team.user\",[\"get\",[\"user\",\"slug\"]]],[[\"data-test-user-id\"],[[\"get\",[\"user\",\"id\"]]]],2],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"gh-badge \",[\"unknown\",[\"role\",\"lowerCaseName\"]]]]],[\"static-attr\",\"data-test-role-name\",\"\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"role\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"role\"]},{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"user\",\"roles\"]]],null,0]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"article\",[]],[\"static-attr\",\"class\",\"apps-card-app\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-left\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"user-list-item-figure\"],[\"dynamic-attr\",\"style\",[\"unknown\",[\"component\",\"userImageBackground\"]],null],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Photo of \"],[\"append\",[\"unknown\",[\"user\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-meta\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"h3\",[]],[\"static-attr\",\"class\",\"apps-card-app-title\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"user\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"apps-card-app-desc\"],[\"flush-element\"],[\"text\",\"Last seen: \"],[\"append\",[\"unknown\",[\"component\",\"lastLoginUTC\"]],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-right\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-configured\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"session\",\"user\",\"isAuthor\"]]],null,1],[\"text\",\"                \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/-user-list-item.hbs" } });
});
define("ghost-admin/templates/about", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "EXRYUFJf", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-view js-settings-content\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],2],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-about-header\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"gh-logo\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/ghost-logo.png\"],null]]]],[\"static-attr\",\"alt\",\"Ghost\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"append\",[\"unknown\",[\"gh-upgrade-notification\"]],false],[\"text\",\"\\n\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-env-details\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"gh-env-list\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"gh-env-list-version\"],[\"flush-element\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"Version\"],[\"close-element\"],[\"text\",\" \"],[\"append\",[\"unknown\",[\"model\",\"version\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"Environment\"],[\"close-element\"],[\"text\",\" \"],[\"append\",[\"unknown\",[\"model\",\"environment\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"gh-env-list-database-type\"],[\"flush-element\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"Database\"],[\"close-element\"],[\"text\",\" \"],[\"append\",[\"unknown\",[\"model\",\"database\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"Mail\"],[\"close-element\"],[\"text\",\" \"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"mail\"]]],null,1,0],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-env-help\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"static-attr\",\"href\",\"http://support.ghost.org\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"User Documentation\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"static-attr\",\"href\",\"https://ghost.org/slack/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Get Help With Ghost\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-credits\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"h2\",[]],[\"flush-element\"],[\"text\",\"The People Who Made it Possible\"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-contributors\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"partial\",\"contributors\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Ghost is built by an incredible group of contributors from all over the world. Here are just a few of the people who helped create the version you’re using right now.\"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-blue\"],[\"static-attr\",\"href\",\"https://ghost.org/about/contribute/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Find out how you can get involved\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"footer\",[]],[\"static-attr\",\"class\",\"gh-copyright-info\"],[\"flush-element\"],[\"text\",\"\\n            Copyright 2013 – \"],[\"append\",[\"unknown\",[\"copyrightYear\"]],false],[\"text\",\" Ghost Foundation Ltd, released under the \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://github.com/TryGhost/Ghost/blob/master/LICENSE\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"text\",\"MIT license\"],[\"close-element\"],[\"text\",\".\\n            \"],[\"open-element\",\"br\",[]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://ghost.org/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"text\",\"Ghost\"],[\"close-element\"],[\"text\",\" is a registered trademark of \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://ghost.org/trademark/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"text\",\"Ghost Foundation Ltd\"],[\"close-element\"],[\"text\",\".\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Native\"]],\"locals\":[]},{\"statements\":[[\"append\",[\"unknown\",[\"model\",\"mail\"]],false]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"About Ghost\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/about.hbs" } });
});
define("ghost-admin/templates/application", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "7gwgOh3f", "block": "{\"statements\":[[\"block\",[\"gh-app\"],null,[[\"showSettingsMenu\"],[[\"get\",[\"showSettingsMenu\"]]]],4],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showMarkdownHelpModal\"]]],null,0],[\"text\",\"\\n\"],[\"append\",[\"unknown\",[\"ember-load-remover\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"markdown-help\"],[[\"close\",\"modifier\"],[[\"helper\",[\"route-action\"],[\"toggleMarkdownHelpModal\"],null],\"wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"append\",[\"helper\",[\"gh-nav-menu\"],null,[[\"open\",\"toggleMaximise\",\"openAutoNav\",\"showMarkdownHelp\",\"closeMobileMenu\"],[[\"get\",[\"autoNavOpen\"]],\"toggleAutoNav\",\"openAutoNav\",\"toggleMarkdownHelpModal\",\"closeMobileMenu\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Skip to main content\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"block\",[\"gh-skip-link\"],null,[[\"anchor\"],[\".gh-main\"]],3],[\"text\",\"\\n\\n    \"],[\"append\",[\"helper\",[\"gh-alerts\"],null,[[\"notify\"],[\"topNotificationChange\"]]],false],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"gh-viewport \",[\"helper\",[\"if\"],[[\"get\",[\"autoNav\"]],\"gh-autonav\"],null],\" \",[\"helper\",[\"if\"],[[\"get\",[\"showSettingsMenu\"]],\"settings-menu-expanded\"],null],\" \",[\"helper\",[\"if\"],[[\"get\",[\"showMobileMenu\"]],\"mobile-menu-expanded\"],null]]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showNavMenu\"]]],null,2],[\"text\",\"\\n\"],[\"block\",[\"gh-main\"],null,[[\"onMouseEnter\",\"data-notification-count\"],[\"closeAutoNav\",[\"get\",[\"topNotificationCount\"]]]],1],[\"text\",\"\\n\\n        \"],[\"append\",[\"unknown\",[\"gh-notifications\"]],false],[\"text\",\"\\n\\n        \"],[\"append\",[\"helper\",[\"gh-content-cover\"],null,[[\"onClick\",\"onMouseEnter\"],[\"closeMenus\",\"closeAutoNav\"]]],false],[\"text\",\"\\n\\n        \"],[\"append\",[\"helper\",[\"outlet\"],[\"settings-menu\"],null],false],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-mobile-nav-bar\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/application.hbs" } });
});
define("ghost-admin/templates/components/gh-activating-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "3QxSM7/1", "block": "{\"statements\":[[\"block\",[\"link-to\"],[[\"get\",[\"route\"]]],[[\"alternateActive\",\"class\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"setActive\"],null],[\"helper\",[\"concat\"],[[\"helper\",[\"if\"],[[\"get\",[\"linkClasses\"]],[\"helper\",[\"-normalize-class\"],[\"linkClasses\",[\"get\",[\"linkClasses\"]]],null]],null],\" \"],null]]],0],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"append\",[\"unknown\",[\"title\"]],false],[\"yield\",\"default\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-activating-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-alert", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "5Hlnb8Zy", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-alert-content\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"append\",[\"unknown\",[\"message\",\"message\"]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-alert-close icon-x\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeNotification\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-alert.hbs" } });
});
define("ghost-admin/templates/components/gh-alerts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "CoqCkPXv", "block": "{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"messages\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-alert\"],null,[[\"message\"],[[\"get\",[\"message\"]]]]],false],[\"text\",\"\\n\"]],\"locals\":[\"message\"]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-alerts.hbs" } });
});
define("ghost-admin/templates/components/gh-app", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "HXi/p4bA", "block": "{\"statements\":[[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-app.hbs" } });
});
define("ghost-admin/templates/components/gh-blog-url", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "iHmKX7Yp", "block": "{\"statements\":[[\"append\",[\"unknown\",[\"config\",\"blogUrl\"]],true]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-blog-url.hbs" } });
});
define("ghost-admin/templates/components/gh-datetime-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "hoBqVJcv", "block": "{\"statements\":[[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"datetime\"]]],[[\"id\",\"class\",\"name\",\"stopEnterKeyDownPropagation\",\"update\"],[[\"get\",[\"inputId\"]],[\"get\",[\"inputClass\"]],[\"get\",[\"inputName\"]],\"true\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"datetime\"]]],null]],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-datetime-input.hbs" } });
});
define("ghost-admin/templates/components/gh-ed-preview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "9mnR4DkY", "block": "{\"statements\":[[\"append\",[\"unknown\",[\"previewHTML\"]],false],[\"text\",\"\\n\\n\"],[\"block\",[\"each\"],[[\"get\",[\"imageUploadComponents\"]]],null,1]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-image-uploader-with-preview\"],null,[[\"image\",\"altText\",\"update\",\"remove\",\"uploadStarted\",\"uploadFinished\",\"formChanged\"],[[\"get\",[\"uploader\",\"src\"]],[\"get\",[\"uploader\",\"altText\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"updateImageSrc\",[\"get\",[\"uploader\",\"index\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"updateImageSrc\",[\"get\",[\"uploader\",\"index\"]],\"\"],null],[\"get\",[\"uploadStarted\"]],[\"get\",[\"uploadFinished\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"updateHeight\"],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"ember-wormhole\"],null,[[\"to\"],[[\"get\",[\"uploader\",\"destinationElementId\"]]]],0]],\"locals\":[\"uploader\"]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-ed-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-editor-save-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "K0EEfgA4", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"statusFreeze\"]]],null,13,11],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"statusFreeze\"]]],null,7]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"divider delete\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"delete\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"delete\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"deleteText\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"li\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"post-save-publish \",[\"helper\",[\"if\"],[[\"get\",[\"activeClass\"]],\"active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setSaveType\",\"publish\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"publishText\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"li\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"post-save-draft \",[\"helper\",[\"unless\"],[[\"get\",[\"activeClass\"]],\"active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setSaveType\",\"draft\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"draftText\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"li\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"post-save-publish \",[\"helper\",[\"if\"],[[\"get\",[\"activeClass\"]],\"active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setSaveType\",\"publish\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"publishText\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"li\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"post-save-draft \",[\"helper\",[\"unless\"],[[\"get\",[\"activeClass\"]],\"active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setSaveType\",\"draft\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"draftText\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"scheduledWillPublish\"]]],null,2,1]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"li\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"post-save-schedule \",[\"helper\",[\"if\"],[[\"get\",[\"activeClass\"]],\"active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setSaveType\",\"schedule\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"scheduleText\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"post-save-draft \",[\"helper\",[\"unless\"],[[\"get\",[\"activeClass\"]],\"active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setSaveType\",\"draft\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"unscheduleText\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"dropdown-menu dropdown-triangle-bottom-right\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"timeScheduled\"]]],null,4,3],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"isNew\"]]],null,0],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"options icon-arrow2\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Toggle Settings Menu\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-dropdown-button\"],null,[[\"dropdownName\",\"class\"],[\"post-save-menu\",[\"helper\",[\"concat\"],[\"gh-btn\",\" \",\"gh-btn-sm\",\" \",[\"helper\",[\"if\"],[[\"get\",[\"isDangerous\"]],\"gh-btn-red\",\"gh-btn-blue\"],null],\" \",[\"helper\",[\"if\"],[[\"get\",[\"gh-btnopen\"]],\"active\"],null],\" \",\"dropdown-toggle\",\" \",\"up\",\" \"],null]]],6],[\"block\",[\"gh-dropdown\"],null,[[\"name\",\"closeOnClick\",\"classNames\"],[\"post-save-menu\",\"true\",\"editor-options\"]],5]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"savePostText\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"saveScheduleText\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"timeScheduled\"]]],null,9,8]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-spin-button\"],null,[[\"type\",\"action\",\"submitting\",\"class\"],[\"button\",\"save\",[\"get\",[\"submitting\"]],[\"helper\",[\"concat\"],[\"gh-btn\",\" \",\"gh-btn-sm\",\" \",\"js-publish-button\",\" \",[\"helper\",[\"if\"],[[\"get\",[\"isDangerous\"]],\"gh-btn-red\",\"gh-btn-blue\"],null],\" \"],null]]],10]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Unschedule\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-spin-button\"],null,[[\"type\",\"action\",\"submitting\",\"class\"],[\"button\",\"save\",[\"get\",[\"submitting\"]],[\"helper\",[\"concat\"],[\"gh-btn\",\" \",\"gh-btn-sm\",\" \",\"js-publish-button\",\" \",[\"helper\",[\"if\"],[[\"get\",[\"isDangerous\"]],\"gh-btn-red\",\"gh-btn-blue\"],null],\" \"],null]]],12]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-editor-save-button.hbs" } });
});
define("ghost-admin/templates/components/gh-error-message", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "pZPpWllc", "block": "{\"statements\":[[\"append\",[\"unknown\",[\"message\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-error-message.hbs" } });
});
define("ghost-admin/templates/components/gh-feature-flag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "YGAz4Kvg", "block": "{\"statements\":[[\"append\",[\"helper\",[\"one-way-checkbox\"],[[\"get\",[\"value\"]]],[[\"id\",\"name\",\"update\"],[[\"get\",[\"for\"]],[\"get\",[\"name\"]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"value\"]]],null]],null]]]],false],[\"text\",\"\\n\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-toggle-component\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-feature-flag.hbs" } });
});
define("ghost-admin/templates/components/gh-file-upload", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "onzvPaBP", "block": "{\"statements\":[[\"open-element\",\"input\",[]],[\"static-attr\",\"class\",\"gh-input gh-input-file q\"],[\"static-attr\",\"data-url\",\"upload\"],[\"static-attr\",\"type\",\"file\"],[\"static-attr\",\"name\",\"importfile\"],[\"dynamic-attr\",\"accept\",[\"concat\",[[\"unknown\",[\"acceptEncoding\"]]]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"button\",[]],[\"static-attr\",\"id\",\"startupload\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-hover-blue\"],[\"static-attr\",\"type\",\"submit\"],[\"dynamic-attr\",\"disabled\",[\"unknown\",[\"uploadButtonDisabled\"]],null],[\"modifier\",[\"action\"],[[\"get\",[null]],\"upload\"]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"uploadButtonText\"]],false],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-file-upload.hbs" } });
});
define("ghost-admin/templates/components/gh-file-uploader", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "9dcQK1Yy", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"file\"]]],null,4,1]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"labelText\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"upload-form\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-file-input\"],null,[[\"multiple\",\"alt\",\"action\",\"accept\"],[false,[\"get\",[\"labelText\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"fileSelected\"],null],[\"get\",[\"accept\"]]]],0],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-green\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"reset\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Try Again\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"failed\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"failureMessage\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"failureMessage\"]]],null,3],[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"progress-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"progress\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"bar \",[\"helper\",[\"if\"],[[\"get\",[\"failureMessage\"]],\"fail\"],null]]]],[\"dynamic-attr\",\"style\",[\"unknown\",[\"progressStyle\"]],null],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"failureMessage\"]]],null,2]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-file-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-fullscreen-modal", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "GoWZUT2V", "block": "{\"statements\":[[\"block\",[\"liquid-wormhole\"],null,[[\"class\"],[\"fullscreen-modal-container\"]],2]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"text\",\"          \"],[\"append\",[\"helper\",[\"component\"],[[\"get\",[\"modalPath\"]]],[[\"model\",\"confirm\",\"closeModal\"],[[\"get\",[\"model\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"confirm\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"close\"],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"          \"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"fullscreen-modal-background\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"clickOverlay\"]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"unknown\",[\"modalClasses\"]],null],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"has-block\",\"default\"]],null,1,0],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-fullscreen-modal.hbs" } });
});
define("ghost-admin/templates/components/gh-image-uploader-with-preview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "xhq8KKko", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"image\"]]],null,1,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-image-uploader\"],null,[[\"text\",\"altText\",\"update\",\"onInput\",\"uploadStarted\",\"uploadFinished\",\"formChanged\"],[[\"get\",[\"text\"]],[\"get\",[\"altText\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"update\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"onInput\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadStarted\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadFinished\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"formChanged\"],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-image-uploader -with-image\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"unknown\",[\"image\"]],null],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"image-cancel icon-trash\"],[\"static-attr\",\"title\",\"Delete\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"remove\"]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-image-uploader-with-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-image-uploader", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "ZrAy8yAo", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"file\"]]],null,10,7]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"image-upload icon-photos\"],[\"static-attr\",\"title\",\"Add image\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"switchForm\",\"upload\"]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Upload\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"description\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-blue gh-input\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"saveUrl\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"class\",\"url-form\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"url\"]]],[[\"class\",\"placeholder\",\"update\",\"onenter\"],[\"url\",\"http://\",[\"helper\",[\"action\"],[[\"get\",[null]],\"onInput\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"saveUrl\"],null]]]],false],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"saveButton\"]]],null,2,1],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"canShowUploadForm\"]]],null,0]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"image-url\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"switchForm\",\"url-input\"]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-link\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"URL\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"description\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"upload-form\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-file-input\"],null,[[\"multiple\",\"alt\",\"action\",\"accept\"],[false,[\"get\",[\"description\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"fileSelected\"],null],[\"get\",[\"accept\"]]]],5],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"allowUrlInput\"]]],null,4]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"showUploadForm\"]]],null,6,3]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-green\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"reset\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Try Again\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"failed\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"failureMessage\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"failureMessage\"]]],null,9],[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"progress-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"progress\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"bar \",[\"helper\",[\"if\"],[[\"get\",[\"failureMessage\"]],\"fail\"],null]]]],[\"dynamic-attr\",\"style\",[\"unknown\",[\"progressStyle\"]],null],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"failureMessage\"]]],null,8]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-image-uploader.hbs" } });
});
define("ghost-admin/templates/components/gh-infinite-scroll", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "JMe8O+yX", "block": "{\"statements\":[[\"yield\",\"default\",[[\"helper\",[\"action\"],[[\"get\",[null]],\"checkScroll\"],null]]],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-infinite-scroll.hbs" } });
});
define("ghost-admin/templates/components/gh-loading-spinner", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "FBrZVukd", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"showSpinner\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-loading-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-loading-spinner\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-loading-spinner.hbs" } });
});
define("ghost-admin/templates/components/gh-menu-toggle", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "plle+Veb", "block": "{\"statements\":[],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-menu-toggle.hbs" } });
});
define("ghost-admin/templates/components/gh-mobile-nav-bar", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "6CYwCwAS", "block": "{\"statements\":[[\"block\",[\"link-to\"],[\"editor.new\"],[[\"classNames\"],[\"gh-nav-main-editor\"]],5],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"helper\",[\"eq\"],[[\"get\",[\"routing\",\"currentRouteName\"]],\"posts.index\"],null]],null,4,2],[\"block\",[\"link-to\"],[\"team\"],[[\"classNames\"],[\"gh-nav-main-users\"]],0],[\"text\",\"\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-mobile-nav-bar-more\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"openMobileMenu\"]],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-gh\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"More\"],[\"close-element\"],[\"text\",\"\\n\"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-team\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Team\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-content\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Content\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"block\",[\"link-to\"],[\"posts\"],[[\"classNames\"],[\"gh-nav-main-content\"]],1],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-content\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Stories\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"block\",[\"link-to\"],[\"posts\",[\"helper\",[\"query-params\"],null,[[\"type\"],[null]]]],[[\"classNames\"],[\"gh-nav-main-content active\"]],3],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-pen\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"New story\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-mobile-nav-bar.hbs" } });
});
define("ghost-admin/templates/components/gh-mobiledoc", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "7jYSk5ZV", "block": "{\"statements\":[[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-mobiledoc.hbs" } });
});
define("ghost-admin/templates/components/gh-modal-dialog", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "zT++pX2v", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-container js-modal-container\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"article\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[[\"unknown\",[\"klass\"]],\" js-modal\"]]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"modal-content\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"noBubble\"],[[\"bubbles\",\"preventDefault\"],[false,false]]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"if\"],[[\"get\",[\"title\"]]],null,2],[\"text\",\"\\n            \"],[\"block\",[\"if\"],[[\"get\",[\"showClose\"]]],null,1],[\"text\",\"\\n            \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"yield\",\"default\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"confirm\"]]],null,0],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-background js-modal-background\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"footer\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"text\",\"                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"dynamic-attr\",\"class\",[\"concat\",[[\"unknown\",[\"rejectButtonClass\"]],\" btn-minor js-button-reject\"]]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"confirm\",\"reject\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"confirm\",\"reject\",\"text\"]],false],[\"close-element\"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"dynamic-attr\",\"class\",[\"concat\",[[\"unknown\",[\"acceptButtonClass\"]],\" js-button-accept\"]]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"confirm\",\"accept\"]],[\"flush-element\"],[\"append\",[\"unknown\",[\"confirm\",\"accept\",\"text\"]],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"title\"]],false],[\"close-element\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-modal-dialog.hbs" } });
});
define("ghost-admin/templates/components/gh-nav-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "ZEicj88W", "block": "{\"statements\":[[\"append\",[\"helper\",[\"gh-menu-toggle\"],null,[[\"desktopAction\",\"mobileAction\"],[\"toggleAutoNav\",\"closeMobileMenu\"]]],false],[\"text\",\"\\n\"],[\"block\",[\"gh-dropdown-button\"],null,[[\"tagName\",\"class\",\"dropdownName\"],[\"header\",\"gh-nav-menu\",\"user-menu\"]],20],[\"block\",[\"gh-dropdown\"],null,[[\"tagName\",\"name\",\"closeOnClick\"],[\"div\",\"user-menu\",\"true\"]],19],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-nav-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-nav-search\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"helper\",[\"gh-search-input\"],null,[[\"class\"],[\"gh-nav-search-input\"]]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"gh-nav-list gh-nav-main\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"text\",\"        \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"editor.new\"],[[\"classNames\"],[\"gh-nav-main-editor\"]],15],[\"close-element\"],[\"text\",\"\\n\"],[\"text\",\"        \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"helper\",[\"eq\"],[[\"get\",[\"routing\",\"currentRouteName\"]],\"posts.index\"],null]],null,14,12],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"team\"],[[\"classNames\"],[\"gh-nav-main-users\"]],10],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"feature\",\"subscribers\"]]],null,9],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"helper\",[\"gh-user-can-admin\"],[[\"get\",[\"session\",\"user\"]]],null]],null,6],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-autonav-toggle\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"openAutoNav\"],[[\"on\"],[\"mouseEnter\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-labs\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Labs\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-box\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Apps\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-code\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Code injection\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-tag\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Tags\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-compass\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Navigation\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-settings\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"General\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"gh-nav-list gh-nav-settings\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"gh-nav-list-h\"],[\"flush-element\"],[\"text\",\"Settings\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.general\"],[[\"classNames\"],[\"gh-nav-settings-general\"]],5],[\"close-element\"],[\"text\",\"\\n\"],[\"text\",\"            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.navigation\"],[[\"classNames\"],[\"gh-nav-settings-navigation\"]],4],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.tags\"],[[\"classNames\"],[\"gh-nav-settings-tags\"]],3],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.code-injection\"],[[\"classNames\"],[\"gh-nav-settings-code-injection\"]],2],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.apps\"],[[\"classNames\"],[\"gh-nav-settings-apps\"]],1],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.labs\"],[[\"classNames\"],[\"gh-nav-settings-labs\"]],0],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-mail\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Subscribers\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"block\",[\"link-to\"],[\"subscribers\"],[[\"classNames\"],[\"gh-nav-main-subscribers\"]],7],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"helper\",[\"gh-user-can-admin\"],[[\"get\",[\"session\",\"user\"]]],null]],null,8]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-team\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Team\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-content\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Content\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"block\",[\"link-to\"],[\"posts\"],[[\"classNames\"],[\"gh-nav-main-content\"]],11],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-content\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"Stories\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"block\",[\"link-to\"],[\"posts\",[\"helper\",[\"query-params\"],null,[[\"type\"],[null]]]],[[\"classNames\"],[\"gh-nav-main-content active\"]],13],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-pen\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"New story\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-signout\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Sign Out\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-user\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Your Profile\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-shop\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" About Ghost\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"dropdown-menu dropdown-triangle-top js-user-menu-dropdown-menu\"],[\"static-attr\",\"role\",\"menu\"],[\"static-attr\",\"style\",\"right:-20px;left:auto;\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"open-element\",\"a\",[]],[\"dynamic-attr\",\"href\",[\"concat\",[[\"unknown\",[\"config\",\"blogUrl\"]],\"/\"]]],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"text\",\"View site\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"block\",[\"link-to\"],[\"about\"],[[\"classNames\",\"role\",\"tabindex\"],[\"gh-nav-menu-about dropdown-item js-nav-item\",\"menuitem\",\"-1\"]],18],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"divider\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"block\",[\"link-to\"],[\"team.user\",[\"get\",[\"session\",\"user\",\"slug\"]]],[[\"classNames\",\"role\",\"tabindex\"],[\"dropdown-item user-menu-profile js-nav-item\",\"menuitem\",\"-1\"]],17],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"dropdown-item help-menu-support\"],[\"static-attr\",\"role\",\"menuitem\"],[\"static-attr\",\"tabindex\",\"-1\"],[\"static-attr\",\"href\",\"http://support.ghost.org/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-ambulance\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Support Center\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"dropdown-item help-menu-tweet\"],[\"static-attr\",\"role\",\"menuitem\"],[\"static-attr\",\"tabindex\",\"-1\"],[\"static-attr\",\"href\",\"https://twitter.com/intent/tweet?text=%40TryGhost+Hi%21+Can+you+help+me+with+&related=TryGhost\"],[\"static-attr\",\"target\",\"_blank\"],[\"static-attr\",\"onclick\",\"window.open(this.href, 'twitter-share', 'width=550,height=235');return false;\"],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-twitter\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Tweet @TryGhost!\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"divider\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"dropdown-item help-menu-how-to\"],[\"static-attr\",\"role\",\"menuitem\"],[\"static-attr\",\"tabindex\",\"-1\"],[\"static-attr\",\"href\",\"http://support.ghost.org/how-to-use-ghost/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-book\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" How to Use Ghost\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"dropdown-item help-menu-wishlist\"],[\"static-attr\",\"role\",\"menuitem\"],[\"static-attr\",\"tabindex\",\"-1\"],[\"static-attr\",\"href\",\"http://ideas.ghost.org/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-idea\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Wishlist\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"divider\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"role\",\"presentation\"],[\"flush-element\"],[\"block\",[\"link-to\"],[\"signout\"],[[\"classNames\",\"role\",\"tabindex\"],[\"dropdown-item user-menu-signout\",\"menuitem\",\"-1\"]],16],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-nav-menu-icon\"],[\"dynamic-attr\",\"style\",[\"unknown\",[\"navMenuIcon\"]],null],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-nav-menu-details\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-nav-menu-details-blog\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"config\",\"blogTitle\"]],false],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-nav-menu-details-user\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"session\",\"user\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-nav-menu.hbs" } });
});
define("ghost-admin/templates/components/gh-navigation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "uXISYkTX", "block": "{\"statements\":[[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-navigation.hbs" } });
});
define("ghost-admin/templates/components/gh-navitem", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "gQEAbAGF", "block": "{\"statements\":[[\"block\",[\"unless\"],[[\"get\",[\"navItem\",\"isNew\"]]],null,4],[\"text\",\"\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-blognav-line\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-validation-status-container\"],null,[[\"tagName\",\"class\",\"errors\",\"property\",\"hasValidated\"],[\"span\",\"gh-blognav-label\",[\"get\",[\"navItem\",\"errors\"]],\"label\",[\"get\",[\"navItem\",\"hasValidated\"]]]],3],[\"block\",[\"gh-validation-status-container\"],null,[[\"tagName\",\"class\",\"errors\",\"property\",\"hasValidated\"],[\"span\",\"gh-blognav-url\",[\"get\",[\"navItem\",\"errors\"]],\"url\",[\"get\",[\"navItem\",\"hasValidated\"]]]],2],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"navItem\",\"isNew\"]]],null,1,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-blognav-delete\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"deleteItem\",[\"get\",[\"navItem\"]]]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-trash\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-blognav-add\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"addItem\"]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-add2\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Add\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-navitem-url-input\"],null,[[\"baseUrl\",\"url\",\"isNew\",\"change\",\"clearErrors\"],[[\"get\",[\"baseUrl\"]],[\"get\",[\"navItem\",\"url\"]],[\"get\",[\"navItem\",\"isNew\"]],\"updateUrl\",[\"helper\",[\"action\"],[[\"get\",[null]],\"clearUrlErrors\"],null]]]],false],[\"text\",\"\\n        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"navItem\",\"errors\"]],\"url\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-trim-focus-input\"],[[\"get\",[\"navItem\",\"label\"]]],[[\"shouldFocus\",\"placeholder\",\"keyPress\",\"update\"],[[\"get\",[\"navItem\",\"last\"]],\"Label\",[\"helper\",[\"action\"],[[\"get\",[null]],\"clearLabelErrors\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"navItem\",\"label\"]]],null]],null]]]],false],[\"text\",\"\\n        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"navItem\",\"errors\"]],\"label\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-blognav-grab icon-grab\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Reorder\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-navitem.hbs" } });
});
define("ghost-admin/templates/components/gh-notification", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "RdI+199h", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-notification-content\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"append\",[\"unknown\",[\"message\",\"message\"]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-notification-close icon-x\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeNotification\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-notification.hbs" } });
});
define("ghost-admin/templates/components/gh-notifications", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "cZPOol+6", "block": "{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"messages\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-notification\"],null,[[\"message\"],[[\"get\",[\"message\"]]]]],false],[\"text\",\"\\n\"]],\"locals\":[\"message\"]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-notifications.hbs" } });
});
define("ghost-admin/templates/components/gh-posts-list-item", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "HpPN62Wv", "block": "{\"statements\":[[\"open-element\",\"h3\",[]],[\"static-attr\",\"class\",\"gh-content-entry-title\"],[\"flush-element\"],[\"block\",[\"link-to\"],[\"editor.edit\",[\"get\",[\"post\",\"id\"]]],[[\"class\",\"title\"],[\"permalink\",\"Edit this post\"]],6],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"subText\"]],false],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-content-entry-meta\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"isPublished\"]]],null,5,2],[\"text\",\"\\n        by \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-content-entry-author\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"authorName\"]],false],[\"close-element\"],[\"text\",\" —\\n        Last edited \"],[\"append\",[\"helper\",[\"gh-format-timeago\"],[[\"get\",[\"post\",\"updatedAtUTC\"]]],null],false],[\"text\",\"\\n\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-content-status-draft gh-badge gh-badge-red\"],[\"flush-element\"],[\"text\",\"Draft\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-content-status-draft gh-badge\"],[\"flush-element\"],[\"text\",\"Scheduled\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"isScheduled\"]]],null,1,0]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-content-status-published\"],[\"flush-element\"],[\"text\",\"Published\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-content-status-draft gh-badge gh-badge-black\"],[\"flush-element\"],[\"text\",\"Page\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"post\",\"page\"]]],null,4,3]],\"locals\":[]},{\"statements\":[[\"append\",[\"unknown\",[\"post\",\"title\"]],false]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-posts-list-item.hbs" } });
});
define("ghost-admin/templates/components/gh-profile-image", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "TpwHdM/T", "block": "{\"statements\":[[\"open-element\",\"figure\",[]],[\"static-attr\",\"class\",\"account-image js-file-upload\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"hasUploadedImage\"]]],null,1],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"js-img-preview\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"edit-account-image js-img-dropzone\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-photos\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Upload an image\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"if\"],[[\"get\",[\"fileStorage\"]]],null,0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"input\",[]],[\"static-attr\",\"type\",\"file\"],[\"static-attr\",\"class\",\"file-uploader js-file-input\"],[\"static-attr\",\"name\",\"uploadimage\"],[\"flush-element\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"placeholder-img\"],[\"dynamic-attr\",\"style\",[\"unknown\",[\"defaultImage\"]],null],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"id\",\"account-image\"],[\"static-attr\",\"class\",\"gravatar-img\"],[\"dynamic-attr\",\"style\",[\"unknown\",[\"imageBackground\"]],null],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"User image\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-profile-image.hbs" } });
});
define("ghost-admin/templates/components/gh-search-input", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "FekmrTFE", "block": "{\"statements\":[[\"block\",[\"power-select\"],null,[[\"search\",\"onchange\",\"placeholder\",\"onopen\",\"onclose\",\"searchEnabled\",\"triggerComponent\",\"renderInPlace\",\"loadingMessage\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"search\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"openSelected\"],null],\"Search\",[\"helper\",[\"action\"],[[\"get\",[null]],\"onFocus\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"onBlur\"],null],false,\"gh-search-input/trigger\",true,\"Loading\"]],0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"highlighted-text\"],[[\"get\",[\"name\",\"title\"]],[\"get\",[\"select\",\"searchText\"]]],null],false],[\"text\",\"\\n\"]],\"locals\":[\"name\",\"select\"]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-search-input.hbs" } });
});
define("ghost-admin/templates/components/gh-search-input/trigger", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "PbScmtbK", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"ember-power-select-search\"],[\"dynamic-attr\",\"onmousedown\",[\"helper\",[\"action\"],[[\"get\",[null]],\"captureMouseDown\"],null],null],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"type\",\"search\"],[\"static-attr\",\"autocomplete\",\"off\"],[\"static-attr\",\"autocorrect\",\"off\"],[\"static-attr\",\"autocapitalize\",\"off\"],[\"dynamic-attr\",\"value\",[\"helper\",[\"if\"],[[\"get\",[\"extra\",\"labelPath\"]],[\"helper\",[\"get\"],[[\"get\",[\"selected\"]],[\"get\",[\"extra\",\"labelPath\"]]],null],[\"get\",[\"selected\"]]],null],null],[\"static-attr\",\"spellcheck\",\"false\"],[\"static-attr\",\"role\",\"combobox\"],[\"dynamic-attr\",\"placeholder\",[\"unknown\",[\"placeholder\"]],null],[\"dynamic-attr\",\"oninput\",[\"helper\",[\"action\"],[[\"get\",[null]],\"search\"],[[\"value\"],[\"target.value\"]]],null],[\"dynamic-attr\",\"onmousedown\",[\"helper\",[\"action\"],[[\"get\",[null]],\"captureMouseDown\"],null],null],[\"dynamic-attr\",\"onkeydown\",[\"helper\",[\"action\"],[[\"get\",[null]],\"handleKeydown\"],null],null],[\"dynamic-attr\",\"onblur\",[\"helper\",[\"action\"],[[\"get\",[null]],\"resetInput\"],null],null],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-nav-search-button\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"focusInput\"]],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-search\"],[\"flush-element\"],[\"close-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Search\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-search-input/trigger.hbs" } });
});
define("ghost-admin/templates/components/gh-spin-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "YcdlF5u0", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"showSpinner\"]]],null,3,2]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"text\",\"        \"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"unknown\",[\"buttonText\"]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"buttonText\"]]],null,1,0]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"spinner\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-spin-button.hbs" } });
});
define("ghost-admin/templates/components/gh-subscribers-table-delete-cell", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "OxBnom+A", "block": "{\"statements\":[[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-link gh-btn-sm\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"get\",[\"tableActions\",\"delete\"]],[\"get\",[\"row\",\"content\"]]]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-trash\"],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-subscribers-table-delete-cell.hbs" } });
});
define("ghost-admin/templates/components/gh-subscribers-table", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "wBG9kxgf", "block": "{\"statements\":[[\"block\",[\"light-table\"],[[\"get\",[\"table\"]]],[[\"scrollBuffer\"],[100]],6]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                    No subscribers found.\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"body\",\"no-data\"],null,null,0]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"table\",\"isEmpty\"]]],null,1]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-loading-content\"],[\"static-attr\",\"style\",\"margin-top: 2em;\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-loading-spinner\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"body\",\"loader\"],null,null,3]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"isLoading\"]]],null,4,2]],\"locals\":[\"body\"]},{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"t\",\"head\"],null,[[\"onColumnClick\",\"iconAscending\",\"iconDescending\"],[[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"sortByColumn\"]]],null],\"icon-ascending\",\"icon-descending\"]]],false],[\"text\",\"\\n\\n\"],[\"block\",[\"t\",\"body\"],null,[[\"canSelect\",\"tableActions\",\"scrollBuffer\",\"onScrolledToBottom\"],[false,[\"helper\",[\"hash\"],null,[[\"delete\"],[[\"get\",[\"delete\"]]]]],100,[\"helper\",[\"action\"],[[\"get\",[null]],\"onScrolledToBottom\"],null]]],5]],\"locals\":[\"t\"]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-subscribers-table.hbs" } });
});
define("ghost-admin/templates/components/gh-tag-settings-form", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "f4UczLH1", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[[\"helper\",[\"if\"],[[\"get\",[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane tag-settings-pane\"]]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"settings-menu-header \",[\"helper\",[\"if\"],[[\"get\",[\"isMobile\"]],\"subview\"],null]]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"isMobile\"]]],null,8,6],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"helper\",[\"gh-image-uploader-with-preview\"],null,[[\"image\",\"text\",\"update\",\"remove\"],[[\"get\",[\"tag\",\"image\"]],\"Add tag image\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setCoverImage\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"clearCoverImage\"],null]]]],false],[\"text\",\"\\n        \"],[\"open-element\",\"form\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],[\"get\",[\"tag\",\"hasValidated\"]],\"name\"]],5],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],[\"get\",[\"tag\",\"hasValidated\"]],\"slug\"]],4],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],[\"get\",[\"tag\",\"hasValidated\"]],\"description\"]],3],[\"text\",\"\\n            \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"nav-list nav-list-block\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"nav-list-item\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"openMeta\"]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"meta-data-button\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"Meta Data\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Extra content for SEO and social media.\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"tag\",\"isNew\"]]],null,2],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[[\"helper\",[\"if\"],[[\"get\",[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane tag-meta-settings-pane\"]]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-header subview\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"back icon-arrow-left settings-menu-header-action\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeMeta\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Back\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h4\",[]],[\"flush-element\"],[\"text\",\"Meta Data\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"style\",\"width:23px;\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"form\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],[\"get\",[\"tag\",\"hasValidated\"]],\"metaTitle\"]],1],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],[\"get\",[\"tag\",\"hasValidated\"]],\"metaDescription\"]],0],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"flush-element\"],[\"text\",\"Search Engine Result Preview\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview-title\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"seoTitle\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview-link\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"seoURL\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview-description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"seoDescription\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"meta-description\"],[\"flush-element\"],[\"text\",\"Meta Description\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-textarea\"],[[\"get\",[\"scratchMetaDescription\"]]],[[\"id\",\"name\",\"focusOut\",\"update\"],[\"meta-description\",\"metaDescription\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setProperty\",\"metaDescription\",[\"get\",[\"scratchMetaDescription\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"scratchMetaDescription\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],\"metaDescription\"]]],false],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Recommended: \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"156\"],[\"close-element\"],[\"text\",\" characters. You’ve used \"],[\"append\",[\"helper\",[\"gh-count-down-characters\"],[[\"get\",[\"scratchMetaDescription\"]],156],null],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"meta-title\"],[\"flush-element\"],[\"text\",\"Meta Title\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"scratchMetaTitle\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"meta-title\",\"metaTitle\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setProperty\",\"metaTitle\",[\"get\",[\"scratchMetaTitle\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"scratchMetaTitle\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],\"metaTitle\"]]],false],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Recommended: \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"70\"],[\"close-element\"],[\"text\",\" characters. You’ve used \"],[\"append\",[\"helper\",[\"gh-count-down-characters\"],[[\"get\",[\"scratchMetaTitle\"]],70],null],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-link gh-btn-sm tag-delete-button\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"deleteTag\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-trash\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Delete Tag\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"tag-description\"],[\"flush-element\"],[\"text\",\"Description\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-textarea\"],[[\"get\",[\"scratchDescription\"]]],[[\"id\",\"name\",\"focusOut\",\"update\"],[\"tag-description\",\"description\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setProperty\",\"description\",[\"get\",[\"scratchDescription\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"scratchDescription\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],\"description\"]]],false],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Maximum: \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"200\"],[\"close-element\"],[\"text\",\" characters. You’ve used \"],[\"append\",[\"helper\",[\"gh-count-down-characters\"],[[\"get\",[\"scratchDescription\"]],200],null],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"tag-slug\"],[\"flush-element\"],[\"text\",\"URL\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"scratchSlug\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"tag-slug\",\"slug\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setProperty\",\"slug\",[\"get\",[\"scratchSlug\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"scratchSlug\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-url-preview\"],null,[[\"prefix\",\"slug\",\"tagName\",\"classNames\"],[\"tag\",[\"get\",[\"scratchSlug\"]],\"p\",\"description\"]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"activeTag\",\"errors\"]],\"slug\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"tag-name\"],[\"flush-element\"],[\"text\",\"Name\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"scratchName\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"tag-name\",\"name\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setProperty\",\"name\",[\"get\",[\"scratchName\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"scratchName\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"tag\",\"errors\"]],\"name\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"h4\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"title\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Back\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"block\",[\"link-to\"],[\"settings.tags\"],[[\"class\"],[\"back icon-arrow-left settings-menu-header-action\"]],7],[\"text\",\"\\n            \"],[\"open-element\",\"h4\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"title\"]],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"style\",\"width:23px;\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tag-settings-form.hbs" } });
});
define("ghost-admin/templates/components/gh-tag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "NKq9caOX", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-tag\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"link-to\"],[\"settings.tags.tag\",[\"get\",[\"tag\"]]],[[\"class\"],[\"tag-edit-button\"]],1],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"label label-blue\"],[\"flush-element\"],[\"text\",\"internal\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"tag-title\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"tag\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"label label-default\"],[\"flush-element\"],[\"text\",\"/\"],[\"append\",[\"unknown\",[\"tag\",\"slug\"]],false],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"tag\",\"isInternal\"]]],null,0],[\"text\",\"\\n        \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"tag-description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"tag\",\"description\"]],false],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"tags-count\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"tag\",\"count\",\"posts\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tag.hbs" } });
});
define("ghost-admin/templates/components/gh-tags-management-container", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "FCwSrZ8l", "block": "{\"statements\":[[\"yield\",\"default\",[[\"get\",[null]]]],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-tags-management-container.hbs" } });
});
define("ghost-admin/templates/components/gh-task-button", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "w0HeBz8y", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"isRunning\"]]],null,3,2]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"text\",\"        \"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"unknown\",[\"buttonText\"]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"buttonText\"]]],null,1,0]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"spinner\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-task-button.hbs" } });
});
define("ghost-admin/templates/components/gh-theme-table", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "LStzPuIE", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"themes\"]]],null,5,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    No theme found!\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"static-attr\",\"class\",\"theme-list-action theme-list-action-activate\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"get\",[\"activateTheme\"]],[\"get\",[\"theme\"]]]],[\"flush-element\"],[\"text\",\"\\n                            Activate\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"theme-list-action theme-list-action-activate\"],[\"flush-element\"],[\"text\",\"Active\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"dynamic-attr\",\"disabled\",[\"unknown\",[\"theme\",\"active\"]],null],[\"static-attr\",\"class\",\"theme-list-action\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"get\",[\"deleteTheme\"]],[\"get\",[\"theme\"]]]],[\"flush-element\"],[\"text\",\"\\n                            Delete\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"theme-list-item \",[\"helper\",[\"if\"],[[\"get\",[\"theme\",\"active\"]],\"theme-list-item--active\"],null]]]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"theme-list-item-body\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"name\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"theme\",\"label\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"theme-list-item-aside\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"theme\",\"isDeletable\"]]],null,3],[\"text\",\"\\n                    \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"static-attr\",\"class\",\"theme-list-action\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"get\",[\"downloadTheme\"]],[\"get\",[\"theme\"]]]],[\"flush-element\"],[\"text\",\"\\n                        Download\\n                    \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"theme\",\"active\"]]],null,2,1],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"theme\"]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"theme-list\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"themes\"]]],null,4],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-theme-table.hbs" } });
});
define("ghost-admin/templates/components/gh-timezone-select", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "GlDeUebU", "block": "{\"statements\":[[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"activeTimezone\"],[\"flush-element\"],[\"text\",\"Timezone\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-select\"],[\"dynamic-attr\",\"data-select-text\",[\"concat\",[[\"unknown\",[\"selectedTimezone\",\"label\"]]]]],[\"static-attr\",\"tabindex\",\"0\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"append\",[\"helper\",[\"one-way-select\"],null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"activeTimezone\",\"general[activeTimezone]\",[\"get\",[\"selectableTimezones\"]],\"name\",\"label\",[\"get\",[\"selectedTimezone\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"setTimezone\"],null]]]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"hasTimezoneOverride\"]]],null,0],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"The local time here is currently \"],[\"append\",[\"unknown\",[\"localTime\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Your timezone has been automatically set to \"],[\"append\",[\"unknown\",[\"activeTimezone\"]],false],[\"text\",\".\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-timezone-select.hbs" } });
});
define("ghost-admin/templates/components/gh-upgrade-notification", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "RbsQJT+k", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"message\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"helper\",[\"gh-format-html\"],[[\"get\",[\"message\"]]],null],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-upgrade-notification.hbs" } });
});
define("ghost-admin/templates/components/gh-url-preview", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "zbo8dW3q", "block": "{\"statements\":[[\"append\",[\"unknown\",[\"url\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-url-preview.hbs" } });
});
define("ghost-admin/templates/components/gh-user-active", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "zBlTm0aZ", "block": "{\"statements\":[[\"yield\",\"default\",[[\"get\",[null]]]],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-active.hbs" } });
});
define("ghost-admin/templates/components/gh-user-invited", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "0HTtqO7B", "block": "{\"statements\":[[\"yield\",\"default\",[[\"get\",[null]]]],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-user-invited.hbs" } });
});
define("ghost-admin/templates/components/gh-view-title", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "OdUrpY9+", "block": "{\"statements\":[[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-mobilemenu-button\"],[\"static-attr\",\"role\",\"presentation\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"openMobileMenu\"]],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-gh\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"sr-only\"],[\"flush-element\"],[\"text\",\"Menu\"],[\"close-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\" \\n\"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/gh-view-title.hbs" } });
});
define("ghost-admin/templates/components/infinity-loader", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "f1lOCip7", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"has-block\",\"default\"]],null,3,2]],\"locals\":[],\"named\":[],\"yields\":[\"default\"],\"blocks\":[{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-loading-spinner\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"infinityModel\",\"reachedInfinity\"]]],null,1,0]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"yield\",\"default\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/infinity-loader.hbs" } });
});
define("ghost-admin/templates/components/modals/copy-html", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "GojNup1I", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Generated HTML\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"append\",[\"helper\",[\"textarea\"],null,[[\"value\",\"rows\"],[[\"get\",[\"generatedHtml\"]],\"6\"]]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/copy-html.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-all", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "ksUxuqEY", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Would you really like to delete all content from your blog?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"This is permanent! No backups, no restores, no magic undo button. We warned you, k?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"deleteAll\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-all.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-post", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "tB+MZnOI", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Are you sure you want to delete this post?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n        You're about to delete \\\"\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"post\",\"title\"]],false],[\"close-element\"],[\"text\",\"\\\". This is permanent! We warned you, k?\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"deletePost\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-post.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-subscriber", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "UO1x78th", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Are you sure?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"WARNING:\"],[\"close-element\"],[\"text\",\" All data for this subscriber will be deleted. There is no way to recover this.\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"deleteSubscriber\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-subscriber.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-tag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "rmjYQ9hR", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Are you sure you want to delete this tag?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"tag\",\"post_count\"]]],null,1],[\"text\",\"    You're about to delete \\\"\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"tag\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\\". This is permanent! We warned you, k?\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"deleteTag\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"red\"],[\"flush-element\"],[\"text\",\"This tag is attached to \"],[\"append\",[\"unknown\",[\"tag\",\"count\",\"posts\"]],false],[\"text\",\" \"],[\"append\",[\"unknown\",[\"postInflection\"]],false],[\"text\",\".\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-tag.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-theme", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "GH/Y52l6", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"static-attr\",\"data-test-delete-theme-modal\",\"\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Are you sure you want to delete this\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"You're about to delete \\\"\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"theme\",\"label\"]],false],[\"close-element\"],[\"text\",\"\\\". This is permanent! We warned you, k? Maybe \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"get\",[\"download\"]]]],[\"flush-element\"],[\"text\",\"Download your theme before continuing\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"deleteTheme\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-theme.hbs" } });
});
define("ghost-admin/templates/components/modals/delete-user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "6XI8S+cj", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Are you sure you want to delete this user?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"user\",\"count\",\"posts\"]]],null,2,1],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"deleteUser\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"WARNING:\"],[\"close-element\"],[\"text\",\" All user data will be deleted. There is no way to recover this.\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"WARNING:\"],[\"close-element\"],[\"text\",\" \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"red\"],[\"flush-element\"],[\"text\",\"This user is the author of \"],[\"append\",[\"helper\",[\"pluralize\"],[[\"get\",[\"user\",\"count\",\"posts\"]],\"post\"],null],false],[\"text\",\".\"],[\"close-element\"],[\"text\",\" All posts and user data will be deleted. There is no way to recover this.\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/delete-user.hbs" } });
});
define("ghost-admin/templates/components/modals/import-subscribers", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "LEFrOFkD", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"response\"]]],null,7,6],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"response\"]]],null,5,2],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"dynamic-attr\",\"disabled\",[\"unknown\",[\"closeDisabled\"]],null],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"block\",[\"if\"],[[\"get\",[\"response\"]]],null,1,0],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Cancel\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Close\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-file-uploader\"],null,[[\"url\",\"paramName\",\"labelText\",\"uploadStarted\",\"uploadFinished\",\"uploadSuccess\"],[[\"get\",[\"uploadUrl\"]],\"subscribersfile\",\"Select or drag-and-drop a CSV file.\",[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadStarted\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadFinished\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadSuccess\"],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Invalid:\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"td\",[]],[\"static-attr\",\"align\",\"left\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"response\",\"invalid\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Duplicates:\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"td\",[]],[\"static-attr\",\"align\",\"left\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"response\",\"duplicates\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"table\",[]],[\"static-attr\",\"class\",\"subscribers-import-results\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Imported:\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"static-attr\",\"align\",\"left\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"response\",\"imported\"]],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"response\",\"duplicates\"]]],null,4],[\"block\",[\"if\"],[[\"get\",[\"response\",\"invalid\"]]],null,3],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            Import Subscribers\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            Import Successful\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/import-subscribers.hbs" } });
});
define("ghost-admin/templates/components/modals/invite-new-user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Uk6U3ga6", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Invite a New User\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"fieldset\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"email\"]],1],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group for-select\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"new-user-role\"],[\"flush-element\"],[\"text\",\"Role\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-select\"],[\"static-attr\",\"tabindex\",\"0\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"one-way-select\"],null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"new-user-role\",\"role\",[\"get\",[\"roles\"]],\"id\",\"name\",[\"get\",[\"role\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"setRole\"],null]]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"sendInvitation\"]],\"gh-btn gh-btn-green\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Send invitation now\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"new-user-email\"],[\"flush-element\"],[\"text\",\"Email Address\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"email\"]]],[[\"enter\",\"class\",\"id\",\"type\",\"placeholder\",\"name\",\"autofocus\",\"autocapitalize\",\"autocorrect\",\"focusOut\",\"update\"],[\"sendInvite\",\"email\",\"new-user-email\",\"email\",\"Email Address\",\"email\",\"autofocus\",\"off\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"email\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"email\"]]],null]],null]]]],false],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"email\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/invite-new-user.hbs" } });
});
define("ghost-admin/templates/components/modals/leave-editor", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "jAiIo535", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Are you sure you want to leave this page?\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n        Hey there! It looks like you're in the middle of writing something and\\n        you haven't saved all of your content.\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Save before you go!\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Stay\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-red\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"confirm\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Leave\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/leave-editor.hbs" } });
});
define("ghost-admin/templates/components/modals/markdown-help", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "UM/rqmHa", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Markdown Help\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"markdown-help-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"table\",[]],[\"static-attr\",\"class\",\"modal-markdown-help-table\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"thead\",[]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"th\",[]],[\"flush-element\"],[\"text\",\"Markdown\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"th\",[]],[\"flush-element\"],[\"text\",\"Result\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"th\",[]],[\"flush-element\"],[\"text\",\"Shortcut\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tbody\",[]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"**text**\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"Bold\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + B \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"*text*\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"open-element\",\"em\",[]],[\"flush-element\"],[\"text\",\"Emphasize\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + I\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"~~text~~\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"open-element\",\"del\",[]],[\"flush-element\"],[\"text\",\"Strike-through\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl + Alt + U\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"[title](http://)\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"#\"],[\"flush-element\"],[\"text\",\"Link\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + K\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"`code`\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"open-element\",\"code\",[]],[\"flush-element\"],[\"text\",\"Inline Code\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + Shift + K\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"![alt](http://)\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Image\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + Shift + I\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"* item\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"List\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl + L\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"> quote\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Blockquote\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl + Q\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"==Highlight==\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"open-element\",\"mark\",[]],[\"flush-element\"],[\"text\",\"Highlight\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"# Heading\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"H1\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"## Heading\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"H2\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + H\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"tr\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"### Heading\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"H3\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"td\",[]],[\"flush-element\"],[\"text\",\"Ctrl/⌘ + H (x2)\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        For further Markdown syntax reference: \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"http://support.ghost.org/markdown-guide/\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"text\",\"Markdown Documentation\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/markdown-help.hbs" } });
});
define("ghost-admin/templates/components/modals/new-subscriber", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "0XKW0HgG", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Add a Subscriber\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"fieldset\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"email\"]],1],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"addSubscriber\"]],\"gh-btn gh-btn-green\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Add\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"new-subscriber-email\"],[\"flush-element\"],[\"text\",\"Email Address\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"type\",\"email\"],[\"dynamic-attr\",\"value\",[\"unknown\",[\"model\",\"email\"]],null],[\"dynamic-attr\",\"oninput\",[\"helper\",[\"action\"],[[\"get\",[null]],\"updateEmail\"],[[\"value\"],[\"target.value\"]]],null],[\"static-attr\",\"id\",\"new-subscriber-email\"],[\"static-attr\",\"class\",\"gh-input email\"],[\"static-attr\",\"placeholder\",\"Email Address\"],[\"static-attr\",\"name\",\"email\"],[\"static-attr\",\"autofocus\",\"autofocus\"],[\"static-attr\",\"autocapitalize\",\"off\"],[\"static-attr\",\"autocorrect\",\"off\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"email\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/new-subscriber.hbs" } });
});
define("ghost-admin/templates/components/modals/re-authenticate", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "YFHp4BYb", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Please re-authenticate\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"modal-body \",[\"helper\",[\"if\"],[[\"get\",[\"authenticationError\"]],\"error\"],null]]]],[\"flush-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"config\",\"ghostOAuth\"]]],null,5,3],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"authenticationError\"]]],null,0],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"     \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"response\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"authenticationError\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Log in\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"password\"]]],[[\"class\",\"type\",\"placeholder\",\"name\",\"update\"],[\"password\",\"password\",\"Password\",\"password\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"password\"]]],null]],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"login\"],[\"static-attr\",\"class\",\"login-form\"],[\"static-attr\",\"method\",\"post\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"confirm\"],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-validation-status-container\"],null,[[\"class\",\"errors\",\"property\",\"hasValidated\"],[\"password-wrap\",[\"get\",[\"errors\"]],\"password\",[\"get\",[\"hasValidated\"]]]],2],[\"text\",\"            \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\",\"type\"],[[\"get\",[\"reauthenticate\"]],\"gh-btn gh-btn-blue\",\"submit\"]],1],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Sign in with Ghost\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\",\"tabindex\",\"autoWidth\"],[[\"get\",[\"reauthenticate\"]],\"login gh-btn gh-btn-blue gh-btn-block\",\"3\",\"false\"]],4],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/re-authenticate.hbs" } });
});
define("ghost-admin/templates/components/modals/transfer-owner", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "ocX3pqQv", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Transfer Ownership\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n        Are you sure you want to transfer the ownership of this blog?\\n        You will not be able to undo this action.\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"transferOwnership\"]],\"gh-btn gh-btn-red\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Yep - I'm sure\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/transfer-owner.hbs" } });
});
define("ghost-admin/templates/components/modals/upload-image", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "YOTGViVU", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"url\"]]],null,2,1],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Cancel\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\"],[[\"get\",[\"uploadImage\"]],\"gh-btn gh-btn-blue right js-button-accept\"]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-image-uploader\"],null,[[\"image\",\"saveButton\",\"update\",\"onInput\",\"accept\",\"extensions\",\"allowUrlInput\",\"uploadUrl\"],[[\"get\",[\"newUrl\"]],false,[\"helper\",[\"action\"],[[\"get\",[null]],\"fileUploaded\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"newUrl\"]]],null]],null],[\"get\",[\"model\",\"accept\"]],[\"get\",[\"model\",\"extensions\"]],[\"get\",[\"model\",\"allowUrlInput\"]],[\"get\",[\"model\",\"uploadUrl\"]]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-image-uploader -with-image\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"unknown\",[\"url\"]],null],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"image-cancel icon-trash\"],[\"static-attr\",\"title\",\"Delete\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"removeImage\"]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/upload-image.hbs" } });
});
define("ghost-admin/templates/components/modals/upload-theme", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "tIeHvFuY", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"modal-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"theme\"]]],null,29,26],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"close icon-x\"],[\"static-attr\",\"href\",\"#\"],[\"static-attr\",\"title\",\"Close\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-body\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"theme\"]]],null,23,14],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"modal-footer\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"button\",[]],[\"dynamic-attr\",\"disabled\",[\"unknown\",[\"closeDisabled\"]],null],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeModal\"]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"block\",[\"if\"],[[\"get\",[\"theme\"]]],null,4,3],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"displayOverwriteWarning\"]]],null,2],[\"block\",[\"if\"],[[\"get\",[\"validationErrors\"]]],null,1],[\"block\",[\"if\"],[[\"get\",[\"canActivateTheme\"]]],null,0],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-green\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"activate\"]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Activate Now\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-green\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"reset\"]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Try Again\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-red\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"confirmOverwrite\"]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Overwrite\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Cancel\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Close\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-file-uploader\"],null,[[\"url\",\"paramName\",\"accept\",\"labelText\",\"validate\",\"uploadStarted\",\"uploadFinished\",\"uploadSuccess\",\"uploadFailed\",\"listenTo\"],[[\"get\",[\"uploadUrl\"]],\"theme\",[\"get\",[\"accept\"]],\"Click to select or drag-and-drop your theme zip file here.\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validateTheme\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadStarted\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadFinished\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadSuccess\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"uploadFailed\"],null],\"themeUploader\"]]],false],[\"text\",\"\\n    \"]],\"locals\":[]},{\"statements\":[[\"text\",\": \"],[\"append\",[\"unknown\",[\"failure\",\"message\"]],false]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"open-element\",\"code\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"failure\",\"ref\"]],false],[\"close-element\"],[\"block\",[\"if\"],[[\"get\",[\"failure\",\"message\"]]],null,6],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"failure\"]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"unknown\",[\"error\",\"rule\"]],true],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"unknown\",[\"error\",\"details\"]],true],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"error\",\"details\"]]],null,9,8],[\"text\",\"\\n                    \"],[\"open-element\",\"ul\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"error\",\"failures\"]]],null,7],[\"text\",\"                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"error\"]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"theme-validation-errors\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"validationErrors\"]]],null,10],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"validationErrors\"]]],null,11,5]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n            \\\"\"],[\"append\",[\"unknown\",[\"fileThemeName\"]],false],[\"text\",\"\\\" will overwrite an existing theme of the same name. Are you sure?\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"displayOverwriteWarning\"]]],null,13,12]],\"locals\":[]},{\"statements\":[[\"text\",\"Do you want to activate it now?\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n                \\\"\"],[\"append\",[\"unknown\",[\"themeName\"]],false],[\"text\",\"\\\" uploaded successfully.\\n                \"],[\"block\",[\"if\"],[[\"get\",[\"canActivateTheme\"]]],null,15],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\": \"],[\"append\",[\"unknown\",[\"failure\",\"message\"]],false]],\"locals\":[]},{\"statements\":[[\"text\",\"                                \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"open-element\",\"code\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"failure\",\"ref\"]],false],[\"close-element\"],[\"block\",[\"if\"],[[\"get\",[\"failure\",\"message\"]]],null,17],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"failure\"]},{\"statements\":[[\"text\",\"                            \"],[\"append\",[\"unknown\",[\"error\",\"rule\"]],true],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"append\",[\"unknown\",[\"error\",\"details\"]],true],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"error\",\"details\"]]],null,20,19],[\"text\",\"\\n                        \"],[\"open-element\",\"ul\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"error\",\"failures\"]]],null,18],[\"text\",\"                        \"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"error\"]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"theme-validation-errors\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n                        \\\"\"],[\"append\",[\"unknown\",[\"themeName\"]],false],[\"text\",\"\\\" uploaded successfully but some warnings were generated...\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"validationWarnings\"]]],null,21],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"validationWarnings\"]]],null,22,16]],\"locals\":[]},{\"statements\":[[\"text\",\"            Upload a theme\\n        \"]],\"locals\":[]},{\"statements\":[[\"text\",\"            Invalid theme\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"validationErrors\"]]],null,25,24]],\"locals\":[]},{\"statements\":[[\"text\",\"                Upload successful!\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                Uploaded with warnings\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"validationWarnings\"]]],null,28,27]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/components/modals/upload-theme.hbs" } });
});
define("ghost-admin/templates/editor/edit-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "AJK3oCQ7", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/editor/edit-loading.hbs" } });
});
define("ghost-admin/templates/editor/edit", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "T33dDTxY", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-editor-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-editor-status\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"isPublished\"]]],null,8,7],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"post-settings\"],[\"static-attr\",\"title\",\"Post Settings\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"openSettingsMenu\"]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-settings\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-editor-save-button\"],null,[[\"isPublished\",\"isScheduled\",\"willPublish\",\"willSchedule\",\"statusFreeze\",\"scheduledWillPublish\",\"timeScheduled\",\"postOrPage\",\"isNew\",\"save\",\"setSaveType\",\"delete\",\"submitting\"],[[\"get\",[\"model\",\"isPublished\"]],[\"get\",[\"model\",\"isScheduled\"]],[\"get\",[\"willPublish\"]],[\"get\",[\"willSchedule\"]],[\"get\",[\"statusFreeze\"]],[\"get\",[\"scheduledWillPublish\"]],[\"get\",[\"model\",\"timeScheduled\"]],[\"get\",[\"postOrPage\"]],[\"get\",[\"model\",\"isNew\"]],\"save\",\"setSaveType\",\"toggleDeletePostModal\",[\"get\",[\"submitting\"]]]]],false],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-editor-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-editor-inner\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-view-title\"],null,[[\"classNames\",\"openMobileMenu\"],[\"gh-editor-title\",\"openMobileMenu\"]],4],[\"block\",[\"if\"],[[\"get\",[\"scheduleCountdown\"]]],null,3],[\"text\",\"            \"],[\"append\",[\"helper\",[\"ghost-editor\"],null,[[\"value\",\"onChange\",\"onFirstChange\",\"onTeardown\",\"shouldFocusEditor\",\"apiRoot\",\"assetPath\",\"tabindex\"],[[\"helper\",[\"readonly\"],[[\"get\",[\"model\",\"scratch\"]]],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"scratch\"]]],null]],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"autoSaveNew\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"cancelTimers\"],null],[\"get\",[\"shouldFocusEditor\"]],[\"get\",[\"apiRoot\"]],[\"get\",[\"assetPath\"]],2]]],false],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showDeletePostModal\"]]],null,2],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showLeaveEditorModal\"]]],null,1],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showReAuthenticateModal\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"re-authenticate\"],[[\"close\",\"modifier\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleReAuthenticateModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"leave-editor\"],[[\"confirm\",\"close\",\"modifier\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"leaveEditor\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleLeaveEditorModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-post\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"post\",\"onSuccess\"],[[\"get\",[\"model\"]],[\"helper\",[\"route-action\"],[\"redirectToContentScreen\"],null]]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleDeletePostModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"time\",[]],[\"dynamic-attr\",\"datetime\",[\"concat\",[[\"unknown\",[\"post\",\"publishedAtUTC\"]]]]],[\"static-attr\",\"class\",\"gh-notification gh-notification-schedule\"],[\"flush-element\"],[\"text\",\"\\n                    Post will be published \"],[\"append\",[\"unknown\",[\"scheduleCountdown\"]],false],[\"text\",\".\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"append\",[\"helper\",[\"gh-trim-focus-input\"],[[\"get\",[\"model\",\"titleScratch\"]]],[[\"type\",\"id\",\"placeholder\",\"tabindex\",\"shouldFocus\",\"focus-out\",\"update\",\"keyDown\"],[\"text\",\"entry-title\",\"Your Post Title\",\"1\",[\"get\",[\"shouldFocusTitle\"]],\"updateTitle\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"updateTitle\"]]],null]],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"titleKeyDown\"],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            Draft\\n        \"]],\"locals\":[]},{\"statements\":[[\"text\",\"            Scheduled\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"model\",\"isScheduled\"]]],null,6,5]],\"locals\":[]},{\"statements\":[[\"text\",\"            Published\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/editor/edit.hbs" } });
});
define("ghost-admin/templates/error", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "5uElychP", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"error-content error-404 js-error-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"error-details\"],[\"flush-element\"],[\"text\",\"\\n             \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"error-ghost\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/404-ghost@2x.png\"],null]]]],[\"dynamic-attr\",\"srcset\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/404-ghost.png\"],null],\" 1x, \",[\"helper\",[\"gh-path\"],[\"asset\",\"/img/404-ghost@2x.png\"],null],\" 2x\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n             \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"error-message\"],[\"flush-element\"],[\"text\",\"\\n                 \"],[\"open-element\",\"h1\",[]],[\"static-attr\",\"class\",\"error-code\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"code\"]],false],[\"close-element\"],[\"text\",\"\\n                 \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"error-description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"message\"]],false],[\"close-element\"],[\"text\",\"\\n             \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"stack\"]]],null,2],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"em\",[]],[\"static-attr\",\"class\",\"error-stack-function\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"item\",\"function\"]],false],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n                        at\\n                        \"],[\"block\",[\"if\"],[[\"get\",[\"item\",\"function\"]]],null,0],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"error-stack-file\"],[\"flush-element\"],[\"text\",\"(\"],[\"append\",[\"unknown\",[\"item\",\"at\"]],false],[\"text\",\")\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"item\"]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"error-stack\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"h3\",[]],[\"flush-element\"],[\"text\",\"Stack Trace\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"message\"]],false],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"error-stack-list\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"stack\"]]],null,1],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/error.hbs" } });
});
define("ghost-admin/templates/post-settings-menu", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "7lzR7nlb", "block": "{\"statements\":[[\"block\",[\"gh-tabs-manager\"],null,[[\"selected\",\"id\",\"class\"],[\"showSubview\",\"entry-controls\",\"settings-menu-container\"]],11]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"meta-description\"],[\"flush-element\"],[\"text\",\"Meta Description\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-textarea\"],[[\"get\",[\"metaDescriptionScratch\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\"],[\"post-setting-meta-description\",\"meta-description\",\"post-setting-meta-description\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setMetaDescription\",[\"get\",[\"metaDescriptionScratch\"]]],null],\"true\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"metaDescriptionScratch\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Recommended: \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"156\"],[\"close-element\"],[\"text\",\" characters. You’ve used \"],[\"append\",[\"helper\",[\"gh-count-down-characters\"],[[\"get\",[\"metaDescriptionScratch\"]],156],null],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"metaDescription\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"meta-title\"],[\"flush-element\"],[\"text\",\"Meta Title\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"metaTitleScratch\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\"],[\"post-setting-meta-title\",\"meta-title\",\"post-setting-meta-title\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setMetaTitle\",[\"get\",[\"metaTitleScratch\"]]],null],\"true\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"metaTitleScratch\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Recommended: \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"70\"],[\"close-element\"],[\"text\",\" characters. You’ve used \"],[\"append\",[\"helper\",[\"gh-count-down-characters\"],[[\"get\",[\"metaTitleScratch\"]],70],null],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"metaTitle\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-header subview\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"back icon-arrow-left settings-menu-header-action\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeSubview\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Back\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"h4\",[]],[\"flush-element\"],[\"text\",\"Meta Data\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"style\",\"width:23px;\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-content\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"form\",[]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"discardEnter\"],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"metaTitle\"]],1],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"metaDescription\"]],0],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"flush-element\"],[\"text\",\"Search Engine Result Preview\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview-title\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"seoTitle\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview-link\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"seoURL\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"seo-preview-description\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"seoDescription\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"isViewingSubview\"]]],null,2]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"b\",[]],[\"flush-element\"],[\"text\",\"Meta Data\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Extra content for SEO and social media.\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group for-select\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"author-list\"],[\"flush-element\"],[\"text\",\"Author\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-user\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-select\"],[\"static-attr\",\"tabindex\",\"0\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"one-way-select\"],null,[[\"id\",\"name\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"author-list\",\"post-setting-author\",[\"get\",[\"authors\"]],\"id\",\"name\",[\"get\",[\"selectedAuthor\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"changeAuthor\"],null]]]],false],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"post-setting-date\"],[\"flush-element\"],[\"text\",\"Publish Date\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"post-setting-date\"],[\"flush-element\"],[\"text\",\"Scheduled Date\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"model\",\"timeScheduled\"]]],null,7,6],[\"text\",\"                \"],[\"append\",[\"helper\",[\"gh-datetime-input\"],null,[[\"value\",\"update\",\"inputClass\",\"inputId\",\"inputName\"],[[\"get\",[\"model\",\"publishedAtUTC\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"setPublishedAtUTC\"],null],\"post-setting-date\",\"post-setting-date\",\"post-setting-date\"]]],false],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"post-setting-date\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"post-view-link\"],[\"static-attr\",\"target\",\"_blank\"],[\"dynamic-attr\",\"href\",[\"concat\",[[\"unknown\",[\"model\",\"previewUrl\"]]]]],[\"flush-element\"],[\"text\",\"\\n                    Preview \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-external\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"post-view-link\"],[\"static-attr\",\"target\",\"_blank\"],[\"dynamic-attr\",\"href\",[\"concat\",[[\"unknown\",[\"model\",\"absoluteUrl\"]]]]],[\"flush-element\"],[\"text\",\"\\n                    View post \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-external\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"id\",\"entry-controls\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[[\"helper\",[\"if\"],[[\"get\",[\"isViewingSubview\"]],\"settings-menu-pane-out-left\",\"settings-menu-pane-in\"],null],\" settings-menu settings-menu-pane\"]]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-header\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"h4\",[]],[\"flush-element\"],[\"text\",\"Post Settings\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"close icon-x settings-menu-header-action\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"closeMenus\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"Close\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-menu-content\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-image-uploader-with-preview\"],null,[[\"image\",\"text\",\"update\",\"remove\"],[[\"get\",[\"model\",\"image\"]],\"Add post image\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setCoverImage\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"clearCoverImage\"],null]]]],false],[\"text\",\"\\n            \"],[\"open-element\",\"form\",[]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"url\"],[\"flush-element\"],[\"text\",\"Post URL\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"isPublished\"]]],null,10,9],[\"text\",\"\\n                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-link\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"slugValue\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"stopEnterKeyDownPropagation\",\"update\"],[\"post-setting-slug\",\"url\",\"post-setting-slug\",[\"helper\",[\"action\"],[[\"get\",[null]],\"updateSlug\",[\"get\",[\"slugValue\"]]],null],\"true\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"slugValue\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-url-preview\"],null,[[\"slug\",\"tagName\",\"classNames\"],[[\"get\",[\"slugValue\"]],\"p\",\"description\"]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"post-setting-date\"]],8],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"tag-input\"],[\"flush-element\"],[\"text\",\"Tags\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-selectize\"],null,[[\"id\",\"multiple\",\"selection\",\"content\",\"optionValuePath\",\"optionLabelPath\",\"openOnFocus\",\"create-item\",\"remove-item\",\"plugins\"],[\"tag-input\",true,[\"get\",[\"model\",\"tags\"]],[\"get\",[\"availableTags\"]],\"content.uuid\",\"content.name\",false,\"addTag\",\"removeTag\",\"remove_button, drag_drop\"]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"session\",\"user\",\"isAuthor\"]]],null,5],[\"text\",\"\\n            \"],[\"open-element\",\"ul\",[]],[\"static-attr\",\"class\",\"nav-list nav-list-block\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-tab\"],null,[[\"tagName\",\"classNames\"],[\"li\",\"nav-list-item\"]],4],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group for-checkbox\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"class\",\"checkbox\"],[\"static-attr\",\"for\",\"static-page\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"togglePage\"],[[\"bubbles\"],[\"false\"]]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"one-way-checkbox\"],[[\"get\",[\"model\",\"page\"]]],[[\"type\",\"name\",\"id\",\"class\",\"update\"],[\"checkbox\",\"static-page\",\"static-page\",\"gh-input post-setting-static-page\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"page\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-toggle-component\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Turn this post into a static page\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"class\",\"checkbox\"],[\"static-attr\",\"for\",\"featured\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleFeatured\"],[[\"bubbles\"],[\"false\"]]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"one-way-checkbox\"],[[\"get\",[\"model\",\"featured\"]]],[[\"type\",\"name\",\"id\",\"class\",\"update\"],[\"checkbox\",\"featured\",\"featured\",\"gh-input post-setting-featured\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"featured\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-toggle-component\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Feature this post\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[[\"helper\",[\"if\"],[[\"get\",[\"isViewingSubview\"]],\"settings-menu-pane-in\",\"settings-menu-pane-out-right\"],null],\" settings-menu settings-menu-pane\"]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-tab-pane\"],null,null,3],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/post-settings-menu.hbs" } });
});
define("ghost-admin/templates/posts-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "pK4/g7+S", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"partial\",\"posts-header\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"content-list\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/posts-loading.hbs" } });
});
define("ghost-admin/templates/posts", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "E2dchJZ9", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"partial\",\"posts-header\"],[\"text\",\"\\n\\n    \"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/posts.hbs" } });
});
define("ghost-admin/templates/posts/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "CS6vZM7V", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"content-list\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"ol\",[]],[\"static-attr\",\"class\",\"posts-list\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"model\"]]],null,6,5],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"append\",[\"helper\",[\"infinity-loader\"],null,[[\"infinityModel\",\"scrollable\",\"triggerOffset\"],[[\"get\",[\"model\"]],\".content-list\",1000]]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showDeletePostModal\"]]],null,0],[\"text\",\"\\n\"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-post\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"post\",\"onSuccess\"],[[\"get\",[\"selectedPost\"]],[\"helper\",[\"route-action\"],[\"onPostDeletion\"],null]]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleDeletePostModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-lg\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Show all posts\"],[\"close-element\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"h3\",[]],[\"flush-element\"],[\"text\",\"No posts that match the current filter\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"block\",[\"link-to\"],[\"posts.index\",[\"helper\",[\"query-params\"],null,[[\"type\"],[null]]]],null,1],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-green gh-btn-lg\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Write a new Post\"],[\"close-element\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"h3\",[]],[\"flush-element\"],[\"text\",\"You Haven't Written Any Posts Yet!\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"block\",[\"link-to\"],[\"editor.new\"],null,3],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"no-posts-box\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"no-posts\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showingAll\"]]],null,4,2],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"append\",[\"helper\",[\"gh-posts-list-item\"],null,[[\"post\",\"active\",\"onDoubleClick\",\"data-test-posts-list-item-id\"],[[\"get\",[\"post\"]],[\"helper\",[\"eq\"],[[\"get\",[\"post\"]],[\"get\",[\"selectedPost\"]]],null],\"openEditor\",[\"get\",[\"post\",\"id\"]]]]],false],[\"text\",\"\\n\"]],\"locals\":[\"post\"]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/posts/index.hbs" } });
});
define("ghost-admin/templates/reset", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "w5Tjf/G+", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow-content-wrap\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-flow-content fade-in\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"reset\"],[\"static-attr\",\"class\",\"gh-signin\"],[\"static-attr\",\"method\",\"post\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"submit\"],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"newPassword\"]],2],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"ne2Password\"]],1],[\"text\",\"\\n                \"],[\"block\",[\"gh-task-button\"],null,[[\"task\",\"class\",\"type\",\"autoWidth\"],[[\"get\",[\"resetPassword\"]],\"gh-btn gh-btn-blue gh-btn-block\",\"submit\",\"false\"]],0],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"main-error\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"flowErrors\"]],true],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Reset Password\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"ne2Password\"]]],[[\"type\",\"name\",\"placeholder\",\"class\",\"autocorrect\",\"autofocus\",\"update\"],[\"password\",\"ne2password\",\"Confirm Password\",\"password\",\"off\",\"autofocus\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"ne2Password\"]]],null]],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"newPassword\"]]],[[\"type\",\"name\",\"placeholder\",\"class\",\"autocorrect\",\"autofocus\",\"update\"],[\"password\",\"newpassword\",\"Password\",\"password\",\"off\",\"autofocus\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"newPassword\"]]],null]],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/reset.hbs" } });
});
define("ghost-admin/templates/settings/apps-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "BR4aXZ8t", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Apps\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps-loading.hbs" } });
});
define("ghost-admin/templates/settings/apps", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Y7pn3Xyu", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps.hbs" } });
});
define("ghost-admin/templates/settings/apps/amp", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "fNX4TEtE", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],2],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-spin-button\"],null,[[\"id\",\"class\",\"action\",\"submitting\"],[\"saveSlackIntegration\",\"gh-btn gh-btn-green\",[\"helper\",[\"action\"],[[\"get\",[null]],\"save\"],null],[\"get\",[\"isSaving\"]]]],0],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"app-grid\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"app-cell\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"app-icon\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/ampicon.png\"],null]]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"app-cell\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"h3\",[]],[\"flush-element\"],[\"text\",\"AMP\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Accelerated Mobile Pages\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"app-subtitle\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Enable \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://ampproject.org\"],[\"flush-element\"],[\"text\",\"Google Accelerated Mobile Pages \"],[\"close-element\"],[\"text\",\"for your site?\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"class\",\"app-config-form\"],[\"static-attr\",\"id\",\"amp-settings\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group for-checkbox\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"amp\"],[\"flush-element\"],[\"text\",\"AMP support for your publications\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"class\",\"checkbox\"],[\"static-attr\",\"for\",\"amp\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"one-way-checkbox\"],[[\"get\",[\"model\"]]],[[\"id\",\"name\",\"type\",\"update\"],[\"amp\",\"amp\",\"checkbox\",[\"helper\",[\"action\"],[[\"get\",[null]],\"update\"],null]]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-toggle-component\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Enable AMP support\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Apps\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"static-attr\",\"style\",\"padding-left:1px\"],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.apps.index\"],null,1],[\"text\",\" \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"static-attr\",\"style\",\"display:inline\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" AMP\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/amp.hbs" } });
});
define("ghost-admin/templates/settings/apps/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "/rGS1g1y", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Apps\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"apps-grid-container\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"apps-grid-title\"],[\"flush-element\"],[\"text\",\"Available integrations\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid-cell\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"link-to\"],[\"settings.apps.slack\"],[[\"id\"],[\"slack-link\"]],5],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid-cell\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"link-to\"],[\"settings.apps.amp\"],[[\"id\"],[\"amp-link\"]],2],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"apps-grid-note\"],[\"flush-element\"],[\"text\",\"(More coming soon!)\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Configure\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"green\"],[\"flush-element\"],[\"text\",\"Active\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"article\",[]],[\"static-attr\",\"class\",\"apps-card-app\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-left\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"figure\",[]],[\"static-attr\",\"class\",\"apps-card-app-icon\"],[\"dynamic-attr\",\"style\",[\"concat\",[\"background-image:url(\",[\"helper\",[\"gh-path\"],[\"asset\",\"/img/ampicon.png\"],null],\")\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-meta\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"h3\",[]],[\"static-attr\",\"class\",\"apps-card-app-title\"],[\"flush-element\"],[\"text\",\"AMP\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"apps-card-app-desc\"],[\"flush-element\"],[\"text\",\"Google Accelerated Mobile Pages\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-card-right\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-configured\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"amp\"]]],null,1,0],[\"text\",\"                        \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Configure\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"green\"],[\"flush-element\"],[\"text\",\"Active\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"article\",[]],[\"static-attr\",\"class\",\"apps-card-app\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-left\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"figure\",[]],[\"static-attr\",\"class\",\"apps-card-app-icon\"],[\"dynamic-attr\",\"style\",[\"concat\",[\"background-image:url(\",[\"helper\",[\"gh-path\"],[\"asset\",\"/img/slackicon.png\"],null],\")\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-meta\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"h3\",[]],[\"static-attr\",\"class\",\"apps-card-app-title\"],[\"flush-element\"],[\"text\",\"Slack\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"apps-card-app-desc\"],[\"flush-element\"],[\"text\",\"A team communication tool\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-card-right\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-configured\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"slack\",\"isActive\"]]],null,4,3],[\"text\",\"                        \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/index.hbs" } });
});
define("ghost-admin/templates/settings/apps/slack", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "YCHRSbqX", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],6],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-spin-button\"],null,[[\"id\",\"class\",\"action\",\"submitting\"],[\"saveSlackIntegration\",\"gh-btn gh-btn-green\",[\"helper\",[\"action\"],[[\"get\",[null]],\"save\"],null],[\"get\",[\"isSaving\"]]]],4],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"app-grid\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"app-cell\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"app-icon\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"/img/slackicon.png\"],null]]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"app-cell\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"h3\",[]],[\"flush-element\"],[\"text\",\"Slack\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"A messaging app for teams\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"app-subtitle\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Automatically send newly published posts to a channel in Slack.\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"class\",\"app-config-form\"],[\"static-attr\",\"id\",\"slack-settings\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"save\"],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"url\"]],3],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"class\",\"app-config-form\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-spin-button\"],null,[[\"id\",\"class\",\"disabled\",\"action\",\"submitting\"],[\"sendTestNotification\",\"gh-btn gh-btn-grey\",[\"get\",[\"testNotificationDisabled\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"sendTestNotification\"],null],[\"get\",[\"isSendingTest\"]]]],0],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Send Test Notification\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"url\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Set up a new incoming webhook \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"https://my.slack.com/apps/new/A0F7XDUAZ-incoming-webhooks\"],[\"static-attr\",\"target\",\"_blank\"],[\"flush-element\"],[\"text\",\"here\"],[\"close-element\"],[\"text\",\", and grab the URL.\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"url\"],[\"flush-element\"],[\"text\",\"Webhook URL\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"url\"]]],[[\"name\",\"update\",\"onenter\",\"placeholder\"],[\"slack[url]\",[\"helper\",[\"action\"],[[\"get\",[null]],\"updateURL\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"save\"],null],\"https://hooks.slack.com/services/...\"]]],false],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"model\",\"errors\",\"url\"]]],null,2,1]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Apps\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"static-attr\",\"style\",\"padding-left:1px\"],[\"flush-element\"],[\"block\",[\"link-to\"],[\"settings.apps.index\"],null,5],[\"text\",\" \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"static-attr\",\"style\",\"display:inline\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Slack\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/apps/slack.hbs" } });
});
define("ghost-admin/templates/settings/code-injection-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "xsu6hV/p", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Code injection\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"action\",\"submitting\"],[\"gh-btn gh-btn-blue\",\"save\",[\"get\",[\"submitting\"]]]],0],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/code-injection-loading.hbs" } });
});
define("ghost-admin/templates/settings/code-injection", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "igZgcOr7", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Code injection\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"action\",\"submitting\",\"data-test-save-button\"],[\"gh-btn gh-btn-blue\",\"save\",[\"get\",[\"submitting\"]],true]],0],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-continer\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"settings-code\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"fieldset\",[]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n                    Ghost allows you to inject code into the top and bottom of your theme files without editing them. This allows for quick modifications to insert useful things like tracking codes and meta tags.\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group settings-code\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"ghost-head\"],[\"flush-element\"],[\"text\",\"Blog Header\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Code here will be injected into the \"],[\"open-element\",\"code\",[]],[\"flush-element\"],[\"text\",\"{{ghost_head}}\"],[\"close-element\"],[\"text\",\" tag on every page of your blog\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-cm-editor\"],[[\"get\",[\"model\",\"ghost_head\"]]],[[\"id\",\"class\",\"name\",\"type\",\"update\"],[\"ghost-head\",\"gh-input settings-code-editor\",\"codeInjection[ghost_head]\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"ghost_head\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group settings-code\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"ghost-foot\"],[\"flush-element\"],[\"text\",\"Blog Footer\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Code here will be injected into the \"],[\"open-element\",\"code\",[]],[\"flush-element\"],[\"text\",\"{{ghost_foot}}\"],[\"close-element\"],[\"text\",\" tag on every page of your blog\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-cm-editor\"],[[\"get\",[\"model\",\"ghost_foot\"]]],[[\"id\",\"class\",\"name\",\"type\",\"update\"],[\"ghost-foot\",\"gh-input settings-code-editor\",\"codeInjection[ghost_foot]\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"ghost_foot\"]]],null]],null]]]],false],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/code-injection.hbs" } });
});
define("ghost-admin/templates/settings/general-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "gbH+SXJ1", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"General\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"action\",\"submitting\"],[\"gh-btn gh-btn-blue\",\"save\",[\"get\",[\"submitting\"]]]],0],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general-loading.hbs" } });
});
define("ghost-admin/templates/settings/general", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "dSl+TFNx", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"General\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"action\",\"submitting\",\"data-test-save-button\"],[\"gh-btn gh-btn-blue\",\"save\",[\"get\",[\"submitting\"]],true]],19],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"settings-general\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"fieldset\",[]],[\"flush-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"title\"]],18],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"description\",\"description-container\"]],17],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"flush-element\"],[\"text\",\"Blog Logo\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"logo\"]]],null,16,15],[\"text\",\"                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Display a logo for your publication\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showUploadLogoModal\"]]],null,14],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"config\",\"fileStorage\"]]],null,13],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"label\",[]],[\"flush-element\"],[\"text\",\"Blog Cover\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"cover\"]]],null,9,8],[\"text\",\"                \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Display a cover image on your site\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showUploadCoverModal\"]]],null,7],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"fieldset\",[]],[\"flush-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"postsPerPage\"]],6],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group for-checkbox\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"permalinks\"],[\"flush-element\"],[\"text\",\"Dated Permalinks\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"class\",\"checkbox\"],[\"static-attr\",\"for\",\"permalinks\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"one-way-checkbox\"],[[\"get\",[\"isDatedPermalinks\"]]],[[\"id\",\"class\",\"name\",\"update\"],[\"permalinks\",\"gh-input\",\"general[permalinks]\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"isDatedPermalinks\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-toggle-component\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Include the date in your post URLs\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"facebook\"]],5],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"twitter\"]],4],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"append\",[\"helper\",[\"gh-timezone-select\"],null,[[\"activeTimezone\",\"availableTimezones\",\"update\"],[[\"get\",[\"model\",\"activeTimezone\"]],[\"get\",[\"availableTimezones\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"setTimezone\"],null]]]],false],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group for-checkbox\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"isPrivate\"],[\"flush-element\"],[\"text\",\"Make this blog private\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"class\",\"checkbox\"],[\"static-attr\",\"for\",\"isPrivate\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"one-way-checkbox\"],[[\"get\",[\"model\",\"isPrivate\"]]],[[\"id\",\"name\",\"type\",\"update\"],[\"isPrivate\",\"general[isPrivate]\",\"checkbox\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"isPrivate\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-toggle-component\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Enable password protection\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"isPrivate\"]]],null,3],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"settings-themes\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"h3\",[]],[\"static-attr\",\"id\",\"themes\"],[\"flush-element\"],[\"text\",\"Themes\"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"append\",[\"helper\",[\"gh-theme-table\"],null,[[\"availableThemes\",\"activateTheme\",\"downloadTheme\",\"deleteTheme\"],[[\"get\",[\"model\",\"availableThemes\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"setTheme\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"downloadTheme\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"deleteTheme\"],null]]]],false],[\"text\",\"\\n\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"link-to\"],[\"settings.general.uploadtheme\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],1],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showDeleteThemeModal\"]]],null,0],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-theme\"],[[\"model\",\"close\",\"confirm\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"theme\",\"download\"],[[\"get\",[\"themeToDelete\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"downloadTheme\",[\"get\",[\"themeToDelete\"]]],null]]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"hideDeleteThemeModal\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"deleteTheme\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Upload a theme\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"password\"]]],[[\"name\",\"type\",\"focusOut\",\"update\"],[\"general[password]\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"password\"],[[\"target\"],[[\"get\",[\"model\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"password\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"password\"]]],false],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"This password will be needed to access your blog. All search engine optimization and social features are now disabled. This password is stored in plaintext.\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"model\",\"hasValidated\"]],\"password\"]],2]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"twitter\"],[\"flush-element\"],[\"text\",\"Twitter Profile\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"input\",[]],[\"dynamic-attr\",\"value\",[\"unknown\",[\"model\",\"twitter\"]],null],[\"dynamic-attr\",\"oninput\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[\"static-attr\",\"type\",\"url\"],[\"static-attr\",\"class\",\"gh-input\"],[\"static-attr\",\"id\",\"facebook\"],[\"static-attr\",\"name\",\"general[twitter]\"],[\"static-attr\",\"placeholder\",\"https://twitter.com/tryghost\"],[\"static-attr\",\"autocorrect\",\"off\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"validateTwitterUrl\"],[[\"on\"],[\"focusOut\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"twitter\"]]],false],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"URL of your blog's Twitter profile\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"facebook\"],[\"flush-element\"],[\"text\",\"Facebook Page\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"input\",[]],[\"dynamic-attr\",\"value\",[\"unknown\",[\"model\",\"facebook\"]],null],[\"dynamic-attr\",\"oninput\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[\"static-attr\",\"type\",\"url\"],[\"static-attr\",\"class\",\"gh-input\"],[\"static-attr\",\"id\",\"facebook\"],[\"static-attr\",\"name\",\"general[facebook]\"],[\"static-attr\",\"placeholder\",\"https://www.facebook.com/ghost\"],[\"static-attr\",\"autocorrect\",\"off\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"validateFacebookUrl\"],[[\"on\"],[\"focusOut\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"facebook\"]]],false],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"URL of your blog's Facebook Page\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"postsPerPage\"],[\"flush-element\"],[\"text\",\"Posts per page\"],[\"close-element\"],[\"text\",\"\\n\"],[\"text\",\"                        \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"postsPerPage\"]]],[[\"id\",\"name\",\"focusOut\",\"min\",\"max\",\"type\",\"pattern\",\"update\"],[\"postsPerPage\",\"general[postsPerPage]\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"postsPerPage\"],[[\"target\"],[[\"get\",[\"model\"]]]]],\"1\",\"1000\",\"number\",\"[0-9]*\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"postsPerPage\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"postsPerPage\"]]],false],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"How many posts should be displayed on each page\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"model\",\"imageProperty\",\"allowUrlInput\"],[[\"get\",[\"model\"]],\"cover\",true]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleUploadCoverModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-green js-modal-cover\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadCoverModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Upload Image\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"blog-cover\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"unknown\",[\"model\",\"cover\"]]]]],[\"static-attr\",\"alt\",\"cover photo\"],[\"static-attr\",\"role\",\"button\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadCoverModal\"]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"model\",\"imageProperty\",\"accept\",\"extensions\",\"allowUrlInput\",\"uploadUrl\"],[[\"get\",[\"model\"]],\"icon\",[\"get\",[\"iconMimeTypes\"]],[\"get\",[\"iconExtensions\"]],false,\"/uploads/icon/\"]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleUploadIconModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-green js-modal-logo\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadIconModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Upload Image\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"blog-icon\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"unknown\",[\"model\",\"icon\"]]]]],[\"static-attr\",\"alt\",\"icon\"],[\"static-attr\",\"role\",\"button\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadIconModal\"]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"label\",[]],[\"flush-element\"],[\"text\",\"Blog Icon\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"model\",\"icon\"]]],null,12,11],[\"text\",\"                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Upload a square blog icon ('.ico' or '.png', max. 100kb, 32px * 32px up to 1,000px * 1,000px) for your publication\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showUploadIconModal\"]]],null,10],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"model\",\"imageProperty\",\"allowUrlInput\"],[[\"get\",[\"model\"]],\"logo\",true]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleUploadLogoModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-green js-modal-logo\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadLogoModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Upload Image\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"blog-logo\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"unknown\",[\"model\",\"logo\"]]]]],[\"static-attr\",\"alt\",\"logo\"],[\"static-attr\",\"role\",\"button\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadLogoModal\"]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"blog-description\"],[\"flush-element\"],[\"text\",\"Blog Description\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-textarea\"],[[\"get\",[\"model\",\"description\"]]],[[\"id\",\"name\",\"focusOut\",\"update\"],[\"blog-description\",\"general[description]\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"description\"],[[\"target\"],[[\"get\",[\"model\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"description\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"description\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n                        Describe what your blog is about\\n                        \"],[\"append\",[\"helper\",[\"gh-count-characters\"],[[\"get\",[\"model\",\"description\"]]],null],false],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"blog-title\"],[\"flush-element\"],[\"text\",\"Blog Title\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"title\"]]],[[\"id\",\"name\",\"type\",\"focusOut\",\"update\"],[\"blog-title\",\"general[title]\",\"text\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"title\"],[[\"target\"],[[\"get\",[\"model\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"title\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"title\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"The name of your blog\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general.hbs" } });
});
define("ghost-admin/templates/settings/general/uploadtheme", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "0AlFAFus", "block": "{\"statements\":[[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"upload-theme\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"availableThemes\",\"uploadSuccess\",\"activate\"],[[\"get\",[\"model\"]],[\"helper\",[\"route-action\"],[\"reloadSettings\"],null],[\"helper\",[\"route-action\"],[\"activateTheme\"],null]]]],[\"helper\",[\"route-action\"],[\"cancel\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/general/uploadtheme.hbs" } });
});
define("ghost-admin/templates/settings/labs-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "OqRdHMNU", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Labs\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/labs-loading.hbs" } });
});
define("ghost-admin/templates/settings/labs", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "a4FU1LdM", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Labs\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container settings-debug\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"gh-box gh-box-info\"],[\"flush-element\"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-idea\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"This is a testing ground for experimental features which aren't quite ready for primetime. They may change, break or inexplicably disappear at any time.\"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-header\"],[\"flush-element\"],[\"text\",\"Migration options\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Import content\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"Import posts from another Ghost installation\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"partial\",\"import-errors\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"settings-import\"],[\"static-attr\",\"enctype\",\"multipart/form-data\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-file-upload\"],null,[[\"id\",\"classNames\",\"uploadButtonText\",\"onUpload\",\"acceptEncoding\"],[\"importfile\",\"flex\",[\"get\",[\"uploadButtonText\"]],\"onUpload\",[\"get\",[\"importMimeType\"]]]]],false],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Export your content\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"Download all of your posts and settings in a single, glorious JSON file\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-hover-blue\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"exportData\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Export\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Delete all content\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"Permanently delete all posts and tags from the database, a hard reset\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-hover-red js-delete\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleDeleteAllModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Delete\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-header\"],[\"flush-element\"],[\"text\",\"Testing tools\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Test email configuration\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"Send yourself a test email to make sure everything is working\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"block\",[\"gh-spin-button\"],null,[[\"id\",\"class\",\"action\",\"submitting\"],[\"sendtestemail\",\"gh-btn gh-btn-hover-blue\",\"sendTestEmail\",[\"get\",[\"submitting\"]]]],1],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-header\"],[\"flush-element\"],[\"text\",\"Beta features\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Public API\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"For full instructions, read the \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"http://support.ghost.org/public-api-beta/\"],[\"flush-element\"],[\"text\",\"developer guide\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"for-checkbox\"],[\"flush-element\"],[\"append\",[\"helper\",[\"gh-feature-flag\"],[\"publicAPI\"],null],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Night shift\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"Swap Ghost admin's colours to a dark background which is easy on the eyes\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"for-checkbox\"],[\"flush-element\"],[\"append\",[\"helper\",[\"gh-feature-flag\"],[\"nightShift\"],null],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-title\"],[\"flush-element\"],[\"text\",\"Subscribers\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-desc\"],[\"flush-element\"],[\"text\",\"Collect email addresses from your readers, more info in \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"href\",\"http://support.ghost.org/subscribers-beta/\"],[\"flush-element\"],[\"text\",\"the docs\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-setting-action\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"for-checkbox\"],[\"flush-element\"],[\"append\",[\"helper\",[\"gh-feature-flag\"],[\"subscribers\"],null],false],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showDeleteAllModal\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-all\"],[[\"close\",\"modifier\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleDeleteAllModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Send\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/settings/labs.hbs" } });
});
define("ghost-admin/templates/settings/navigation-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "V+yGa2Lt", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Navigation\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"action\",\"submitting\"],[\"gh-btn gh-btn-blue\",\"save\",[\"get\",[\"submitting\"]]]],0],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/navigation-loading.hbs" } });
});
define("ghost-admin/templates/settings/navigation", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "KP4jXBBL", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Navigation\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"action\",\"submitting\"],[\"gh-btn gh-btn-blue\",\"save\",[\"get\",[\"submitting\"]]]],2],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"settings-navigation\"],[\"static-attr\",\"class\",\"gh-blognav\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"sortable-group\"],null,[[\"onChange\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"reorderItems\"],null]]],1],[\"text\",\"            \"],[\"append\",[\"helper\",[\"gh-navitem\"],null,[[\"navItem\",\"baseUrl\",\"addItem\",\"updateUrl\"],[[\"get\",[\"newNavItem\"]],[\"get\",[\"blogUrl\"]],\"addItem\",\"updateUrl\"]]],false],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-navitem\"],null,[[\"navItem\",\"baseUrl\",\"addItem\",\"deleteItem\",\"updateUrl\",\"group\"],[[\"get\",[\"navItem\"]],[\"get\",[\"blogUrl\"]],\"addItem\",\"deleteItem\",\"updateUrl\",[\"get\",[\"group\"]]]]],false],[\"text\",\"\\n\"]],\"locals\":[\"navItem\"]},{\"statements\":[[\"block\",[\"each\"],[[\"get\",[\"model\",\"navigation\"]]],null,0]],\"locals\":[\"group\"]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/navigation.hbs" } });
});
define("ghost-admin/templates/settings/tags-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Ig94Mrws", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],1],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"link-to\"],[\"settings.tags.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],0],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-content\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"New Tag\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Tags\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags-loading.hbs" } });
});
define("ghost-admin/templates/settings/tags", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "JE0bqpoz", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],4],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"link-to\"],[\"settings.tags.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],3],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-tags-management-container\"],null,[[\"tags\",\"selectedTag\",\"enteredMobile\",\"leftMobile\"],[[\"get\",[\"tags\"]],[\"get\",[\"selectedTag\"]],\"enteredMobile\",\"leftMobile\"]],2],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                    \"],[\"append\",[\"helper\",[\"gh-tag\"],null,[[\"tag\",\"onDelete\"],[[\"get\",[\"tag\"]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"get\",[\"checkScroll\"]]],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[\"tag\"]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"section\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"tag-list-content settings-tags \",[\"helper\",[\"if\"],[[\"get\",[\"tagListFocused\"]],\"keyboard-focused\"],null]]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"tags\"]]],null,0],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"checkScroll\"]},{\"statements\":[[\"block\",[\"gh-infinite-scroll\"],null,[[\"fetch\",\"isLoading\",\"classNames\"],[\"loadNextPage\",[\"get\",[\"isLoading\"]],\"tag-list\"]],1],[\"text\",\"        \"],[\"open-element\",\"section\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"settings-menu-container tag-settings \",[\"helper\",[\"if\"],[[\"get\",[\"tagContentFocused\"]],\"keyboard-focused\"],null],\" \",[\"helper\",[\"if\"],[[\"get\",[\"container\",\"displaySettingsPane\"]],\"tag-settings-in\"],null]]]],[\"flush-element\"],[\"text\",\"\\n            \"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"container\"]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"New Tag\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Tags\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags.hbs" } });
});
define("ghost-admin/templates/settings/tags/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "wfFYlcgv", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"no-posts-box\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"no-posts\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h3\",[]],[\"flush-element\"],[\"text\",\"You haven't added any tags yet!\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"block\",[\"link-to\"],[\"settings.tags.new\"],null,0],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"gh-btn gh-btn-green btn-lg\"],[\"static-attr\",\"title\",\"New Tag\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Add a tag\"],[\"close-element\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags/index.hbs" } });
});
define("ghost-admin/templates/settings/tags/tag", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "xOPm2MV6", "block": "{\"statements\":[[\"append\",[\"helper\",[\"gh-tag-settings-form\"],null,[[\"tag\",\"setProperty\",\"showDeleteTagModal\"],[[\"get\",[\"tag\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"setProperty\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleDeleteTagModal\"],null]]]],false],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showDeleteTagModal\"]]],null,0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-tag\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[\"get\",[\"tag\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"deleteTag\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleDeleteTagModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/settings/tags/tag.hbs" } });
});
define("ghost-admin/templates/setup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "ElyXWZGs", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-flow-head\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"nav\",[]],[\"static-attr\",\"class\",\"gh-flow-nav\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showBackLink\"]]],null,4],[\"text\",\"            \"],[\"open-element\",\"ol\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-activating-list-item\"],null,[[\"route\",\"linkClasses\"],[\"setup.one\",\"step\"]],2],[\"text\",\"                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"divider\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-activating-list-item\"],null,[[\"route\",\"linkClasses\"],[\"setup.two\",\"step\"]],1],[\"text\",\"                \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"divider\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-activating-list-item\"],null,[[\"route\",\"linkClasses\"],[\"setup.three\",\"step\"]],0],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow-content-wrap\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-flow-content\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-check\"],[\"flush-element\"],[\"close-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"num\"],[\"flush-element\"],[\"text\",\"3\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-check\"],[\"flush-element\"],[\"close-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"num\"],[\"flush-element\"],[\"text\",\"2\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-check\"],[\"flush-element\"],[\"close-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"num\"],[\"flush-element\"],[\"text\",\"1\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-left\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" Back\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"block\",[\"link-to\"],[[\"get\",[\"backRoute\"]]],[[\"classNames\"],[\"gh-flow-back\"]],3],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup.hbs" } });
});
define("ghost-admin/templates/setup/one", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "VMgPWtut", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Welcome to \"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"text\",\"Ghost\"],[\"close-element\"],[\"text\",\"!\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"All over the world, people have started \"],[\"open-element\",\"em\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"model\",\"count\"]],false],[\"close-element\"],[\"text\",\" incredible blogs with Ghost. Today, we’re starting yours.\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"figure\",[]],[\"static-attr\",\"class\",\"gh-flow-screenshot\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"img\",[]],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"img/install-welcome.png\"],null]]]],[\"static-attr\",\"alt\",\"Ghost screenshot\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"link-to\"],[\"setup.two\"],[[\"classNames\"],[\"gh-btn gh-btn-green gh-btn-lg\"]],0]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    Create your account \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-chevron\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/one.hbs" } });
});
define("ghost-admin/templates/setup/three", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Jx4dEqoT", "block": "{\"statements\":[[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Invite your team\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Ghost works best when shared with others. Collaborate, get feedback on your posts & work together on ideas.\"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"div\",[]],[\"flush-element\"],[\"open-element\",\"img\",[]],[\"static-attr\",\"class\",\"gh-flow-faces\"],[\"dynamic-attr\",\"src\",[\"concat\",[[\"helper\",[\"gh-path\"],[\"asset\",\"img/users.png\"],null]]]],[\"static-attr\",\"alt\",\"\"],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"form\",[]],[\"static-attr\",\"class\",\"gh-flow-invite\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"users\"]],1],[\"text\",\"\\n    \"],[\"block\",[\"gh-spin-button\"],null,[[\"type\",\"action\",\"submitting\",\"autoWidth\",\"class\"],[\"submit\",\"invite\",[\"get\",[\"submitting\"]],\"false\",[\"helper\",[\"concat\"],[\"gh-btn\",\" \",\"gh-btn-default\",\" \",\"gh-btn-lg\",\" \",\"gh-btn-block\",\" \",[\"helper\",[\"if\"],[[\"get\",[\"buttonClass\"]],[\"helper\",[\"-normalize-class\"],[\"buttonClass\",[\"get\",[\"buttonClass\"]]],null]],null],\" \"],null]]],0],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-flow-skip\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"skipInvite\"]],[\"flush-element\"],[\"text\",\"\\n    I'll do this later, take me to my blog!\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"buttonText\"]],false],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"users\"],[\"flush-element\"],[\"text\",\"Enter one email address per line, we’ll handle the rest! \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-mail\"],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"append\",[\"helper\",[\"gh-textarea\"],[[\"get\",[\"users\"]]],[[\"name\",\"required\",\"focusOut\",\"update\"],[\"users\",\"required\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"users\"]]],null]],null]]]],false],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/three.hbs" } });
});
define("ghost-admin/templates/setup/two", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "2sEpe8UX", "block": "{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"config\",\"ghostOAuth\"]]],null,12,5],[\"text\",\"\\n\"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"main-error\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"flowErrors\"]],true],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Last step: Invite your team \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-chevron\"],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"blog-title\"],[\"flush-element\"],[\"text\",\"Blog title\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"blogTitle\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\"],[\"4\",\"text\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"preValidate\",\"blogTitle\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"blogTitle\"]]],null]],null]]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"blogTitle\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"password\"],[\"flush-element\"],[\"text\",\"Password\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-lock\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"password\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\"],[\"3\",\"password\",\"password\",\"At least 8 characters\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"preValidate\",\"password\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"password\"]]],null]],null]]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"password\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"full-name\"],[\"flush-element\"],[\"text\",\"Full name\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-user\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"name\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\"],[\"2\",\"text\",\"name\",\"Eg. John H. Watson\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"preValidate\",\"name\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"name\"]]],null]],null]]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"name\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"email-address\"],[\"flush-element\"],[\"text\",\"Email address\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-mail\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-trim-focus-input\"],[[\"get\",[\"email\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\"],[\"1\",\"email\",\"email\",\"Eg. john@example.com\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"preValidate\",\"email\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"email\"]]],null]],null]]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"email\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Create your account\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"setup\"],[\"static-attr\",\"class\",\"gh-flow-create\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"text\",\"        \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"style\",\"display:none;\"],[\"static-attr\",\"type\",\"text\"],[\"static-attr\",\"name\",\"fakeusernameremembered\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"style\",\"display:none;\"],[\"static-attr\",\"type\",\"password\"],[\"static-attr\",\"name\",\"fakepasswordremembered\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"append\",[\"helper\",[\"gh-profile-image\"],null,[[\"fileStorage\",\"email\",\"setImage\"],[[\"get\",[\"config\",\"fileStorage\"]],[\"get\",[\"email\"]],\"setImage\"]]],false],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"email\"]],4],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"name\"]],3],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"password\"]],2],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"blogTitle\"]],1],[\"block\",[\"gh-spin-button\"],null,[[\"type\",\"tabindex\",\"class\",\"action\",\"submitting\",\"autoWidth\"],[\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block\",\"setup\",[\"get\",[\"submitting\"]],\"false\"]],0],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Last step: Invite your team \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-chevron\"],[\"flush-element\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"blog-title\"],[\"flush-element\"],[\"text\",\"Blog title\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-content\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"blogTitle\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\",\"onenter\"],[\"4\",\"text\",\"blog-title\",\"Eg. The Daily Awesome\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"preValidate\",\"blogTitle\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"blogTitle\"]]],null]],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"setup\"],null]]]],false],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"blogTitle\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Sign in with Ghost\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Connected: \"],[\"append\",[\"unknown\",[\"session\",\"user\",\"email\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"session\",\"isAuthenticated\"]]],null,9,8]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"type\",\"action\",\"tabindex\",\"submitting\",\"autoWidth\"],[\"login gh-btn gh-btn-blue gh-btn-block\",\"button\",\"authenticateWithGhostOrg\",\"3\",[\"get\",[\"loggingIn\"]],\"false\"]],10],[\"text\",\"            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"errors\"]],\"session\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"    \"],[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Setup your blog\"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"setup\"],[\"static-attr\",\"class\",\"gh-flow-create\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"setup\"],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"session\"]],11],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"errors\"]],[\"get\",[\"hasValidated\"]],\"blogTitle\"]],7],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-spin-button\"],null,[[\"type\",\"tabindex\",\"class\",\"action\",\"disabled\",\"submitting\",\"autoWidth\"],[\"submit\",\"5\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block\",[\"helper\",[\"action\"],[[\"get\",[null]],\"setup\"],null],[\"get\",[\"submitDisabled\"]],[\"get\",[\"submitting\"]],\"false\"]],6]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/setup/two.hbs" } });
});
define("ghost-admin/templates/signin", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "uMVZ2Ez4", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow-content-wrap\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-flow-content\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"config\",\"ghostOAuth\"]]],null,7],[\"text\",\"\\n            \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"login\"],[\"static-attr\",\"class\",\"gh-signin\"],[\"static-attr\",\"method\",\"post\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"config\",\"ghostOAuth\"]]],null,6,4],[\"text\",\"            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"main-error\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"flowErrors\"]],true],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Sign in\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Forgot?\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-lock forgotten-wrap\"],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"password\"]]],[[\"class\",\"type\",\"placeholder\",\"name\",\"tabindex\",\"autocorrect\",\"update\"],[\"password\",\"password\",\"Password\",\"password\",\"2\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"password\"]]],null]],null]]]],false],[\"text\",\"\\n                            \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"type\",\"action\",\"tabindex\",\"submitting\",\"autoWidth\"],[\"forgotten-link gh-btn gh-btn-link\",\"button\",\"forgotten\",\"4\",[\"get\",[\"submitting\"]],\"true\"]],1],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-mail\"],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-trim-focus-input\"],[[\"get\",[\"model\",\"identification\"]]],[[\"class\",\"type\",\"placeholder\",\"name\",\"autocapitalize\",\"autocorrect\",\"tabindex\",\"focusOut\",\"update\"],[\"email\",\"email\",\"Email Address\",\"identification\",\"off\",\"off\",\"1\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"identification\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"identification\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"hasValidated\"]],\"identification\"]],3],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"hasValidated\"]],\"password\"]],2],[\"text\",\"                    \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"type\",\"action\",\"tabindex\",\"submitting\",\"autoWidth\"],[\"login gh-btn gh-btn-blue gh-btn-block\",\"submit\",\"validateAndAuthenticate\",\"3\",[\"get\",[\"loggingIn\"]],\"false\"]],0],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Sign in with Ghost\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"type\",\"action\",\"tabindex\",\"submitting\",\"autoWidth\"],[\"login gh-btn gh-btn-blue gh-btn-block\",\"submit\",\"authenticateWithGhostOrg\",\"3\",[\"get\",[\"loggingIn\"]],\"false\"]],5],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"config\",\"blogTitle\"]],false],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/signin.hbs" } });
});
define("ghost-admin/templates/signup", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "hj51hGNi", "block": "{\"statements\":[[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow\"],[\"flush-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-flow-content-wrap\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-flow-content\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"config\",\"ghostOAuth\"]]],null,6,4],[\"text\",\"\\n            \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"main-error\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"flowErrors\"]],true],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Create Account\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"password\"],[\"flush-element\"],[\"text\",\"Password\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-lock\"],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"password\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"onenter\",\"autocorrect\",\"focusOut\",\"update\"],[\"2\",\"password\",\"password\",\"At least 8 characters\",[\"helper\",[\"action\"],[[\"get\",[null]],\"signup\"],null],\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"password\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"password\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"password\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"full-name\"],[\"flush-element\"],[\"text\",\"Full name\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-user\"],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-trim-focus-input\"],[[\"get\",[\"model\",\"name\"]]],[[\"tabindex\",\"type\",\"name\",\"placeholder\",\"onenter\",\"autocorrect\",\"focusOut\",\"update\"],[\"1\",\"text\",\"name\",\"Eg. John H. Watson\",[\"helper\",[\"action\"],[[\"get\",[null]],\"signup\"],null],\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"name\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"model\",\"name\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"model\",\"errors\"]],\"name\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"email-address\"],[\"flush-element\"],[\"text\",\"Email address\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"input-icon icon-mail\"],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"model\",\"email\"]]],[[\"type\",\"name\",\"placeholder\",\"disabled\",\"autocorrect\"],[\"email\",\"email\",\"Eg. john@example.com\",\"disabled\",\"off\"]]],false],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"text\",\"Create your account\"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"signup\"],[\"static-attr\",\"class\",\"gh-flow-create\"],[\"static-attr\",\"method\",\"post\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"text\",\"                    \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"style\",\"display:none;\"],[\"static-attr\",\"type\",\"text\"],[\"static-attr\",\"name\",\"fakeusernameremembered\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"style\",\"display:none;\"],[\"static-attr\",\"type\",\"password\"],[\"static-attr\",\"name\",\"fakepasswordremembered\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\\n                    \"],[\"append\",[\"helper\",[\"gh-profile-image\"],null,[[\"fileStorage\",\"email\",\"setImage\"],[[\"get\",[\"config\",\"fileStorage\"]],[\"get\",[\"model\",\"email\"]],\"setImage\"]]],false],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-form-group\"],null,null,3],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"hasValidated\"]],\"name\"]],2],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"model\",\"errors\"]],[\"get\",[\"hasValidated\"]],\"password\"]],1],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"block\",[\"gh-spin-button\"],null,[[\"tabindex\",\"type\",\"class\",\"action\",\"submitting\",\"autoWidth\"],[\"3\",\"submit\",\"gh-btn gh-btn-green gh-btn-lg gh-btn-block\",\"signup\",[\"get\",[\"submitting\"]],\"false\"]],0],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Sign in with Ghost to accept\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"header\",[]],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"h1\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"config\",\"blogTitle\"]],false],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"text\",\"                            Accept your invite from \"],[\"open-element\",\"strong\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"model\",\"invitedBy\"]],false],[\"close-element\"],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"signup\"],[\"static-attr\",\"class\",\"gh-signin\"],[\"static-attr\",\"method\",\"post\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-spin-button\"],null,[[\"class\",\"type\",\"action\",\"tabindex\",\"submitting\",\"autoWidth\"],[\"login gh-btn gh-btn-blue gh-btn-block\",\"submit\",\"authenticateWithGhostOrg\",\"3\",[\"get\",[\"loggingIn\"]],\"false\"]],5],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/signup.hbs" } });
});
define("ghost-admin/templates/subscribers", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "5yjVq3Zk", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Subscribers \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"style\",\"font-weight:200;margin-left:10px;display:inline-block;\"],[\"static-attr\",\"data-test-total-subscribers\",\"\"],[\"flush-element\"],[\"text\",\" (\"],[\"append\",[\"unknown\",[\"total\"]],false],[\"text\",\")\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"block\",[\"link-to\"],[\"subscribers.import\"],[[\"class\"],[\"gh-btn gh-btn-hover-green\"]],2],[\"text\",\"\\n            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"gh-btn\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"exportData\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Export CSV\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"block\",[\"link-to\"],[\"subscribers.new\"],[[\"class\"],[\"gh-btn gh-btn-green\"]],1],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"helper\",[\"gh-subscribers-table\"],null,[[\"table\",\"isLoading\",\"loadNextPage\",\"sortByColumn\",\"delete\"],[[\"get\",[\"table\"]],[\"get\",[\"isLoading\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"loadNextPage\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"sortByColumn\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"deleteSubscriber\"],null]]]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"subscriberToDelete\"]]],null,0],[\"text\",\"\\n\"],[\"append\",[\"unknown\",[\"outlet\"]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-subscriber\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[\"get\",[\"subscriberToDelete\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"confirmDeleteSubscriber\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"cancelDeleteSubscriber\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Add Subscriber\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Import CSV\"],[\"close-element\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers.hbs" } });
});
define("ghost-admin/templates/subscribers/import", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "kJgUyHxU", "block": "{\"statements\":[[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"import-subscribers\"],[[\"confirm\",\"close\",\"modifier\"],[[\"helper\",[\"route-action\"],[\"reset\"],null],[\"helper\",[\"route-action\"],[\"cancel\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers/import.hbs" } });
});
define("ghost-admin/templates/subscribers/new", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "Ov3av0Z7", "block": "{\"statements\":[[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"new-subscriber\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[\"get\",[\"model\"]],[\"helper\",[\"route-action\"],[\"save\"],null],[\"helper\",[\"route-action\"],[\"cancel\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/subscribers/new.hbs" } });
});
define("ghost-admin/templates/team/index-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "K77eodq8", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Team members\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"session\",\"user\",\"isAuthor\"]]],null,0],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-green\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleInviteUserModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Invite People\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/team/index-loading.hbs" } });
});
define("ghost-admin/templates/team/index", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "AyuAA6rp", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-canvas\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"gh-canvas-header\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"h2\",[]],[\"static-attr\",\"class\",\"gh-canvas-title\"],[\"flush-element\"],[\"text\",\"Team members\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"session\",\"user\",\"isAuthor\"]]],null,15],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showInviteUserModal\"]]],null,14],[\"text\",\"\\n\"],[\"block\",[\"gh-infinite-scroll\"],null,[[\"fetch\",\"isLoading\",\"tagName\",\"classNames\"],[\"loadNextPage\",[\"get\",[\"isLoading\"]],\"section\",\"gh-team\"]],13],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"li\",[]],[\"static-attr\",\"class\",\"ember-view active user-list-item\"],[\"flush-element\"],[\"partial\",\"user-list-item\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"component\"]},{\"statements\":[[\"block\",[\"gh-user-active\"],null,[[\"user\"],[[\"get\",[\"user\"]]]],0]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"partial\",\"user-list-item\"],[\"text\",\"\\n\"]],\"locals\":[\"component\"]},{\"statements\":[[\"block\",[\"gh-user-active\"],null,[[\"user\"],[[\"get\",[\"user\"]]]],2]],\"locals\":[]},{\"statements\":[[\"block\",[\"unless\"],[[\"get\",[\"session\",\"user\",\"isAuthor\"]]],null,3,1]],\"locals\":[\"user\"]},{\"statements\":[[\"text\",\"                                            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"user-list-action\"],[\"static-attr\",\"href\",\"#revoke\"],[\"static-attr\",\"data-test-revoke-button\",\"\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"revoke\"],[[\"target\"],[[\"get\",[\"component\"]]]]],[\"flush-element\"],[\"text\",\"\\n                                                Revoke\\n                                            \"],[\"close-element\"],[\"text\",\"\\n                                            \"],[\"open-element\",\"a\",[]],[\"static-attr\",\"class\",\"user-list-action\"],[\"static-attr\",\"href\",\"#resend\"],[\"static-attr\",\"data-test-resend-button\",\"\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"resend\"],[[\"target\"],[[\"get\",[\"component\"]]]]],[\"flush-element\"],[\"text\",\"\\n                                                Resend\\n                                            \"],[\"close-element\"],[\"text\",\"\\n\\n                                            \"],[\"open-element\",\"span\",[]],[\"dynamic-attr\",\"class\",[\"concat\",[\"gh-badge \",[\"unknown\",[\"invite\",\"role\",\"lowerCaseName\"]]]]],[\"static-attr\",\"data-test-role-name\",\"\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"invite\",\"role\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                                            \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Sending Invite...\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                                                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"description\"],[\"flush-element\"],[\"text\",\"\\n                                                    Invitation sent: \"],[\"append\",[\"unknown\",[\"component\",\"createdAt\"]],false],[\"text\",\",\\n                                                    expires \"],[\"append\",[\"unknown\",[\"component\",\"expiresAt\"]],false],[\"text\",\"\\n                                                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                                                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"description-error\"],[\"flush-element\"],[\"text\",\"\\n                                                    Invitation not sent - please try again\\n                                                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid-cell\"],[\"dynamic-attr\",\"data-test-invite-id\",[\"concat\",[[\"unknown\",[\"invite\",\"id\"]]]]],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"open-element\",\"article\",[]],[\"static-attr\",\"class\",\"apps-card-app\"],[\"flush-element\"],[\"text\",\"\\n                                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-left\"],[\"flush-element\"],[\"text\",\"\\n                                    \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"user-list-item-icon icon-mail\"],[\"flush-element\"],[\"text\",\"ic\"],[\"close-element\"],[\"text\",\"\\n                                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-meta\"],[\"flush-element\"],[\"text\",\"\\n                                        \"],[\"open-element\",\"h3\",[]],[\"static-attr\",\"class\",\"apps-card-app-title\"],[\"static-attr\",\"data-test-email\",\"\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"invite\",\"email\"]],false],[\"close-element\"],[\"text\",\"\\n                                        \"],[\"open-element\",\"p\",[]],[\"static-attr\",\"class\",\"apps-card-app-desc\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"invite\",\"pending\"]]],null,8,7],[\"text\",\"                                        \"],[\"close-element\"],[\"text\",\"\\n                                    \"],[\"close-element\"],[\"text\",\"\\n                                \"],[\"close-element\"],[\"text\",\"\\n                                \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-card-right\"],[\"flush-element\"],[\"text\",\"\\n                                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-configured\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"component\",\"isSending\"]]],null,6,5],[\"text\",\"                                    \"],[\"close-element\"],[\"text\",\"\\n                                \"],[\"close-element\"],[\"text\",\"\\n                            \"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[\"component\"]},{\"statements\":[[\"block\",[\"gh-user-invited\"],null,[[\"invite\",\"reload\"],[[\"get\",[\"invite\"]],\"reload\"]],9]],\"locals\":[\"invite\"]},{\"statements\":[[\"text\",\"        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"apps-grid-container gh-invited-users\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"apps-grid-title\"],[\"flush-element\"],[\"text\",\"Invited users\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid\"],[\"flush-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"each\"],[[\"get\",[\"sortedInvites\"]]],null,10],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"invites\"]]],null,11]],\"locals\":[]},{\"statements\":[[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"session\",\"user\",\"isAuthor\"]]],null,12],[\"text\",\"\\n    \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"apps-grid-container gh-active-users\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"apps-grid-title\"],[\"flush-element\"],[\"text\",\"Active users\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"apps-grid\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"each\"],[[\"get\",[\"users\"]]],[[\"key\"],[\"id\"]],4],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"        \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"invite-new-user\"],[[\"close\",\"modifier\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleInviteUserModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-green\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleInviteUserModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Invite People\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":true}", "meta": { "moduleName": "ghost-admin/templates/team/index.hbs" } });
});
define("ghost-admin/templates/team/user-loading", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "w4VySNZn", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],1],[\"text\",\"\\n        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-blue\"],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-container\"],[\"flush-element\"],[\"text\",\"\\n        \"],[\"append\",[\"unknown\",[\"gh-loading-spinner\"]],false],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"text\",\"Team\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"block\",[\"link-to\"],[\"team\"],null,0],[\"text\",\"\\n            \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/team/user-loading.hbs" } });
});
define("ghost-admin/templates/team/user", ["exports"], function (exports) {
  exports["default"] = Ember.HTMLBars.template({ "id": "eYf92EJI", "block": "{\"statements\":[[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"gh-view\"],[\"flush-element\"],[\"text\",\"\\n    \"],[\"open-element\",\"header\",[]],[\"static-attr\",\"class\",\"view-header\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-view-title\"],null,[[\"openMobileMenu\"],[\"openMobileMenu\"]],30],[\"text\",\"        \"],[\"open-element\",\"section\",[]],[\"static-attr\",\"class\",\"view-actions\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"userActionsAreVisible\"]]],null,28],[\"text\",\"\\n            \"],[\"block\",[\"gh-task-button\"],null,[[\"class\",\"task\"],[\"gh-btn gh-btn-blue\",[\"get\",[\"save\"]]]],21],[\"text\",\"\\n        \"],[\"close-element\"],[\"text\",\"\\n    \"],[\"close-element\"],[\"text\",\"\\n\\n    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"view-container settings-user\"],[\"flush-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"figure\",[]],[\"static-attr\",\"class\",\"user-cover\"],[\"dynamic-attr\",\"style\",[\"unknown\",[\"coverImageBackground\"]],null],[\"flush-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"gh-btn gh-btn-default user-cover-edit\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadCoverModal\"]],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Change Cover\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showUploadCoverModal\"]]],null,20],[\"text\",\"        \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"class\",\"user-profile\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"static-attr\",\"autocomplete\",\"off\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"save\"]]],null]],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n\\n\"],[\"text\",\"            \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"style\",\"display:none;\"],[\"static-attr\",\"type\",\"text\"],[\"static-attr\",\"name\",\"fakeusernameremembered\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n            \"],[\"open-element\",\"input\",[]],[\"static-attr\",\"style\",\"display:none;\"],[\"static-attr\",\"type\",\"password\"],[\"static-attr\",\"name\",\"fakepasswordremembered\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"fieldset\",[]],[\"static-attr\",\"class\",\"user-details-top\"],[\"flush-element\"],[\"text\",\"\\n\\n                \"],[\"open-element\",\"figure\",[]],[\"static-attr\",\"class\",\"user-image\"],[\"flush-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"id\",\"user-image\"],[\"static-attr\",\"class\",\"img\"],[\"dynamic-attr\",\"style\",[\"unknown\",[\"userImageBackground\"]],null],[\"flush-element\"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"append\",[\"unknown\",[\"user\",\"name\"]],false],[\"text\",\"\\\"s Picture\"],[\"close-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"type\",\"button\"],[\"static-attr\",\"class\",\"edit-user-image\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleUploadImageModal\"]],[\"flush-element\"],[\"text\",\"Edit Picture\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showUploadImageModal\"]]],null,19],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"name\",\"first-form-group\"]],18],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"open-element\",\"fieldset\",[]],[\"static-attr\",\"class\",\"user-details-bottom\"],[\"flush-element\"],[\"text\",\"\\n\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"slug\"]],15],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"email\"]],14],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"rolesDropdownIsVisible\"]]],null,11],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"location\"]],10],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"website\"]],9],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"facebook\"]],8],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"twitter\"]],7],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\",\"class\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"bio\",\"bio-container\"]],6],[\"text\",\"\\n                \"],[\"open-element\",\"hr\",[]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n\\n            \"],[\"close-element\"],[\"text\",\"\\n\\n        \"],[\"close-element\"],[\"text\",\" \"],[\"text\",\"\\n\\n\"],[\"block\",[\"if\"],[[\"get\",[\"canChangePassword\"]]],null,5],[\"text\",\"    \"],[\"close-element\"],[\"text\",\"\\n\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[],\"named\":[],\"yields\":[],\"blocks\":[{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Change Password\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-new-password-verification\"],[\"flush-element\"],[\"text\",\"Verify Password\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"user\",\"ne2Password\"]]],[[\"type\",\"id\",\"update\",\"onenter\"],[\"password\",\"user-new-password-verification\",[\"helper\",[\"action\"],[[\"get\",[null]],\"updateNe2Password\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"user\",\"saveNewPassword\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"ne2Password\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-password-new\"],[\"flush-element\"],[\"text\",\"New Password\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"user\",\"newPassword\"]]],[[\"type\",\"id\",\"update\",\"onenter\"],[\"password\",\"user-password-new\",[\"helper\",[\"action\"],[[\"get\",[null]],\"updateNewPassword\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"user\",\"saveNewPassword\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"newPassword\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-password-old\"],[\"flush-element\"],[\"text\",\"Old Password\"],[\"close-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-input\"],null,[[\"value\",\"type\",\"id\",\"update\",\"onenter\"],[[\"get\",[\"user\",\"password\"]],\"password\",\"user-password-old\",[\"helper\",[\"action\"],[[\"get\",[null]],\"updatePassword\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"user\",\"saveNewPassword\"]]],null]],null]]]],false],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"password\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"password\"]],3]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"open-element\",\"form\",[]],[\"static-attr\",\"id\",\"password-reset\"],[\"static-attr\",\"class\",\"user-profile\"],[\"static-attr\",\"novalidate\",\"novalidate\"],[\"static-attr\",\"autocomplete\",\"off\"],[\"modifier\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"user\",\"saveNewPassword\"]]],null]],[[\"on\"],[\"submit\"]]],[\"flush-element\"],[\"text\",\"\\n                \"],[\"open-element\",\"fieldset\",[]],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"isNotOwnProfile\"]]],null,4],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"newPassword\"]],2],[\"text\",\"\\n\"],[\"block\",[\"gh-form-group\"],null,[[\"errors\",\"hasValidated\",\"property\"],[[\"get\",[\"user\",\"errors\"]],[\"get\",[\"user\",\"hasValidated\"]],\"ne2Password\"]],1],[\"text\",\"\\n                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"block\",[\"gh-task-button\"],null,[[\"class\",\"task\"],[\"gh-btn gh-btn-red button-change-password\",[\"get\",[\"user\",\"saveNewPassword\"]]]],0],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n                \"],[\"close-element\"],[\"text\",\"\\n            \"],[\"close-element\"],[\"text\",\" \"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-bio\"],[\"flush-element\"],[\"text\",\"Bio\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-textarea\"],[[\"get\",[\"user\",\"bio\"]]],[[\"id\",\"focusOut\",\"update\"],[\"user-bio\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"bio\"],[[\"target\"],[[\"get\",[\"user\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"user\",\"bio\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"bio\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"\\n                        Write about you, in 200 characters or less.\\n                        \"],[\"append\",[\"helper\",[\"gh-count-characters\"],[[\"get\",[\"user\",\"bio\"]]],null],false],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-twitter\"],[\"flush-element\"],[\"text\",\"Twitter Profile\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"input\",[]],[\"dynamic-attr\",\"value\",[\"unknown\",[\"user\",\"twitter\"]],null],[\"dynamic-attr\",\"oninput\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"_scratchTwitter\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[\"static-attr\",\"type\",\"url\"],[\"static-attr\",\"class\",\"gh-input\"],[\"static-attr\",\"id\",\"user-twitter\"],[\"static-attr\",\"name\",\"user[twitter]\"],[\"static-attr\",\"placeholder\",\"https://twitter.com/username\"],[\"static-attr\",\"autocorrect\",\"off\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"validateTwitterUrl\"],[[\"on\"],[\"focusOut\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"twitter\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"URL of your personal Twitter profile\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-facebook\"],[\"flush-element\"],[\"text\",\"Facebook Profile\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"open-element\",\"input\",[]],[\"dynamic-attr\",\"value\",[\"unknown\",[\"user\",\"facebook\"]],null],[\"dynamic-attr\",\"oninput\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"_scratchFacebook\"]]],null]],[[\"value\"],[\"target.value\"]]],null],[\"static-attr\",\"type\",\"url\"],[\"static-attr\",\"class\",\"gh-input\"],[\"static-attr\",\"id\",\"user-facebook\"],[\"static-attr\",\"name\",\"user[facebook]\"],[\"static-attr\",\"placeholder\",\"https://www.facebook.com/username\"],[\"static-attr\",\"autocorrect\",\"off\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"validateFacebookUrl\"],[[\"on\"],[\"focusOut\"]]],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"facebook\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"URL of your personal Facebook Profile\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-website\"],[\"flush-element\"],[\"text\",\"Website\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"user\",\"website\"]]],[[\"type\",\"id\",\"autocapitalize\",\"autocorrect\",\"autocomplete\",\"focusOut\",\"update\"],[\"url\",\"user-website\",\"off\",\"off\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"website\"],[[\"target\"],[[\"get\",[\"user\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"user\",\"website\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"website\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Have a website or blog other than this one? Link it!\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-location\"],[\"flush-element\"],[\"text\",\"Location\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"user\",\"location\"]]],[[\"type\",\"id\",\"focusOut\",\"update\"],[\"text\",\"user-location\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"location\"],[[\"target\"],[[\"get\",[\"user\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"user\",\"location\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"location\"]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Where in the world do you live?\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"div\",[]],[\"static-attr\",\"class\",\"form-group\"],[\"flush-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-role\"],[\"flush-element\"],[\"text\",\"Role\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"gh-select\"],[\"static-attr\",\"tabindex\",\"0\"],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"append\",[\"helper\",[\"one-way-select\"],null,[[\"id\",\"options\",\"optionValuePath\",\"optionLabelPath\",\"value\",\"update\"],[\"new-user-role\",[\"get\",[\"roles\"]],\"id\",\"name\",[\"get\",[\"model\",\"role\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"changeRole\"],null]]]],false],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"What permissions should this user have?\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"user\",\"email\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"user\",\"email\"]]],[[\"type\",\"id\",\"name\",\"placeholder\",\"autocapitalize\",\"autocorrect\",\"autocomplete\",\"focusOut\",\"update\"],[\"email\",\"user-email\",\"email\",\"Email Address\",\"off\",\"off\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"email\"],[[\"target\"],[[\"get\",[\"user\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"user\",\"email\"]]],null]],null]]]],false],[\"text\",\"\\n                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"email\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-email\"],[\"flush-element\"],[\"text\",\"Email\"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"unless\"],[[\"get\",[\"isAdminUserOnOwnerProfile\"]]],null,13,12],[\"text\",\"                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Used for notifications\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-slug\"],[\"flush-element\"],[\"text\",\"Slug\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"slugValue\"]]],[[\"class\",\"id\",\"name\",\"focusOut\",\"placeholder\",\"selectOnClick\",\"autocorrect\",\"update\"],[\"user-name\",\"user-slug\",\"user\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"perform\"],[[\"get\",[\"updateSlug\"]],[\"get\",[\"slugValue\"]]],null]],null],\"Slug\",\"true\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"slugValue\"]]],null]],null]]]],false],[\"text\",\"\\n                    \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"gh-blog-url\"]],false],[\"text\",\"/author/\"],[\"append\",[\"unknown\",[\"slugValue\"]],false],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"slug\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"p\",[]],[\"flush-element\"],[\"text\",\"Use your real name so people can recognise you\"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"helper\",[\"gh-error-message\"],null,[[\"errors\",\"property\"],[[\"get\",[\"user\",\"errors\"]],\"name\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                    \"],[\"open-element\",\"label\",[]],[\"static-attr\",\"for\",\"user-name\"],[\"flush-element\"],[\"text\",\"Full Name\"],[\"close-element\"],[\"text\",\"\\n                    \"],[\"append\",[\"helper\",[\"gh-input\"],[[\"get\",[\"user\",\"name\"]]],[[\"id\",\"class\",\"placeholder\",\"autocorrect\",\"focusOut\",\"update\"],[\"user-name\",\"user-name\",\"Full Name\",\"off\",[\"helper\",[\"action\"],[[\"get\",[null]],\"validate\",\"name\"],[[\"target\"],[[\"get\",[\"user\"]]]]],[\"helper\",[\"action\"],[[\"get\",[null]],[\"helper\",[\"mut\"],[[\"get\",[\"user\",\"name\"]]],null]],null]]]],false],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"user\",\"errors\",\"name\"]]],null,17,16]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"model\",\"imageProperty\",\"allowUrlInput\"],[[\"get\",[\"user\"]],\"image\",true]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleUploadImageModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"upload-image\"],[[\"model\",\"close\",\"modifier\"],[[\"helper\",[\"hash\"],null,[[\"model\",\"imageProperty\",\"allowUrlInput\"],[[\"get\",[\"user\"]],\"cover\",true]]],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleUploadCoverModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"Save\"],[\"close-element\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                                    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"delete-user\"],[[\"model\",\"confirm\",\"close\",\"modifier\"],[[\"get\",[\"user\"]],[\"helper\",[\"action\"],[[\"get\",[null]],\"deleteUser\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleDeleteUserModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n                                \"],[\"open-element\",\"button\",[]],[\"static-attr\",\"class\",\"delete\"],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleDeleteUserModal\"]],[\"flush-element\"],[\"text\",\"\\n                                    Delete User\\n                                \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showDeleteUserModal\"]]],null,22],[\"text\",\"                            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                                    \"],[\"append\",[\"helper\",[\"gh-fullscreen-modal\"],[\"transfer-owner\"],[[\"confirm\",\"close\",\"modifier\"],[[\"helper\",[\"action\"],[[\"get\",[null]],\"transferOwnership\"],null],[\"helper\",[\"action\"],[[\"get\",[null]],\"toggleTransferOwnerModal\"],null],\"action wide\"]]],false],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                            \"],[\"open-element\",\"li\",[]],[\"flush-element\"],[\"text\",\"\\n                                \"],[\"open-element\",\"button\",[]],[\"modifier\",[\"action\"],[[\"get\",[null]],\"toggleTransferOwnerModal\"]],[\"flush-element\"],[\"text\",\"\\n                                    Make Owner\\n                                \"],[\"close-element\"],[\"text\",\"\\n\"],[\"block\",[\"if\"],[[\"get\",[\"showTransferOwnerModal\"]]],null,24],[\"text\",\"                            \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"block\",[\"if\"],[[\"get\",[\"canMakeOwner\"]]],null,25],[\"block\",[\"if\"],[[\"get\",[\"deleteUserActionIsVisible\"]]],null,23]],\"locals\":[]},{\"statements\":[[\"text\",\"                        \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"text\",\"\\n                            \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-settings\"],[\"flush-element\"],[\"close-element\"],[\"text\",\"\\n                            \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"hidden\"],[\"flush-element\"],[\"text\",\"User Settings\"],[\"close-element\"],[\"text\",\"\\n                        \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"                \"],[\"open-element\",\"span\",[]],[\"static-attr\",\"class\",\"dropdown\"],[\"flush-element\"],[\"text\",\"\\n\"],[\"block\",[\"gh-dropdown-button\"],null,[[\"dropdownName\",\"classNames\",\"title\"],[\"user-actions-menu\",\"gh-btn gh-btn-default only-has-icon user-actions-cog\",\"User Actions\"]],27],[\"block\",[\"gh-dropdown\"],null,[[\"name\",\"tagName\",\"classNames\"],[\"user-actions-menu\",\"ul\",\"user-actions-menu dropdown-menu dropdown-triangle-top-right\"]],26],[\"text\",\"                \"],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]},{\"statements\":[[\"text\",\"Team\"]],\"locals\":[]},{\"statements\":[[\"text\",\"            \"],[\"block\",[\"link-to\"],[\"team\"],null,29],[\"text\",\"\\n            \"],[\"open-element\",\"i\",[]],[\"static-attr\",\"class\",\"icon-arrow-right\"],[\"flush-element\"],[\"close-element\"],[\"text\",\" \"],[\"open-element\",\"span\",[]],[\"flush-element\"],[\"append\",[\"unknown\",[\"user\",\"name\"]],false],[\"close-element\"],[\"text\",\"\\n\"]],\"locals\":[]}],\"hasPartials\":false}", "meta": { "moduleName": "ghost-admin/templates/team/user.hbs" } });
});
define('ghost-admin/tests/mirage/mirage/config.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/authentication.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/authentication.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/configuration.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/configuration.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/invites.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/invites.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/posts.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/posts.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/roles.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/roles.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/settings.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/settings.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/slugs.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/slugs.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/subscribers.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/subscribers.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/tags.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/tags.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/themes.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/themes.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/config/users.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/config/users.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/invite.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/invite.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/notification.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/notification.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/post.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/post.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/role.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/role.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/subscriber.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/subscriber.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/tag.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/tag.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/factories/user.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/factories/user.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/fixtures/configurations.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/fixtures/configurations.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/fixtures/roles.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/fixtures/roles.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/fixtures/settings.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/fixtures/settings.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/fixtures/timezones.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/fixtures/timezones.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/invite.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/invite.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/notification.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/notification.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/post.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/post.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/role.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/role.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/subscriber.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/subscriber.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/tag.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/tag.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/models/user.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/models/user.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/scenarios/default.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/scenarios/default.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/serializers/application.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/serializers/application.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/serializers/user.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/serializers/user.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define('ghost-admin/tests/mirage/mirage/utils.lint-test', ['exports'], function (exports) {
  describe('ESLint - mirage/utils.js', function () {
    it('should pass ESLint', function () {
      // precompiled test passed
    });
  });
});
define("ghost-admin/tests/mirage/template-deprecations-test", ["exports"], function (exports) {});
define('ghost-admin/torii-providers/ghost-oauth2', ['exports', 'torii/providers/oauth2-code', 'ember-service/inject', 'ember-computed', 'ghost-admin/utils/ghost-paths'], function (exports, _toriiProvidersOauth2Code, _emberServiceInject, _emberComputed, _ghostAdminUtilsGhostPaths) {

    var GhostOauth2 = _toriiProvidersOauth2Code['default'].extend({

        config: (0, _emberServiceInject['default'])(),

        name: 'ghost-oauth2',
        baseUrl: (0, _emberComputed['default'])(function () {
            return this.get('config.ghostAuthUrl') + '/oauth2/authorize/';
        }),
        apiKey: (0, _emberComputed['default'])(function () {
            return this.get('config.ghostAuthId');
        }),

        optionalUrlParams: ['type', 'email'],

        responseParams: ['code'],

        // we want to redirect to the ghost admin app by default
        init: function init() {
            this._super.apply(this, arguments);
            var adminPath = (0, _ghostAdminUtilsGhostPaths['default'])().adminRoot;
            var redirectUri = window.location.protocol + '//' + window.location.host;

            redirectUri += adminPath;

            this.set('redirectUri', redirectUri);
        },

        open: function open(options) {
            if (options.type) {
                this.set('type', options.type);
            }
            if (options.email) {
                this.set('email', options.email);
            }
            return this._super.apply(this, arguments);
        }
    });

    exports['default'] = GhostOauth2;
});
define('ghost-admin/transforms/facebook-url-user', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                var _serialized$match = serialized.match(/(\S+)/);

                var _serialized$match2 = _slicedToArray(_serialized$match, 2);

                var user = _serialized$match2[1];

                return 'https://www.facebook.com/' + user;
            }
            return serialized;
        },

        serialize: function serialize(deserialized) {
            if (deserialized) {
                var _deserialized$match = deserialized.match(/(?:https:\/\/)(?:www\.)(?:facebook\.com)\/(?:#!\/)?(\w+\/?\S+)/mi);

                var _deserialized$match2 = _slicedToArray(_deserialized$match, 2);

                var user = _deserialized$match2[1];

                return user;
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/json-string', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialised) {
            return JSON.parse(serialised);
        },
        serialize: function serialize(deserialised) {
            return deserialised ? JSON.stringify(deserialised) : null;
        }
    });
});
define('ghost-admin/transforms/moment-date', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                return moment(serialized);
            }
            return serialized;
        },

        serialize: function serialize(deserialized) {
            if (deserialized) {
                return moment(deserialized).toDate();
            }
            return deserialized;
        }
    });
});
/* global moment */
define('ghost-admin/transforms/moment-utc', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                return moment.utc(serialized);
            }
            return serialized;
        },

        serialize: function serialize(deserialized) {
            if (deserialized) {
                try {
                    return deserialized.toJSON();
                } catch (e) {
                    return deserialized;
                }
            }
            return deserialized;
        }
    });
});
/* global moment */
define('ghost-admin/transforms/navigation-settings', ['exports', 'ember-array/utils', 'ember-data/transform', 'ghost-admin/models/navigation-item'], function (exports, _emberArrayUtils, _emberDataTransform, _ghostAdminModelsNavigationItem) {
    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            var navItems = undefined,
                settingsArray = undefined;

            try {
                settingsArray = JSON.parse(serialized) || [];
            } catch (e) {
                settingsArray = [];
            }

            navItems = settingsArray.map(function (itemDetails) {
                return _ghostAdminModelsNavigationItem['default'].create(itemDetails);
            });

            return (0, _emberArrayUtils.A)(navItems);
        },

        serialize: function serialize(deserialized) {
            var settingsArray = undefined;

            if ((0, _emberArrayUtils.isEmberArray)(deserialized)) {
                settingsArray = deserialized.map(function (item) {
                    var label = item.get('label').trim();
                    var url = item.get('url').trim();

                    return { label: label, url: url };
                }).compact();
            } else {
                settingsArray = [];
            }

            return JSON.stringify(settingsArray);
        }
    });
});
define('ghost-admin/transforms/raw', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            return serialized;
        },

        serialize: function serialize(deserialized) {
            return deserialized;
        }
    });
});
define('ghost-admin/transforms/slack-settings', ['exports', 'ember-array/utils', 'ember-data/transform', 'ghost-admin/models/slack-integration'], function (exports, _emberArrayUtils, _emberDataTransform, _ghostAdminModelsSlackIntegration) {
    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            var slackObj = undefined,
                settingsArray = undefined;
            try {
                settingsArray = JSON.parse(serialized) || [];
            } catch (e) {
                settingsArray = [];
            }

            slackObj = settingsArray.map(function (itemDetails) {
                return _ghostAdminModelsSlackIntegration['default'].create(itemDetails);
            });
            return (0, _emberArrayUtils.A)(slackObj);
        },

        serialize: function serialize(deserialized) {
            var settingsArray = undefined;
            if ((0, _emberArrayUtils.isEmberArray)(deserialized)) {
                settingsArray = deserialized.map(function (item) {
                    var url = (item.get('url') || '').trim();

                    return { url: url };
                }).compact();
            } else {
                settingsArray = [];
            }
            return JSON.stringify(settingsArray);
        }
    });
});
/* eslint-disable camelcase */
define('ghost-admin/transforms/twitter-url-user', ['exports', 'ember-data/transform'], function (exports, _emberDataTransform) {
    var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

    exports['default'] = _emberDataTransform['default'].extend({
        deserialize: function deserialize(serialized) {
            if (serialized) {
                var _serialized$match = serialized.match(/@?([^\/]*)/);

                var _serialized$match2 = _slicedToArray(_serialized$match, 2);

                var user = _serialized$match2[1];

                return 'https://twitter.com/' + user;
            }
            return serialized;
        },

        serialize: function serialize(deserialized) {
            if (deserialized) {
                var _deserialized$match = deserialized.match(/(?:https:\/\/)(?:twitter\.com)\/(?:#!\/)?@?([^\/]*)/);

                var _deserialized$match2 = _slicedToArray(_deserialized$match, 2);

                var user = _deserialized$match2[1];

                return '@' + user;
            }
            return deserialized;
        }
    });
});
define('ghost-admin/transitions', ['exports'], function (exports) {
    exports['default'] = function () {
        this.transition(this.hasClass('fullscreen-modal-container'), this.toValue(true), this.use('fade', { duration: 150 }), this.reverse('explode', {
            pick: '.fullscreen-modal',
            use: ['fade', { duration: 80 }]
        }, {
            use: ['fade', { duration: 150 }]
        }));

        this.transition(this.hasClass('fade-transition'), this.use('crossFade', { duration: 100 }));
    };
});
define('ghost-admin/transitions/cross-fade', ['exports', 'liquid-fire/transitions/cross-fade'], function (exports, _liquidFireTransitionsCrossFade) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsCrossFade['default'];
    }
  });
});
define('ghost-admin/transitions/default', ['exports', 'liquid-fire/transitions/default'], function (exports, _liquidFireTransitionsDefault) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsDefault['default'];
    }
  });
});
define('ghost-admin/transitions/explode', ['exports', 'liquid-fire/transitions/explode'], function (exports, _liquidFireTransitionsExplode) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsExplode['default'];
    }
  });
});
define('ghost-admin/transitions/fade', ['exports', 'liquid-fire/transitions/fade'], function (exports, _liquidFireTransitionsFade) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsFade['default'];
    }
  });
});
define('ghost-admin/transitions/flex-grow', ['exports', 'liquid-fire/transitions/flex-grow'], function (exports, _liquidFireTransitionsFlexGrow) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsFlexGrow['default'];
    }
  });
});
define('ghost-admin/transitions/fly-to', ['exports', 'liquid-fire/transitions/fly-to'], function (exports, _liquidFireTransitionsFlyTo) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsFlyTo['default'];
    }
  });
});
define('ghost-admin/transitions/move-over', ['exports', 'liquid-fire/transitions/move-over'], function (exports, _liquidFireTransitionsMoveOver) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsMoveOver['default'];
    }
  });
});
define('ghost-admin/transitions/scale', ['exports', 'liquid-fire/transitions/scale'], function (exports, _liquidFireTransitionsScale) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsScale['default'];
    }
  });
});
define('ghost-admin/transitions/scroll-then', ['exports', 'liquid-fire/transitions/scroll-then'], function (exports, _liquidFireTransitionsScrollThen) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsScrollThen['default'];
    }
  });
});
define('ghost-admin/transitions/to-down', ['exports', 'liquid-fire/transitions/to-down'], function (exports, _liquidFireTransitionsToDown) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsToDown['default'];
    }
  });
});
define('ghost-admin/transitions/to-left', ['exports', 'liquid-fire/transitions/to-left'], function (exports, _liquidFireTransitionsToLeft) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsToLeft['default'];
    }
  });
});
define('ghost-admin/transitions/to-right', ['exports', 'liquid-fire/transitions/to-right'], function (exports, _liquidFireTransitionsToRight) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsToRight['default'];
    }
  });
});
define('ghost-admin/transitions/to-up', ['exports', 'liquid-fire/transitions/to-up'], function (exports, _liquidFireTransitionsToUp) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsToUp['default'];
    }
  });
});
define('ghost-admin/transitions/wait', ['exports', 'liquid-fire/transitions/wait'], function (exports, _liquidFireTransitionsWait) {
  Object.defineProperty(exports, 'default', {
    enumerable: true,
    get: function get() {
      return _liquidFireTransitionsWait['default'];
    }
  });
});
define('ghost-admin/transitions/wormhole', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = wormhole;

  function wormhole(_ref) {
    var _this = this;

    var use = _ref.use;

    var oldWormholeElement = undefined,
        newWormholeElement = undefined;

    if (this.oldElement) {
      oldWormholeElement = this.oldElement.find('.liquid-wormhole-element:last-child');

      this.oldElement = null;

      if (oldWormholeElement.length > 0) {
        var newChild = oldWormholeElement.clone();
        newChild.addClass('liquid-wormhole-temp-element');

        oldWormholeElement.css({ visibility: 'hidden' });

        var offset = oldWormholeElement.offset();

        newChild.css({
          position: 'absolute',
          top: offset.top,
          left: offset.left,
          bottom: '',
          right: '',
          margin: '0px',
          transform: ''
        });

        newChild.appendTo(oldWormholeElement.parent());
        this.oldElement = newChild;
      }
    }

    if (this.newElement) {
      newWormholeElement = this.newElement.find('.liquid-wormhole-element:last-child');

      this.newElement = null;

      if (newWormholeElement.length > 0) {
        var newChild = newWormholeElement.clone();

        newWormholeElement.css({ visibility: 'hidden' });

        var offset = newWormholeElement.offset();

        newChild.css({
          position: 'absolute',
          top: offset.top,
          left: offset.left,
          bottom: '',
          right: '',
          margin: '0px',
          transform: ''
        });

        newChild.appendTo(newWormholeElement.parent());
        this.newElement = newChild;
      }
    }

    var animation;
    if (typeof use.handler === 'function') {
      animation = use.handler;
    } else {
      animation = context.lookup(use.name);
    }

    return animation.apply(this, use.args)['finally'](function () {
      if (_this.oldElement && oldWormholeElement) {
        _this.oldElement.remove();
        oldWormholeElement.css({ visibility: 'visible' });
      }
      if (_this.newElement && newWormholeElement) {
        _this.newElement.remove();
        newWormholeElement.css({ visibility: 'visible' });
      }
    });
  }

  ;
});
define('ghost-admin/utils/bound-one-way', ['exports', 'ember-computed'], function (exports, _emberComputed) {

    /**
     * Defines a property similarly to `Ember.computed.oneway`,
     * save that while a `oneway` loses its binding upon being set,
     * the `BoundOneWay` will continue to listen for upstream changes.
     *
     * This is an ideal tool for working with values inside of {{input}}
     * elements.
     * @param {*} upstream
     * @param {function} transform a function to transform the **upstream** value.
     */

    exports['default'] = function (upstream, transform) {
        if (typeof transform !== 'function') {
            // default to the identity function
            transform = function (value) {
                return value;
            };
        }

        return (0, _emberComputed['default'])(upstream, {
            get: function get() {
                return transform(this.get(upstream));
            },
            set: function set(key, value) {
                return value;
            }
        });
    };
});
define('ghost-admin/utils/caja-sanitizers', ['exports'], function (exports) {
    /**
     * google-caja uses url() and id() to verify if the values are allowed.
     */
    /**
     * Check if URL is allowed
     * URLs are allowed if they start with http://, https://, or /.
     */
    var url = function url(_url) {
        _url = _url.toString().replace(/['"]+/g, '');
        if (/^https?:\/\//.test(_url) || /^\//.test(_url)) {
            return _url;
        }
    };

    /**
     * Check if ID is allowed
     * All ids are allowed at the moment.
     */
    var id = function id(_id) {
        return _id;
    };

    exports['default'] = {
        url: url,
        id: id
    };
});
define('ghost-admin/utils/ctrl-or-cmd', ['exports'], function (exports) {
  exports['default'] = navigator.userAgent.indexOf('Mac') !== -1 ? 'command' : 'ctrl';
});
define('ghost-admin/utils/date-formatting', ['exports'], function (exports) {
    var parseDateFormats = ['DD MMM YY @ HH:mm', 'DD MMM YY HH:mm', 'D MMM YY @ HH:mm', 'D MMM YY HH:mm', 'DD MMM YYYY @ HH:mm', 'DD MMM YYYY HH:mm', 'D MMM YYYY @ HH:mm', 'D MMM YYYY HH:mm', 'DD/MM/YY @ HH:mm', 'DD/MM/YY HH:mm', 'DD/MM/YYYY @ HH:mm', 'DD/MM/YYYY HH:mm', 'DD-MM-YY @ HH:mm', 'DD-MM-YY HH:mm', 'DD-MM-YYYY @ HH:mm', 'DD-MM-YYYY HH:mm', 'YYYY-MM-DD @ HH:mm', 'YYYY-MM-DD HH:mm', 'DD MMM @ HH:mm', 'DD MMM HH:mm', 'D MMM @ HH:mm', 'D MMM HH:mm'];

    var displayDateFormat = 'DD MMM YY @ HH:mm';

    // Add missing timestamps
    function verifyTimeStamp(dateString) {
        if (dateString && !dateString.slice(-5).match(/\d+:\d\d/)) {
            dateString += ' 12:00';
        }
        return dateString;
    }

    // Parses a string to a Moment
    function parseDateString(value, timezone) {
        // We need the timezone here, otherwise the date will be parsed
        // in UTC timezone
        moment.tz.setDefault(timezone);

        return value ? moment(verifyTimeStamp(value), parseDateFormats, true) : undefined;
    }

    // Formats a Date or Moment
    function formatDate(value, timezone) {
        // we output the date adjusted to the blog timezone selected in settings
        return verifyTimeStamp(value ? moment(value).tz(timezone).format(displayDateFormat) : '');
    }

    exports.parseDateString = parseDateString;
    exports.formatDate = formatDate;
});
define('ghost-admin/utils/document-title', ['exports', 'ember-route', 'ember-router', 'ember-array/utils', 'ember-evented/on'], function (exports, _emberRoute, _emberRouter, _emberArrayUtils, _emberEventedOn) {
    function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

    exports['default'] = function () {
        _emberRoute['default'].reopen({
            // `titleToken` can either be a static string or a function
            // that accepts a model object and returns a string (or array
            // of strings if there are multiple tokens).
            titleToken: null,

            // `title` can either be a static string or a function
            // that accepts an array of tokens and returns a string
            // that will be the document title. The `collectTitleTokens` action
            // stops bubbling once a route is encountered that has a `title`
            // defined.
            title: null,

            actions: {
                collectTitleTokens: function collectTitleTokens(tokens) {
                    var titleToken = this.titleToken;

                    var finalTitle = undefined;

                    if (typeof this.titleToken === 'function') {
                        titleToken = this.titleToken(this.currentModel);
                    }

                    if ((0, _emberArrayUtils.isEmberArray)(titleToken)) {
                        tokens.unshift.apply(tokens, _toConsumableArray(titleToken));
                    } else if (titleToken) {
                        tokens.unshift(titleToken);
                    }

                    if (this.title) {
                        if (typeof this.title === 'function') {
                            finalTitle = this.title(tokens);
                        } else {
                            finalTitle = this.title;
                        }

                        this.router.setTitle(finalTitle);
                    } else {
                        return true;
                    }
                }
            }
        });

        _emberRouter['default'].reopen({
            updateTitle: (0, _emberEventedOn['default'])('didTransition', function () {
                this.send('collectTitleTokens', []);
            }),

            setTitle: function setTitle(title) {
                window.document.title = title;
            }
        });
    };
});
define('ghost-admin/utils/ed-image-manager', ['exports'], function (exports) {
    var imageMarkdownRegex = /^!(?:\[([^\n\]]*)\])(?:\(([^\n\]]*)\))?$/gim;

    // Process the markdown content and find all of the locations where there is an image markdown block
    function parse(stringToParse) {
        var images = [];
        var m = undefined;

        while ((m = imageMarkdownRegex.exec(stringToParse)) !== null) {
            images.push(m);
        }

        return images;
    }

    // Figure out the start and end of the selection range for the src in the markdown, so we know what to replace
    function getSrcRange(content, index) {
        var images = parse(content);
        var replacement = {};

        if (index > -1) {
            // [1] matches the alt text, and 2 matches the url between the ()
            // if the () are missing entirely, which is valid, [2] will be undefined and we'll need to treat this case
            // a little differently
            if (images[index][2] === undefined) {
                replacement.needsParens = true;
                replacement.start = content.indexOf(']', images[index].index) + 1;
                replacement.end = replacement.start;
            } else {
                replacement.start = content.indexOf('(', images[index].index) + 1;
                replacement.end = replacement.start + images[index][2].length;
            }
            return replacement;
        }

        return false;
    }

    exports['default'] = {
        getSrcRange: getSrcRange
    };
});
define('ghost-admin/utils/editor-shortcuts', ['exports', 'ghost-admin/utils/ctrl-or-cmd'], function (exports, _ghostAdminUtilsCtrlOrCmd) {

  var shortcuts = {};

  // Markdown Shortcuts

  // Text
  shortcuts['ctrl+alt+u'] = { action: 'editorShortcut', options: { type: 'strike' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+b'] = { action: 'editorShortcut', options: { type: 'bold' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+i'] = { action: 'editorShortcut', options: { type: 'italic' } };

  shortcuts['ctrl+u'] = { action: 'editorShortcut', options: { type: 'uppercase' } };
  shortcuts['ctrl+shift+u'] = { action: 'editorShortcut', options: { type: 'lowercase' } };
  shortcuts['ctrl+alt+shift+u'] = { action: 'editorShortcut', options: { type: 'titlecase' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+shift+c'] = { action: 'editorShortcut', options: { type: 'copyHTML' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+h'] = { action: 'editorShortcut', options: { type: 'cycleHeaderLevel' } };

  // Formatting
  shortcuts['ctrl+q'] = { action: 'editorShortcut', options: { type: 'blockquote' } };
  shortcuts['ctrl+l'] = { action: 'editorShortcut', options: { type: 'list' } };

  // Insert content
  shortcuts['ctrl+shift+1'] = { action: 'editorShortcut', options: { type: 'currentDate' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+k'] = { action: 'editorShortcut', options: { type: 'link' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+shift+i'] = { action: 'editorShortcut', options: { type: 'image' } };
  shortcuts[_ghostAdminUtilsCtrlOrCmd['default'] + '+shift+k'] = { action: 'editorShortcut', options: { type: 'code' } };

  exports['default'] = shortcuts;
});
// # Editor shortcuts
// Loaded by gh-editor component
// This map is used to ensure the right action is called by each shortcut
define('ghost-admin/utils/ghost-paths', ['exports'], function (exports) {
    var _slice = Array.prototype.slice;
    var makeRoute = function makeRoute(root, args) {
        var slashAtStart = /^\//;
        var slashAtEnd = /\/$/;
        var parts = Array.prototype.slice.call(args, 0);
        var route = root.replace(slashAtEnd, '');

        parts.forEach(function (part) {
            if (part) {
                route = [route, part.replace(slashAtStart, '').replace(slashAtEnd, '')].join('/');
            }
        });

        return route += '/';
    };

    exports['default'] = function () {
        var path = window.location.pathname;
        var subdir = path.substr(0, path.search('/ghost/'));
        var adminRoot = subdir + '/ghost/';
        var assetRoot = subdir + '/ghost/assets/';
        var apiRoot = subdir + '/ghost/api/v0.1';

        function assetUrl(src) {
            return subdir + src;
        }

        return {
            adminRoot: adminRoot,
            assetRoot: assetRoot,
            apiRoot: apiRoot,
            subdir: subdir,
            blogRoot: subdir + '/',
            count: 'https://count.ghost.org/',

            url: {
                admin: function admin() {
                    return makeRoute(adminRoot, arguments);
                },

                api: function api() {
                    return makeRoute(apiRoot, arguments);
                },

                join: function join() {
                    if (arguments.length > 1) {
                        return makeRoute(arguments[0], Array.prototype.slice.call(arguments, 1));
                    } else if (arguments.length === 1) {
                        var _arguments = _slice.call(arguments);

                        var arg = _arguments[0];

                        return arg.slice(-1) === '/' ? arg : arg + '/';
                    }
                    return '/';
                },

                asset: assetUrl
            }
        };
    };
});
define("ghost-admin/utils/isFinite", ["exports"], function (exports) {
    /* globals window */

    // isFinite function from lodash

    exports["default"] = function (value) {
        return window.isFinite(value) && !window.isNaN(parseFloat(value));
    };
});
define('ghost-admin/utils/isNumber', ['exports'], function (exports) {
  // isNumber function from lodash

  var toString = Object.prototype.toString;

  exports['default'] = function (value) {
    return typeof value === 'number' || value && typeof value === 'object' && toString.call(value) === '[object Number]' || false;
  };
});
define('ghost-admin/utils/link-component', ['exports', 'ember', 'ember-computed', 'ember-invoke-action'], function (exports, _ember, _emberComputed, _emberInvokeAction) {
    var LinkComponent = _ember['default'].LinkComponent;

    LinkComponent.reopen({
        active: (0, _emberComputed['default'])('attrs.params', '_routing.currentState', function () {
            var isActive = this._super.apply(this, arguments);

            if (typeof this.get('alternateActive') === 'function') {
                (0, _emberInvokeAction.invokeAction)(this, 'alternateActive', isActive);
            }

            return isActive;
        }),

        activeClass: (0, _emberComputed['default'])('tagName', function () {
            return this.get('tagName') === 'button' ? '' : 'active';
        })
    });
});
define("ghost-admin/utils/random-password", ["exports"], function (exports) {
    /* global generatePassword */

    exports["default"] = function () {
        var word = generatePassword(6);
        var randomN = Math.floor(Math.random() * 1000);

        return word + randomN;
    };
});
define('ghost-admin/utils/route', ['exports', 'ember-route'], function (exports, _emberRoute) {

    _emberRoute['default'].reopen({
        actions: {
            willTransition: function willTransition(transition) {
                if (this.get('upgradeStatus.isRequired')) {
                    transition.abort();
                    this.get('upgradeStatus').requireUpgrade();
                    return false;
                } else {
                    this._super.apply(this, arguments);
                }
            }
        }
    });
});
define('ghost-admin/utils/text-field', ['exports', 'ember-components/text-field'], function (exports, _emberComponentsTextField) {

    _emberComponentsTextField['default'].reopen({
        attributeBindings: ['autofocus']
    });
});
define('ghost-admin/utils/titleize', ['exports', 'ember-string'], function (exports, _emberString) {
    var lowerWords = ['of', 'a', 'the', 'and', 'an', 'or', 'nor', 'but', 'is', 'if', 'then', 'else', 'when', 'at', 'from', 'by', 'on', 'off', 'for', 'in', 'out', 'over', 'to', 'into', 'with'];

    exports['default'] = function (input) {
        var words = input.split(' ').map(function (word, index) {
            if (index === 0 || lowerWords.indexOf(word) === -1) {
                word = (0, _emberString.capitalize)(word);
            }

            return word;
        });

        return words.join(' ');
    };
});
define('ghost-admin/utils/validator-extensions', ['exports', 'ember-utils'], function (exports, _emberUtils) {

    function init() {
        // Provide a few custom validators
        //
        validator.extend('empty', function (str) {
            return (0, _emberUtils.isBlank)(str);
        });

        validator.extend('notContains', function (str, badString) {
            return str.indexOf(badString) === -1;
        });
    }

    exports['default'] = {
        init: init
    };
});
define("ghost-admin/utils/window-proxy", ["exports"], function (exports) {
    exports["default"] = {
        changeLocation: function changeLocation(url) {
            window.location = url;
        },

        replaceLocation: function replaceLocation(url) {
            window.location.replace(url);
        }
    };
});
define('ghost-admin/utils/word-count', ['exports'], function (exports) {
    /* eslint-disable */

    exports['default'] = function (s) {
        // replaces previous XRegExp("[^\\s\\d\\p{L}]", 'g') that was causing
        // issues when browsers added more es6 support and was a 63KB minified
        // dependency whereas this is ~8KB
        // unicode list taken from https://github.com/slevithan/xregexp/blob/master/src/addons/unicode-categories.js
        var nonANumLetters = new RegExp('[^\\s\\dA-Za-zªµºÀ-ÖØ-öø-ˁˆ-ˑˠ-ˤˬˮͰ-ʹͶͷͺ-ͽͿΆΈ-ΊΌΎ-ΡΣ-ϵϷ-ҁҊ-ԯԱ-Ֆՙա-ևא-תװ-ײؠ-يٮٯٱ-ۓەۥۦۮۯۺ-ۼۿܐܒ-ܯݍ-ޥޱߊ-ߪߴߵߺࠀ-ࠕࠚࠤࠨࡀ-ࡘࢠ-ࢴऄ-हऽॐक़-ॡॱ-ঀঅ-ঌএঐও-নপ-রলশ-হঽৎড়ঢ়য়-ৡৰৱਅ-ਊਏਐਓ-ਨਪ-ਰਲਲ਼ਵਸ਼ਸਹਖ਼-ੜਫ਼ੲ-ੴઅ-ઍએ-ઑઓ-નપ-રલળવ-હઽૐૠૡૹଅ-ଌଏଐଓ-ନପ-ରଲଳଵ-ହଽଡ଼ଢ଼ୟ-ୡୱஃஅ-ஊஎ-ஐஒ-கஙசஜஞடணதந-பம-ஹௐఅ-ఌఎ-ఐఒ-నప-హఽౘ-ౚౠౡಅ-ಌಎ-ಐಒ-ನಪ-ಳವ-ಹಽೞೠೡೱೲഅ-ഌഎ-ഐഒ-ഺഽൎൟ-ൡൺ-ൿඅ-ඖක-නඳ-රලව-ෆก-ะาำเ-ๆກຂຄງຈຊຍດ-ທນ-ຟມ-ຣລວສຫອ-ະາຳຽເ-ໄໆໜ-ໟༀཀ-ཇཉ-ཬྈ-ྌက-ဪဿၐ-ၕၚ-ၝၡၥၦၮ-ၰၵ-ႁႎႠ-ჅჇჍა-ჺჼ-ቈቊ-ቍቐ-ቖቘቚ-ቝበ-ኈኊ-ኍነ-ኰኲ-ኵኸ-ኾዀዂ-ዅወ-ዖዘ-ጐጒ-ጕጘ-ፚᎀ-ᎏᎠ-Ᏽᏸ-ᏽᐁ-ᙬᙯ-ᙿᚁ-ᚚᚠ-ᛪᛱ-ᛸᜀ-ᜌᜎ-ᜑᜠ-ᜱᝀ-ᝑᝠ-ᝬᝮ-ᝰក-ឳៗៜᠠ-ᡷᢀ-ᢨᢪᢰ-ᣵᤀ-ᤞᥐ-ᥭᥰ-ᥴᦀ-ᦫᦰ-ᧉᨀ-ᨖᨠ-ᩔᪧᬅ-ᬳᭅ-ᭋᮃ-ᮠᮮᮯᮺ-ᯥᰀ-ᰣᱍ-ᱏᱚ-ᱽᳩ-ᳬᳮ-ᳱᳵᳶᴀ-ᶿḀ-ἕἘ-Ἕἠ-ὅὈ-Ὅὐ-ὗὙὛὝὟ-ώᾀ-ᾴᾶ-ᾼιῂ-ῄῆ-ῌῐ-ΐῖ-Ίῠ-Ῥῲ-ῴῶ-ῼⁱⁿₐ-ₜℂℇℊ-ℓℕℙ-ℝℤΩℨK-ℭℯ-ℹℼ-ℿⅅ-ⅉⅎↃↄⰀ-Ⱞⰰ-ⱞⱠ-ⳤⳫ-ⳮⳲⳳⴀ-ⴥⴧⴭⴰ-ⵧⵯⶀ-ⶖⶠ-ⶦⶨ-ⶮⶰ-ⶶⶸ-ⶾⷀ-ⷆⷈ-ⷎⷐ-ⷖⷘ-ⷞⸯ々〆〱-〵〻〼ぁ-ゖゝ-ゟァ-ヺー-ヿㄅ-ㄭㄱ-ㆎㆠ-ㆺㇰ-ㇿ㐀-䶵一-鿕ꀀ-ꒌꓐ-ꓽꔀ-ꘌꘐ-ꘟꘪꘫꙀ-ꙮꙿ-ꚝꚠ-ꛥꜗ-ꜟꜢ-ꞈꞋ-ꞭꞰ-ꞷꟷ-ꠁꠃ-ꠅꠇ-ꠊꠌ-ꠢꡀ-ꡳꢂ-ꢳꣲ-ꣷꣻꣽꤊ-ꤥꤰ-ꥆꥠ-ꥼꦄ-ꦲꧏꧠ-ꧤꧦ-ꧯꧺ-ꧾꨀ-ꨨꩀ-ꩂꩄ-ꩋꩠ-ꩶꩺꩾ-ꪯꪱꪵꪶꪹ-ꪽꫀꫂꫛ-ꫝꫠ-ꫪꫲ-ꫴꬁ-ꬆꬉ-ꬎꬑ-ꬖꬠ-ꬦꬨ-ꬮꬰ-ꭚꭜ-ꭥꭰ-ꯢ가-힣ힰ-ퟆퟋ-ퟻ豈-舘並-龎ﬀ-ﬆﬓ-ﬗיִײַ-ﬨשׁ-זּטּ-לּמּנּסּףּפּצּ-ﮱﯓ-ﴽﵐ-ﶏﶒ-ﷇﷰ-ﷻﹰ-ﹴﹶ-ﻼＡ-Ｚａ-ｚｦ-ﾾￂ-ￇￊ-ￏￒ-ￗￚ-ￜ]', 'g');

        s = s.replace(/<(.|\n)*?>/g, ' '); // strip tags
        s = s.replace(nonANumLetters, ''); // ignore non-alphanumeric letters
        s = s.replace(/(^\s*)|(\s*$)/gi, ''); // exclude starting and ending white-space
        s = s.replace(/\n /gi, ' '); // convert newlines to spaces
        s = s.replace(/\n+/gi, ' ');
        s = s.replace(/[ ]{2,}/gi, ' '); // convert 2 or more spaces to 1

        return s.split(' ').length;
    };
});
define('ghost-admin/validators/base', ['exports', 'ember-object'], function (exports, _emberObject) {

    /**
     * Base validator that all validators should extend
     * Handles checking of individual properties or the entire model
     */
    exports['default'] = _emberObject['default'].extend({
        properties: [],
        passed: false,

        /**
         * When passed a model and (optionally) a property name,
         * checks it against a list of validation functions
         * @param  {Ember.Object} model Model to validate
         * @param  {string} prop  Property name to check
         * @return {boolean}      True if the model passed all (or one) validation(s),
         *                        false if not
         */
        check: function check(model, prop) {
            var _this = this;

            this.set('passed', true);

            if (prop && this[prop]) {
                this[prop](model);
            } else {
                this.get('properties').forEach(function (property) {
                    if (_this[property]) {
                        _this[property](model);
                    }
                });
            }
            return this.get('passed');
        },

        invalidate: function invalidate() {
            this.set('passed', false);
        }
    });
});
define('ghost-admin/validators/invite-user', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['email'],

        email: function email(model) {
            var email = model.get('email');

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/nav-item', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['label', 'url'],

        label: function label(model) {
            var label = model.get('label');
            var hasValidated = model.get('hasValidated');

            if (validator.empty(label)) {
                model.get('errors').add('label', 'You must specify a label');
                this.invalidate();
            }

            hasValidated.addObject('label');
        },

        url: function url(model) {
            var url = model.get('url');
            var hasValidated = model.get('hasValidated');
            /* eslint-disable camelcase */
            var validatorOptions = { require_protocol: true };
            /* eslint-enable camelcase */
            var urlRegex = new RegExp(/^(\/|#|[a-zA-Z0-9\-]+:)/);

            if (validator.empty(url)) {
                model.get('errors').add('url', 'You must specify a URL or relative path');
                this.invalidate();
            } else if (url.match(/\s/) || !validator.isURL(url, validatorOptions) && !url.match(urlRegex)) {
                model.get('errors').add('url', 'You must specify a valid URL or relative path');
                this.invalidate();
            }

            hasValidated.addObject('url');
        }
    });
});
define('ghost-admin/validators/new-user', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].extend({
        properties: ['name', 'email', 'password'],

        name: function name(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var name = model.get('name');

            if (!usingOAuth && !validator.isLength(name, 1)) {
                model.get('errors').add('name', 'Please enter a name.');
                this.invalidate();
            }
        },

        email: function email(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var email = model.get('email');

            if (usingOAuth) {
                return;
            }

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid Email.');
                this.invalidate();
            }
        },

        password: function password(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var password = model.get('password');

            if (!usingOAuth && !validator.isLength(password, 8)) {
                model.get('errors').add('password', 'Password must be at least 8 characters long');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/post', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['title', 'metaTitle', 'metaDescription'],

        title: function title(model) {
            var title = model.get('title');

            if (validator.empty(title)) {
                model.get('errors').add('title', 'You must specify a title for the post.');
                this.invalidate();
            }

            if (!validator.isLength(title, 0, 150)) {
                model.get('errors').add('title', 'Title cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        metaTitle: function metaTitle(model) {
            var metaTitle = model.get('metaTitle');

            if (!validator.isLength(metaTitle, 0, 150)) {
                model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        metaDescription: function metaDescription(model) {
            var metaDescription = model.get('metaDescription');

            if (!validator.isLength(metaDescription, 0, 200)) {
                model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/reset', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['newPassword'],

        newPassword: function newPassword(model) {
            var p1 = model.get('newPassword');
            var p2 = model.get('ne2Password');

            if (validator.empty(p1)) {
                model.get('errors').add('newPassword', 'Please enter a password.');
                this.invalidate();
            } else if (!validator.isLength(p1, 8)) {
                model.get('errors').add('newPassword', 'The password is not long enough.');
                this.invalidate();
            } else if (!validator.equals(p1, p2)) {
                model.get('errors').add('ne2Password', 'The two new passwords don\'t match.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/setting', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['title', 'description', 'password', 'postsPerPage'],
        title: function title(model) {
            var title = model.get('title');

            if (!validator.isLength(title, 0, 150)) {
                model.get('errors').add('title', 'Title is too long');
                this.invalidate();
            }
        },

        description: function description(model) {
            var desc = model.get('description');

            if (!validator.isLength(desc, 0, 200)) {
                model.get('errors').add('description', 'Description is too long');
                this.invalidate();
            }
        },

        password: function password(model) {
            var isPrivate = model.get('isPrivate');
            var password = model.get('password');

            if (isPrivate && password === '') {
                model.get('errors').add('password', 'Password must be supplied');
                this.invalidate();
            }
        },

        postsPerPage: function postsPerPage(model) {
            var postsPerPage = model.get('postsPerPage');

            if (!validator.isInt(postsPerPage)) {
                model.get('errors').add('postsPerPage', 'Posts per page must be a number');
                this.invalidate();
            } else if (postsPerPage > 1000) {
                model.get('errors').add('postsPerPage', 'The maximum number of posts per page is 1000');
                this.invalidate();
            } else if (postsPerPage < 1) {
                model.get('errors').add('postsPerPage', 'The minimum number of posts per page is 1');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/setup', ['exports', 'ghost-admin/validators/new-user'], function (exports, _ghostAdminValidatorsNewUser) {
    exports['default'] = _ghostAdminValidatorsNewUser['default'].create({
        properties: ['name', 'email', 'password', 'blogTitle', 'session'],

        blogTitle: function blogTitle(model) {
            var blogTitle = model.get('blogTitle');

            if (!validator.isLength(blogTitle, 1)) {
                model.get('errors').add('blogTitle', 'Please enter a blog title.');
                this.invalidate();
            }
        },

        session: function session(model) {
            var usingOAuth = model.get('config.ghostOAuth');
            var isAuthenticated = model.get('session.isAuthenticated');

            if (usingOAuth && !isAuthenticated) {
                model.get('errors').add('session', 'Please connect a Ghost.org account before continuing');
                model.get('hasValidated').pushObject('session');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/signin', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['identification', 'signin', 'forgotPassword'],
        invalidMessage: 'Email address is not valid',

        identification: function identification(model) {
            var id = model.get('identification');

            if (!validator.empty(id) && !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        },

        signin: function signin(model) {
            var id = model.get('identification');
            var password = model.get('password');

            model.get('errors').clear();

            if (validator.empty(id)) {
                model.get('errors').add('identification', 'Please enter an email');
                this.invalidate();
            }

            if (!validator.empty(id) && !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }

            if (validator.empty(password)) {
                model.get('errors').add('password', 'Please enter a password');
                this.invalidate();
            }
        },

        forgotPassword: function forgotPassword(model) {
            var id = model.get('identification');

            model.get('errors').clear();

            if (validator.empty(id) || !validator.isEmail(id)) {
                model.get('errors').add('identification', this.get('invalidMessage'));
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/signup', ['exports', 'ghost-admin/validators/new-user'], function (exports, _ghostAdminValidatorsNewUser) {
  exports['default'] = _ghostAdminValidatorsNewUser['default'].create();
});
define('ghost-admin/validators/slack-integration', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['url'],

        url: function url(model) {
            var url = model.get('url');
            var hasValidated = model.get('hasValidated');

            var urlRegex = new RegExp(/(^https:\/\/hooks\.slack\.com\/services\/)(\S+)/);

            if (!validator.empty(url) && !url.match(urlRegex)) {
                model.get('errors').add('url', 'The URL must be in a format like https://hooks.slack.com/services/<your personal key>');

                this.invalidate();
            }

            hasValidated.addObject('url');
        }
    });
});
define('ghost-admin/validators/subscriber', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['email'],

        email: function email(model) {
            var email = model.get('email');

            if (validator.empty(email)) {
                model.get('errors').add('email', 'Please enter an email.');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            } else if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Invalid email.');
                model.get('hasValidated').pushObject('email');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/tag-settings', ['exports', 'ghost-admin/validators/base'], function (exports, _ghostAdminValidatorsBase) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['name', 'slug', 'description', 'metaTitle', 'metaDescription'],

        name: function name(model) {
            var name = model.get('name');

            if (validator.empty(name)) {
                model.get('errors').add('name', 'You must specify a name for the tag.');
                this.invalidate();
            } else if (name.match(/^,/)) {
                model.get('errors').add('name', 'Tag names can\'t start with commas.');
                this.invalidate();
            } else if (!validator.isLength(name, 0, 150)) {
                model.get('errors').add('name', 'Tag names cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        slug: function slug(model) {
            var slug = model.get('slug');

            if (!validator.isLength(slug, 0, 150)) {
                model.get('errors').add('slug', 'URL cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        description: function description(model) {
            var description = model.get('description');

            if (!validator.isLength(description, 0, 200)) {
                model.get('errors').add('description', 'Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        },

        metaTitle: function metaTitle(model) {
            var metaTitle = model.get('metaTitle');

            if (!validator.isLength(metaTitle, 0, 150)) {
                model.get('errors').add('metaTitle', 'Meta Title cannot be longer than 150 characters.');
                this.invalidate();
            }
        },

        metaDescription: function metaDescription(model) {
            var metaDescription = model.get('metaDescription');

            if (!validator.isLength(metaDescription, 0, 200)) {
                model.get('errors').add('metaDescription', 'Meta Description cannot be longer than 200 characters.');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/validators/user', ['exports', 'ghost-admin/validators/base', 'ember-utils'], function (exports, _ghostAdminValidatorsBase, _emberUtils) {
    exports['default'] = _ghostAdminValidatorsBase['default'].create({
        properties: ['name', 'bio', 'email', 'location', 'website', 'roles'],

        isActive: function isActive(model) {
            return model.get('status') === 'active';
        },

        name: function name(model) {
            var name = model.get('name');

            if (this.isActive(model)) {
                if (validator.empty(name)) {
                    model.get('errors').add('name', 'Please enter a name.');
                    this.invalidate();
                } else if (!validator.isLength(name, 0, 150)) {
                    model.get('errors').add('name', 'Name is too long');
                    this.invalidate();
                }
            }
        },

        bio: function bio(model) {
            var bio = model.get('bio');

            if (this.isActive(model)) {
                if (!validator.isLength(bio, 0, 200)) {
                    model.get('errors').add('bio', 'Bio is too long');
                    this.invalidate();
                }
            }
        },

        email: function email(model) {
            var email = model.get('email');

            if (!validator.isEmail(email)) {
                model.get('errors').add('email', 'Please supply a valid email address');
                this.invalidate();
            }
        },

        location: function location(model) {
            var location = model.get('location');

            if (this.isActive(model)) {
                if (!validator.isLength(location, 0, 150)) {
                    model.get('errors').add('location', 'Location is too long');
                    this.invalidate();
                }
            }
        },

        website: function website(model) {
            var website = model.get('website');
            // eslint-disable-next-line camelcase
            var isInvalidWebsite = !validator.isURL(website, { require_protocol: false }) || !validator.isLength(website, 0, 2000);

            if (this.isActive(model)) {
                if (!validator.empty(website) && isInvalidWebsite) {
                    model.get('errors').add('website', 'Website is not a valid url');
                    this.invalidate();
                }
            }
        },

        roles: function roles(model) {
            if (!this.isActive(model)) {
                var roles = model.get('roles');

                if (roles.length < 1) {
                    model.get('errors').add('role', 'Please select a role');
                    this.invalidate();
                }
            }
        },

        passwordChange: function passwordChange(model) {
            var newPassword = model.get('newPassword');
            var ne2Password = model.get('ne2Password');

            // validation only marks the requested property as validated so we
            // have to add properties manually
            model.get('hasValidated').addObject('newPassword');
            model.get('hasValidated').addObject('ne2Password');

            if ((0, _emberUtils.isBlank)(newPassword) && (0, _emberUtils.isBlank)(ne2Password)) {
                model.get('errors').add('newPassword', 'Sorry, passwords can\'t be blank');
                this.invalidate();
            } else {
                if (!validator.equals(newPassword, ne2Password)) {
                    model.get('errors').add('ne2Password', 'Your new passwords do not match');
                    this.invalidate();
                }

                if (!validator.isLength(newPassword, 8)) {
                    model.get('errors').add('newPassword', 'Your password must be at least 8 characters long.');
                    this.invalidate();
                }
            }
        },

        ownPasswordChange: function ownPasswordChange(model) {
            var oldPassword = model.get('password');

            this.passwordChange(model);

            // validation only marks the requested property as validated so we
            // have to add properties manually
            model.get('hasValidated').addObject('password');

            if ((0, _emberUtils.isBlank)(oldPassword)) {
                model.get('errors').add('password', 'Your current password is required to set a new one');
                this.invalidate();
            }
        }
    });
});
define('ghost-admin/views/application', ['exports', 'ember'], function (exports, _ember) {
  exports['default'] = _ember['default'].Component.extend({});
});
/* jshint ignore:start */



/* jshint ignore:end */

/* jshint ignore:start */

define('ghost-admin/config/environment', ['ember'], function(Ember) {
  var prefix = 'ghost-admin';
/* jshint ignore:start */

try {
  var metaName = prefix + '/config/environment';
  var rawConfig = document.querySelector('meta[name="' + metaName + '"]').getAttribute('content');
  var config = JSON.parse(unescape(rawConfig));

  var exports = { 'default': config };

  Object.defineProperty(exports, '__esModule', { value: true });

  return exports;
}
catch(err) {
  throw new Error('Could not read config from meta tag with name "' + metaName + '".');
}

/* jshint ignore:end */

});

/* jshint ignore:end */

/* jshint ignore:start */

if (!runningTests) {
  require("ghost-admin/app")["default"].create({"version":"1.0","LOG_ACTIVE_GENERATION":true,"LOG_TRANSITIONS":true,"LOG_TRANSITIONS_INTERNAL":true,"LOG_VIEW_LOOKUPS":true,"name":"ghost-admin"});
}

/* jshint ignore:end */
//# sourceMappingURL=ghost.map
